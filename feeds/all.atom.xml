<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>carlcarl's blog</title><link href="http://blog.carlcarl.me/" rel="alternate"></link><link href="http://blog.carlcarl.me/feeds/all.atom.xml" rel="self"></link><id>http://blog.carlcarl.me/</id><updated>2014-05-18T02:00:00+08:00</updated><entry><title>Python Windows schtasks</title><link href="http://blog.carlcarl.me/1396/python_windows_schtasks/" rel="alternate"></link><updated>2014-05-18T02:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-05-18:1396/python_windows_schtasks/</id><summary type="html">&lt;p&gt;最近在找 Windows 上有啥功能是像 Linux 上的 crontab 一樣可以設定週期性的工作，後來找到有 command line 版本的 &lt;code&gt;schtasks&lt;/code&gt; 可以用。這邊我主要想做的事是透過執行 bat 檔案，將我要的執行檔加入 daily job 裡，同樣的也可以透過另一個 bat 檔案簡單移除掉這個 job，下面是我的程式範例:&lt;/p&gt;
&lt;h2&gt;加入 bat 檔案目錄下的某個執行檔到 daily task 中&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="nv"&gt;file_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%~dp0&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="nv"&gt;exec_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%file_dir%&lt;/span&gt;a.exe
schtasks &lt;span class="n"&gt;/CREATE&lt;/span&gt; &lt;span class="n"&gt;/TN&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_task&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;/SC&lt;/span&gt; DAILY &lt;span class="n"&gt;/TR&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%exec_file% -a&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;/ST&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="nl"&gt;:00&lt;/span&gt;
&lt;span class="k"&gt;pause&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊的 &lt;code&gt;%~dp0&lt;/code&gt; 表示為這個 bat 檔案的絕對路徑，&lt;code&gt;a.exe&lt;/code&gt; 是我要執行的執行檔，將路徑和執行檔串起來後，利用 &lt;code&gt;schtasks&lt;/code&gt; 加入，&lt;code&gt;/TN&lt;/code&gt; 是 task name，必須是唯一，不可與其他 task 的一樣，&lt;code&gt;/SC DAILY&lt;/code&gt; 表示為 daily job，&lt;code&gt;/TR&lt;/code&gt; 是要執行的執行檔，參數的部分可以直接接在後面，&lt;code&gt;/ST&lt;/code&gt; 表示何時執行，這裡的時間是設定下午兩點。然後最後記得加 &lt;code&gt;pause&lt;/code&gt;，避免視窗出來後馬上就消失。&lt;/p&gt;
&lt;h2&gt;移除 task&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;schtasks &lt;span class="n"&gt;/DELETE&lt;/span&gt; &lt;span class="n"&gt;/TN&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_task&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;pause&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由於 task name 是唯一，所以刪除的話，只要指定 task name 就可以簡單的刪除掉 task 了。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://www.howtogeek.com/51236/how-to-create-modify-and-delete-scheduled-tasks-from-the-command-line/"&gt;How to Create, Modify and Delete Scheduled Tasks from the Command Line&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/3016452/how-do-i-create-a-scheduled-task-via-command-line-which-includes-advanced-opti"&gt;How do I create a scheduled task, via command line, which includes advanced options&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/3827567/how-to-get-the-path-of-the-batch-script-in-windows"&gt;How to get the path of the batch script in Windows?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://serverfault.com/questions/319701/how-to-delete-scheduled-task-from-command-line-without-confirmation-schtasks-d#_=_"&gt;How to delete scheduled task from command line without confirmation? (schtasks delete)&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="windows"></category></entry><entry><title>tcp_tw_recycle note</title><link href="http://blog.carlcarl.me/1395/tcp_tw_recycle_note/" rel="alternate"></link><updated>2014-05-14T16:30:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-05-14:1395/tcp_tw_recycle_note/</id><summary type="html">&lt;h2&gt;簡單結論&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/net/ipv4/tcp_tw_reuse&lt;/code&gt; 可以開。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/net/ipv4/tcp_tw_recycle&lt;/code&gt; 不應該開。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Links:&lt;br /&gt;
&lt;a href="http://blog.sina.com.cn/s/blog_781b0c850100znjd.html"&gt;tcp_tw_recycle和tcp_timestamps导致connect失败问题&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.pagefault.info/?p=416"&gt;打开tcp_tw_recycle引起的一个问题&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/6426253/tcp-tw-reuse-vs-tcp-tw-recycle-which-to-use-or-both"&gt;tcp_tw_reuse vs tcp_tw_recycle : Which to use (or both)?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.speedguide.net/articles/linux-tweaking-121"&gt;Linux Tweaking&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/8893888/dropping-of-connections-with-tcp-tw-recycle"&gt;Dropping of connections with tcp_tw_recycle&lt;/a&gt;  &lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>Restart uwsgi using git push</title><link href="http://blog.carlcarl.me/1394/restart_uwsgi_using_git_push/" rel="alternate"></link><updated>2014-05-05T21:30:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-05-05:1394/restart_uwsgi_using_git_push/</id><summary type="html">&lt;p&gt;因為一 push 完都要 ssh 進去重開 uwsgi server，實在很麻煩，所以 google 了一下有沒有什麼好的做法，雖然說用 &lt;a href="http://www.fabfile.org"&gt;fabric&lt;/a&gt; 進去下指令也是可以，不過想看看有沒有利用 git push 的 hook 來做的例子。&lt;/p&gt;
&lt;h2&gt;如何 restart uwsgi&lt;/h2&gt;
&lt;p&gt;查了一些資料，一般要 restart uwsgi 就要 root 權限，不過可以在 uwsgi 的設定檔中設定 &lt;code&gt;touch-reload&lt;/code&gt; 這個參數，以我的 .ini 設定格式的話就是設 &lt;code&gt;touch-reload = /your_path/reload&lt;/code&gt; 設完這個路徑後，一旦你在 &lt;code&gt;/your_path/&lt;/code&gt; 底下 touch 了一個檔案叫做 &lt;code&gt;reload&lt;/code&gt;，uwsgi 就會跟著 reload，相當方便，也不需要管什麼權限問題。&lt;/p&gt;
&lt;h2&gt;加進 git hook 裡&lt;/h2&gt;
&lt;p&gt;在 project 的 &lt;code&gt;.git/hooks/post-receive&lt;/code&gt; 或 &lt;code&gt;.git/hooks/post-update&lt;/code&gt; 裡，加入那段 touch 的指令，記得要在更新 git repo 之後做就可以了。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://serverfault.com/questions/411362/how-do-i-make-uwsgi-restart-when-a-python-script-is-modified"&gt;How do I make uWSGI restart when a Python script is modified?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/articles/TheArtOfGracefulReloading.html"&gt;The Art of Graceful Reloading&lt;/a&gt;  &lt;/p&gt;</summary><category term="uwsgi"></category><category term="python"></category></entry><entry><title>Python mocking requests</title><link href="http://blog.carlcarl.me/1393/python_mocking_requests/" rel="alternate"></link><updated>2014-04-24T15:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-04-24:1393/python_mocking_requests/</id><summary type="html">&lt;p&gt;查了一下有沒有相關的 library 可以做 web request 的 mocking，後來看到 &lt;a href="https://github.com/gabrielfalcao/HTTPretty"&gt;httpretty&lt;/a&gt; 這個可以用，除了內建的 &lt;code&gt;urlopen&lt;/code&gt; 這類以外，也支援 &lt;code&gt;requests&lt;/code&gt; library，不過有點可惜的是 &lt;code&gt;httpretty&lt;/code&gt; 不是內建的，所以必須用 &lt;code&gt;pip&lt;/code&gt; 先安裝來用。它的用法還算簡單，以下是個簡單的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httpretty&lt;/span&gt;

&lt;span class="nd"&gt;@httpretty.activate&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_request_new_token&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;token_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;123&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;httpretty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;httpretty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;https://api.imgur.com/oauth2/token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;https://api.imgur.com/oauth2/token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;token_response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的例子，先在 test function 上加入 &lt;code&gt;httpretty.activate&lt;/code&gt; decorator，接著在 function 裡頭用 &lt;code&gt;httpretty.register_uri&lt;/code&gt; 去註冊要 mocking 的 http method + url，回傳的資料則指定在 &lt;code&gt;body&lt;/code&gt; 這個參數，且必須是字串，回傳的 status code 則是指定在 &lt;code&gt;status&lt;/code&gt; 這個參數。接著可以測試發出的 request 所回傳的 response 是否會和預期的一樣，這邊的 &lt;code&gt;response.text&lt;/code&gt; 會等於 &lt;code&gt;token_response&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;另外，如果想在同一個 test function 去測試同樣的 http method + url，然後需要回傳不一樣的結果的話，必須在兩個 &lt;code&gt;register_uri&lt;/code&gt; function 中間呼叫 &lt;code&gt;httpretty.reset()&lt;/code&gt; 來 cancel 掉之前的 register。 &lt;/p&gt;
&lt;p&gt;參考網址:&lt;br /&gt;
&lt;a href="http://marekbrzoska.wordpress.com/2013/08/28/mocking-http-requests-in-python/"&gt;Mocking HTTP requests in python&lt;/a&gt;  &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>[Review] Python High Performance Programming</title><link href="http://blog.carlcarl.me/1392/review_python_high_performance_programming/" rel="alternate"></link><updated>2014-03-03T01:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-03-03:1392/review_python_high_performance_programming/</id><summary type="html">&lt;p&gt;&lt;img alt="Python High Performance Programming" src="http://i.imgur.com/xFWeiYk.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;之前在網站上看到這本書，當初看到書的標題其實就蠻有興趣的了，這次剛好有機會可以 review 這本書，所以就來看看了。&lt;/p&gt;
&lt;p&gt;書本身的章節並不多，主要分成四個章節：Profiling, Numpy, Cython, Parallel Processing. 不過跟我預想的其實不太一樣，我當初其實以為會是有關寫法，記憶體控制或是 Python 特殊演算法的介紹，不過這本書其實比較偏向這幾個工具或 lib 的使用和一些技巧這樣，我覺得是比較可惜的地方。現在自己的 Python 程式其實比較少注意在效能方面，所以其實還對這些工具的使用沒有太大的感覺XD，希望之後有機會可以試著用這些工具來 tune 一些 performance 的問題。&lt;/p&gt;
&lt;p&gt;而我比較有興趣的應該是最後的 parallel processing 的部分，這部分應該算是在平常就會常接觸到的用法，另外就是還有一定會提到的 synchronization 和 locks 的問題，書中的話有用一些簡單的例子來說明為何在 MultiProcesses 下需要注意這個問題，不過算是滿基本的就是，如果還能有較進階一點的用法和例子，我覺得是會更好。&lt;/p&gt;
&lt;p&gt;就個人而言，不太算是我的菜，大概是因為跟我預想的 topic 不同，不過對於想研究這幾個工具該如何使用的人，這本書倒是可以考慮看看，書中對於其中的用法其實都有滿詳細的解說，看完應該會有一些不錯的收獲。&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Check if command exist</title><link href="http://blog.carlcarl.me/1391/check_if_command_exist/" rel="alternate"></link><updated>2014-02-08T02:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-02-08:1391/check_if_command_exist/</id><summary type="html">&lt;p&gt;本來直覺是用 &lt;code&gt;which&lt;/code&gt;，不過查了一下資料，在 &lt;a href="https://stackoverflow.com/questions/592620/how-to-check-if-a-program-exists-from-a-bash-script"&gt;How to check if a program exists from a bash script?&lt;/a&gt; 發現有幾個不建議用 &lt;code&gt;which&lt;/code&gt; 的理由：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cost 太大，需要另外 call 一個 process 來處理&lt;/li&gt;
&lt;li&gt;exit status 在一些系統並沒有定義&lt;/li&gt;
&lt;li&gt;很多 operating system 會對 &lt;code&gt;which&lt;/code&gt; 做額外的 tweak，可能會有其他的 side effect&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在解答中建議可以用 &lt;code&gt;hash&lt;/code&gt;, &lt;code&gt;command&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; 等指令來判斷，其中 &lt;code&gt;command&lt;/code&gt; 的 exit code 在 POSIX 中是有明確定義的，其他的則無，所以使用 &lt;code&gt;command&lt;/code&gt; 應該是最安全的方式。如果不 care 的話也是可以用另外兩種，而像 &lt;code&gt;hash&lt;/code&gt; 本身執行會有額外的 side effect，那就是會算出 command 的 hash，讓下次可以更快找到並執行指令，以這點來看，似乎算是個不錯的好處。&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>OSX Mavericks ftp in finder</title><link href="http://blog.carlcarl.me/1390/osx_mavericks_ftp_in_finder/" rel="alternate"></link><updated>2014-01-27T23:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-01-27:1390/osx_mavericks_ftp_in_finder/</id><summary type="html">&lt;p&gt;找了一下 OSX 怎麼把 ftp 的目錄顯示在 finder 中，finder 雖然有內建 &lt;code&gt;Connect to Server&lt;/code&gt; 的功能，不過非常爛，帳密登入的一直沒辦法 work，而且好像還是 read only，ftp command line 卻都沒啥問題，所以建議就放棄內建的功能，別浪費時間了 = =。&lt;/p&gt;
&lt;p&gt;後來看到 &lt;a href="http://macfusionapp.org"&gt;MacFusion&lt;/a&gt; 搭配 &lt;a href="http://osxfuse.github.io"&gt;OSXFUSE&lt;/a&gt;，想說來試試看，就結果來看，還是沒有 KDE 的 Dolphin 來得方便啊QQ，不過也還算堪用就是。&lt;/p&gt;
&lt;p&gt;兩個都裝完之後，開啓 MacFusion，加入要 mount 的 ftp 或其他種 folder，但是我的沒有在 Finder sidebar 中出現可以點選的 folder，要先點選 Finder 中你這台 device，在裡面就看得到你 mount 的 folder 了。我試過加到 finder 的 sidebar 中，不過在 umount 之後，點選 sidebar 中的圖示也不會自動 mount，有點麻煩...。&lt;/p&gt;
&lt;p&gt;總之，目前先這樣用吧，以後有啥更好的用法再試試看。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="https://apple.stackexchange.com/questions/24699/can-i-edit-content-on-an-ftp-server-through-finder"&gt;MacFuse and MacFusion&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://osxdaily.com/2011/02/07/ftp-from-mac/"&gt;FTP from Mac OS X&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.thxbye.de/mac/mac-mounting-ftpsftp-volumes-with-the-finder.html"&gt;Mac: Mounting FTP/SFTP volumes with the Finder&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://apple.stackexchange.com/questions/110965/connect-to-ftp-server-in-finder-not-working"&gt;Connect to FTP server in Finder not working&lt;/a&gt;&lt;/p&gt;</summary><category term="mac"></category><category term="ftp"></category></entry><entry><title>OSX Mavericks ext4</title><link href="http://blog.carlcarl.me/1389/osx_mavericks_ext4/" rel="alternate"></link><updated>2014-01-26T01:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-01-26:1389/osx_mavericks_ext4/</id><summary type="html">&lt;p&gt;記錄一下 OSX Mavericks 讀寫 ext4 的方法：&lt;/p&gt;
&lt;p&gt;先裝 &lt;a href="http://osxfuse.github.io/"&gt;OSXFUSE&lt;/a&gt;，安裝過程中記得選 &lt;code&gt;MacFUSE Compatibility Layer&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;裝 &lt;a href="http://sourceforge.net/projects/fuse-ext2/"&gt;fuse-ext2&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下來如果接上 ext4 的隨身碟，應該是能讀，但是卻還是不能寫(死)。根據 &lt;a href="http://tex-numerics.blogspot.tw/2013/05/read-and-write-ext4-file-system-on-mac.html"&gt;Read and write ext4 file system on Mac OS X Lion&lt;/a&gt; 這篇的做法，需要變成用手動 mount 的方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fuse-ext2 -o force /dev/disk1s1　/where/to/mount/your/ext4/file/system
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;記得這邊的 &lt;code&gt;disk1s1&lt;/code&gt; 和 &lt;code&gt;/where/to/mount/your/ext4/file/system&lt;/code&gt; 要換成你自己對應的 device 和要 mount 上去的資料夾。之後再看看有沒有比較好的解決方案orz。&lt;/p&gt;
&lt;p&gt;參考網址:&lt;br /&gt;
&lt;a href="https://apple.stackexchange.com/questions/29842/how-can-i-mount-an-ext4-file-system-on-os-x"&gt;How can I mount an ext4 file system on OS X?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://superuser.com/questions/87547/how-can-i-uninstall-fuse-ext2-and-macfuse-on-mac-os-x"&gt;How can I uninstall fuse-ext2 and macfuse on Mac OS X&lt;/a&gt;  &lt;/p&gt;</summary><category term="mac"></category><category term="ext4"></category></entry><entry><title>Shell script set current working directory</title><link href="http://blog.carlcarl.me/1388/shell_script_set_current_working_directory/" rel="alternate"></link><updated>2014-01-25T23:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-01-25:1388/shell_script_set_current_working_directory/</id><summary type="html">&lt;p&gt;在 &lt;a href="http://stackoverflow.com/questions/3349105/bash-script-set-current-working-directory-to-the-directory-of-the-script"&gt;stackoverflow&lt;/a&gt; 上看到的，好像很常會用到所以先記下來，兩種方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# First method&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;%\*&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Second method&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$(dirname &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一個是用 &lt;a href="http://stackoverflow.com/questions/6393551/what-is-the-meaning-of-0-in-a-bash-script"&gt;parameter expansion&lt;/a&gt;。&lt;/p&gt;</summary><category term="bash"></category></entry><entry><title>Raspberry Pi BT Transmission</title><link href="http://blog.carlcarl.me/1387/raspberry_pi_bt_transmission/" rel="alternate"></link><updated>2014-01-21T03:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-01-21:1387/raspberry_pi_bt_transmission/</id><summary type="html">&lt;p&gt;研究了一下怎麼在 &lt;a href="http://www.raspberrypi.org"&gt;raspberry pi&lt;/a&gt; + &lt;a href="https://www.archlinux.org"&gt;ArchLinux&lt;/a&gt; 上用 BT，好像都是用 &lt;a href="http://www.transmissionbt.com"&gt;transmission&lt;/a&gt;，所以我就跟著用了XD，下面是一些步驟。&lt;/p&gt;
&lt;h2&gt;安裝 transmission daemon&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pacman&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;transmission&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Run transmission daemon&lt;/h2&gt;
&lt;p&gt;由於一開始沒有設定檔，要先跑過才有，所以先跑一下，是說要這樣做也太囧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;transmission&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;transmission&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;transmission&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;修改設定檔&lt;/h2&gt;
&lt;p&gt;設定檔位置在 &lt;code&gt;/var/lib/transmission/.config/transmission-daemon/settings.json&lt;/code&gt; (這位置好爛)，我自己的設定檔如下，後方的 &lt;code&gt;M&lt;/code&gt; 表示新增或改過的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;alt-speed-down&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;alt-speed-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;alt-speed-time-begin&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;540&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;alt-speed-time-day&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;alt-speed-time-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;alt-speed-time-end&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;alt-speed-up&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;bind-address-ipv4&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;bind-address-ipv6&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;::&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;blocklist-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;blocklist-url&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.example.com/blocklist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;cache-size-mb&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dht-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;download-dir&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/mnt/BT/Complete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;download-queue-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;download-queue-size&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;encryption&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;idle-seeding-limit&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;idle-seeding-limit-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;incomplete-dir&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/mnt/BT/Incomplete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;incomplete-dir-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;lpd-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;message-level&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-congestion-algorithm&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-id-ttl-hours&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-limit-global&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-limit-per-torrent&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-port&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;51413&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-port-random-high&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-port-random-low&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;49152&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-port-random-on-start&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;peer-socket-tos&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;pex-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;port-forwarding-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;preallocation&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;prefetch-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
    &lt;span class="s2"&gt;&amp;quot;queue-stalled-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;queue-stalled-minutes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ratio-limit&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ratio-limit-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rename-partial-files&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-authentication-required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-bind-address&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-password&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{a803e8f49fd53e7d4516b14511e68ea109f4a62bfbiCsfoS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-port&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9091&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-url&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/transmission/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-username&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;carlcarl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-whitelist&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;192.168.11.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rpc-whitelist-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;scrape-paused-torrents-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;script-torrent-done-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;script-torrent-done-filename&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;seed-queue-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;seed-queue-size&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;speed-limit-down&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;speed-limit-down-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;speed-limit-up&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;speed-limit-up-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;start-added-torrents&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;trash-original-torrent-files&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;umask&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;upload-slots-per-torrent&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;utp-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;watch-dir&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/mnt/BT/Torrents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;watch-dir-enabled&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="cm"&gt;/* M */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;download-dir&lt;/code&gt; 和 &lt;code&gt;incomplete-dir&lt;/code&gt; 分開來放比較能分清楚；rpc 的部分就修改了一下可以連 web 的 ip，這邊限制在 &lt;code&gt;192.168.11.*&lt;/code&gt;，&lt;code&gt;rpc-username&lt;/code&gt; 這邊應該可以不用，就改一下放著這樣XD，&lt;code&gt;speed-limit-*&lt;/code&gt; 系列的就是限制下載和上傳的速度，基本上是要設，也可以透過 web 界面再來設定，&lt;code&gt;watch-dir&lt;/code&gt; 是自動偵測如果這個資料夾底下有新的 torrent，就開始那個 torrent 的下載，目前可能還用不太到，也是先放著這樣，目前透過 web 上傳 torrent 應該就夠用了。&lt;/p&gt;
&lt;h2&gt;執行 transmission deamon again&lt;/h2&gt;
&lt;p&gt;改完設定檔後，連 &lt;code&gt;http://&amp;lt;ip&amp;gt;:9091&lt;/code&gt; 應該就看得到了(&lt;code&gt;&amp;lt;ip&amp;gt;&lt;/code&gt; 就是你板子的 ip)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;transmission&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;其他建議&lt;/h2&gt;
&lt;p&gt;我個人是建議可以把下載資料夾改成 &lt;code&gt;775&lt;/code&gt; 權限，然後將資料夾的 owner 設為自己的帳號，group owner 則用 &lt;code&gt;transmission&lt;/code&gt;，使用上會比較方便，權限也做一點保留。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="https://lnxslck.wordpress.com/2013/03/08/transmission-daemon-on-archlinux-arm/"&gt;Transmission-daemon on Archlinux ARM&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://wiki.archlinux.org/index.php/Transmission"&gt;Transmission Archlinux Wiki&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://wwssllabcd.github.io/blog/2013/04/22/how-to-setup-transmission-deamon-in-raspberry-pi/"&gt;打造脫機下載農場，使用Raspberry Pi + Transmission-daemon&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://kasdia.tw/blog/2013/09/16/在vps上安裝transmission來進行bt下載/"&gt;在VPS上安裝TRANSMISSION來進行BT下載&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://wiki.archlinux.org/index.php/fstab"&gt;fstab&lt;/a&gt;  &lt;/p&gt;</summary><category term="raspberry"></category></entry><entry><title>Raspberry Pi beginner</title><link href="http://blog.carlcarl.me/1386/raspberry_pi_beginner/" rel="alternate"></link><updated>2014-01-21T02:30:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-01-21:1386/raspberry_pi_beginner/</id><summary type="html">&lt;p&gt;之前在 COSCUP 拿到的 Raspberry Pi 一直放著沒動，最近想說還是拿來玩一下好了，不然有點浪費XD。&lt;/p&gt;
&lt;h2&gt;基本配備&lt;/h2&gt;
&lt;p&gt;大部份其實都有了，SD 卡則是自己另外買了一張 &lt;a href="http://shopping.pchome.com.tw/?mod=item&amp;amp;func=exhibit&amp;amp;IT_NO=DGAG0H-A79608303&amp;amp;SR_NO=DGAG0H&amp;amp;ROWNO=25"&gt;SanDisk Extreme SDHC UHS-I 16GB&lt;/a&gt;，USB hub 可能之後也會需要，不過還不知道要買哪一個，這邊有 &lt;a href="http://elinux.org/RPi_Powered_USB_Hubs"&gt;USB hubs 的清單&lt;/a&gt; 可以看。OS 則是用 Arch。&lt;/p&gt;
&lt;h2&gt;燒錄 image 到 SD 卡&lt;/h2&gt;
&lt;p&gt;在 Mac 和 Linux 底下可以直接用 &lt;code&gt;dd&lt;/code&gt;，ex: &lt;code&gt;dd bs=1M if=Path/to/archlinux-hf-2013-02-11.img of=/dev/mmcblk1&lt;/code&gt;。Mac 底下如果遇到 &lt;code&gt;Resource busy&lt;/code&gt; 的 error 的話，可以參考 &lt;a href="http://forums.macrumors.com/showthread.php?t=384730"&gt;Using dd I'm getting a Resource Busy error&lt;/a&gt;，&lt;/p&gt;
&lt;h2&gt;Resize Paritions&lt;/h2&gt;
&lt;p&gt;一開始燒 image 進去之後，空間會是固定的，想要利用到 SD 卡所有的儲存空間的話，需要自己做延伸，可以參考這篇: &lt;a href="https://raspberrypi.stackexchange.com/questions/499/how-can-i-resize-my-root-partition"&gt;How can I resize my / (root) partition?&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其他的設定可以參考這幾篇：&lt;br /&gt;
&lt;a href="http://wwssllabcd.github.io/blog/2013/01/31/how-to-setup-raspberry-pi/"&gt;Raspberry Pi 安裝心得、教學、簡介&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blog.xuite.net/zack_pan/blog/73179035-建構Raspberry+Pi+with+Arch+Linux+ARM"&gt;建構Raspberry Pi with Arch Linux ARM&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://life-of-raspberrypi.blogspot.tw/2013/01/raspberry-pi-310.html"&gt;Raspberry Pi 購買指南&lt;/a&gt;  &lt;/p&gt;</summary><category term="raspberry"></category></entry><entry><title>[Review] Learning Python Design Patterns</title><link href="http://blog.carlcarl.me/1385/review_learning_python_design_patterns/" rel="alternate"></link><updated>2014-01-19T16:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-01-19:1385/review_learning_python_design_patterns/</id><summary type="html">&lt;p&gt;&lt;img alt="learning python design pattern" src="http://i.imgur.com/y1iu7cl.png" /&gt;&lt;/p&gt;
&lt;p&gt;其實之前就想看有關 design pattern 的書了，前一陣子剛好有這個機會看這本書，順便想看看在 Python 上要怎麼運用這些 pattern。&lt;/p&gt;
&lt;p&gt;這本書頁數並沒有說很多，約 130 頁左右，看起來不會說很吃力。書中每一章都會對一至兩種 pattern 做解釋，然後說明優缺點，並附上一個不算偷懶的 example，還算好理解的就是，不過覺得有點可惜的是如果有加上沒有應用和應用後的一些實際比較就更好了。&lt;/p&gt;
&lt;p&gt;而這本書本身應該會比較適合剛學 Python 一些時間的中 ~ 新手，例如第一章講 MVC 其實我自己就覺得不是很必要了，不過就適合不是很熟的人吧。接下來幾章則會講到 Singleton pattern，Factory Method, Facade pattern, Proxy pattern, Observer pattern, Command pattern 和 Template Method design pattern 這些。&lt;/p&gt;
&lt;p&gt;而上述的這些 patterns，其中像是 Facade, Proxy, Command 和 Template Method 我都沒看過 XD。從這本書中所描述的來看，Facade pattern 簡單說就是封裝，把複雜的底層包起來提供一個 interface ；Proxy pattern 則是用來做中介管理，就感覺上，好像也能做到 Singleton pattern 的事，另外也適合拿來做 cache 管理之類的；Command pattern 跟 Proxy 其實也滿像的，不過實際應用的時候細節上會不太一樣，例如 undo, history maintain 的功能；Template Method 看完發現我之前用的好像還蠻像這個的XD，主要是對同類型的應用，細節上可能不太一樣，所以提供一個 abstact 的 template class，再由這些應用繼承並實作不同細節的地方，不過這樣其實就必須先知道每個應用的大概實作方法和架構，才有辦法切開不同的地方，我自己之前寫是分三層，整個功能的流程，每個 method 的流程以及 method 的細部實作，把前兩層寫好一個大致通用的之後，再把細部留給繼承的 class 實作，如果有些差異太大，沒辦法只實作細部實作的話，再考慮覆寫整個 method 的流程這樣。我自己寫的可以參考 &lt;a href="https://github.com/carlcarl/imgurup"&gt;這裡&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;總之，這本書個人是覺得還算 OK 囉，有興趣的可以參考看看 :)。&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>backbone.js some tips</title><link href="http://blog.carlcarl.me/1384/backbone_js_some_tips/" rel="alternate"></link><updated>2014-01-15T01:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-01-15:1384/backbone_js_some_tips/</id><summary type="html">&lt;p&gt;用了個簡單的網站改成用 &lt;a href="http://backbonejs.org"&gt;backbone.js&lt;/a&gt; 來套，之所以用 backbone 是因為不太喜歡在 html 上加一堆 attributes，backbone 這樣偏純 js，再加上 &lt;a href="http://underscorejs.org"&gt;underscore&lt;/a&gt; 做 template 的方式覺得比較適合我，以後如果有興趣再碰看看 &lt;a href="http://emberjs.com"&gt;ember.js&lt;/a&gt; 吧，&lt;a href="http://angularjs.org"&gt;angular.js&lt;/a&gt; 現階段感覺還蠻流行的，不過就不太想碰就是 XD。&lt;/p&gt;
&lt;p&gt;套完 backbone 之後，程式硬是多出了一倍的量，不知道到底有沒有幫助到我(炸)，而且 backbone 官網的 docuemtn 常會漏掉一些重要的資訊，讓我卡超久= =，這邊順便記錄一下這樣。架構的話，看到有篇 stackoverflow 上的問題，他的 example code 我還蠻喜歡的，也許可以參考看看: &lt;a href="http://stackoverflow.com/questions/13257722/backbone-parsing-json-response"&gt;Backbone parsing json response&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;Create element in views&lt;/h2&gt;
&lt;p&gt;如果是要 create elements 的話，在 views 裡要用 &lt;code&gt;tagname&lt;/code&gt;，例如要 create 一個 &lt;code&gt;&amp;lt;tr&amp;gt;&amp;lt;/tr&amp;gt;&lt;/code&gt;的話就用: &lt;code&gt;tagname: tr&lt;/code&gt;，而如果是要操作在 DOM 中的 element 的話就用 &lt;code&gt;el&lt;/code&gt;，例如: &lt;code&gt;el: $('#content')&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;Receive events&lt;/h2&gt;
&lt;p&gt;要注意 event 中要 monitor 的 element，必須在 &lt;code&gt;el&lt;/code&gt; 這個 element 裡面，不然永遠聽不到= =。例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;submit #myform&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mysubmit&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;#myform&lt;/code&gt; 就必須是在 &lt;code&gt;#content&lt;/code&gt; 裡面。&lt;/p&gt;
&lt;h2&gt;Parse ajax response&lt;/h2&gt;
&lt;p&gt;Ajax 的 response 格式有很多種，每個網站可能都有自己的格式，在 Collection 的部分，假如要讀的多筆資料都在 &lt;code&gt;response.data&lt;/code&gt; 裡的話，就會需要在 Collection 裡頭加上 &lt;code&gt;parse&lt;/code&gt; 來處理:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* json example&lt;/span&gt;
&lt;span class="cm"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;    &amp;quot;data&amp;quot;: [ {&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;id&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;value&amp;quot;: &amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;        }, {&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;id&amp;quot;: &amp;quot;2&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;value&amp;quot;: &amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;    } ],&lt;/span&gt;
&lt;span class="cm"&gt;    &amp;quot;meta&amp;quot;: &amp;quot;test&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;又假如在 &lt;code&gt;response.data&lt;/code&gt; 這個 array 裡，主要的 attribute 名稱不是 &lt;code&gt;id&lt;/code&gt;，而是其他名稱，比如說 &lt;code&gt;name&lt;/code&gt;，就要在 Model 裡加上定義，不然 Model parse 會有問題:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* json example from response&lt;/span&gt;
&lt;span class="cm"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;    &amp;quot;data&amp;quot;: [ {&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;name&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;value&amp;quot;: &amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;        }, {&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;name&amp;quot;: &amp;quot;2&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;        &amp;quot;value&amp;quot;: &amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;    } ],&lt;/span&gt;
&lt;span class="cm"&gt;    &amp;quot;meta&amp;quot;: &amp;quot;test&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;idAttribute&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Serialize form inputs&lt;/h2&gt;
&lt;p&gt;我之前是用 &lt;a href="https://github.com/macek/jquery-serialize-object"&gt;jquery-serialize-object&lt;/a&gt;，後來因為要 submit 的資料不多，所以就把這個 plugin 拿掉，改用 jquery selector 來拿了。&lt;/p&gt;
&lt;p&gt;其他也可以參考這篇: &lt;a href="http://stackoverflow.com/questions/14554111/serialize-form-inputs-to-json-using-backbone-js"&gt;Serialize form inputs to JSON using Backbone.js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Pass values to Model&lt;/h2&gt;
&lt;p&gt;如果不想要傳過去的資料變成 Model 的 attributes，而是其他額外的資料的話，例如要傳一個 flag 的話，可以這樣做:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;spinner animation with ajax&lt;/h2&gt;
&lt;p&gt;在 ajax 發出和收到的時候分別顯示和隱藏 spinner，原本其實就可以用 &lt;code&gt;ajaxStart&lt;/code&gt; 和 &lt;code&gt;ajaxStop&lt;/code&gt; 這兩個 event 來處理，在 backbone 裡也可以用以下的方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;APP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajaxStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sync&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajaxComplete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ajaxStart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#loading&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fadeIn&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nx"&gt;ajaxComplete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#loading&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fadeOut&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How to render tables&lt;/h2&gt;
&lt;p&gt;參考這篇的解答: &lt;a href="http://stackoverflow.com/questions/10257401/render-html-table-with-underscore-template-engine-using-a-backbone-complex-model"&gt;Render html table with underscore template engine using a backbone complex model&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Post collections&lt;/h2&gt;
&lt;p&gt;這個我還沒試過，不過可以參考這篇解答的做法: &lt;a href="http://stackoverflow.com/questions/6879138/how-to-save-an-entire-collection-in-backbone-js-backbone-sync-or-jquery-ajax"&gt;“How” to save an entire collection in Backbone.js - Backbone.sync or jQuery.ajax?&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;2-way data binding&lt;/h2&gt;
&lt;p&gt;backbone 本身沒提供，只能用 jquery selector 來抓，看到有個 plugin 也許可以用用看，我是還沒用過lol: &lt;a href="http://nytimes.github.io/backbone.stickit/"&gt;backbone.stickit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;參考資料:&lt;br /&gt;
&lt;a href="http://backbonetutorials.com/what-is-a-view/"&gt;Backbone.js Beginner Video Tutorial&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/11331604/backbone-js-ajax-calls"&gt;backbone.js ajax calls&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/7084651/how-can-i-pass-properties-into-a-backbone-model-which-i-do-not-wish-to-be-treate"&gt;How can I pass properties into a Backbone.Model which I do not wish to be treated as attributes?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/5832295/backbone-js-how-and-when-to-show-a-spinner"&gt;backbone.js - how and when to show a spinner&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://eviltrout.com/2013/06/15/ember-vs-angular.html"&gt;AngularJS vs Ember&lt;/a&gt;  &lt;/p&gt;</summary><category term="backbone"></category></entry><entry><title>g0v.tw nav menu fix</title><link href="http://blog.carlcarl.me/1383/g0v_tw_nav_menu_fix/" rel="alternate"></link><updated>2014-01-02T00:40:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2014-01-02:1383/g0v_tw_nav_menu_fix/</id><summary type="html">&lt;p&gt;&lt;a href="http://g0v.tw"&gt;g0v.tw&lt;/a&gt; 最近改版了，css framework 也改用 &lt;a href="http://semantic-ui.com"&gt;semantic-ui&lt;/a&gt;，看起來還蠻潮的，不過目前在用，感覺問題還蠻多的，其中一個大問題應該就是沒有 responsive layout 可以直接套用，所以大概就只能自己土炮吧～。不過這次修的問題跟這個無關，主要是要讓 nav menu 可以隨著在不同網頁，然後 highlight color 到不同 menu item 上，主要有遇到幾個問題：&lt;/p&gt;
&lt;h2&gt;網頁不是用 ajax，而是直接連結到不同網頁&lt;/h2&gt;
&lt;p&gt;所以就不能用 javascript 直接 assign class 到對應的 menu item 上，只能在 template 上動手腳，template 是用 &lt;code&gt;jade&lt;/code&gt;。首先先在 nav menu 的 template 開頭加上變數宣告，define 一個 &lt;code&gt;vars&lt;/code&gt; block，然後把這些變數塞到各個 menu item 的 classs 內：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nav_cls&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;nav_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nav_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nav_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;talk&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;nav_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;actinfo&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nav_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nav_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;block&lt;/span&gt; vars
&lt;span class="nc"&gt;.ui.fluid.seven.item.menu&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;(&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item #{ nav_cls.index }&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/index.html&amp;quot;&lt;/span&gt;)
  | 首頁
&lt;span class="nt"&gt;div&lt;/span&gt;(&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ui pointing dropdown link item #{ nav_cls.about }&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後在各個 sub template 引用 &lt;code&gt;vars&lt;/code&gt; 這個 block，然後在這個 block 內，assgin value 給對應的 variable ,至於為啥用 &lt;code&gt;highlight&lt;/code&gt; 不用 &lt;code&gt;active&lt;/code&gt; 下面還會再解釋：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;block&lt;/span&gt; vars
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;nav_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="-Symbol"&gt;&amp;#39;highlight&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這個是目前想到的解法。有想過直接給一個固定的 variable，裡面塞對應的 element id，再用 javascript assign class 進去就好，寫法簡潔得多，不過這樣在 render 上就有點不太好看了 orz。&lt;/p&gt;
&lt;h2&gt;Dropdown menu 不支援 active 下的 color 顯示&lt;/h2&gt;
&lt;p&gt;嗯...，用 semantic-ui 本身的 menu color highlight，只對 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element 有效，而且 dropdown menu 在 pop  menu 時會加上 &lt;code&gt;.active&lt;/code&gt;，但是 hide menu 之後會把 &lt;code&gt;.active&lt;/code&gt; 拿掉囧，所以乾脆自己生一個 class 來代替，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.highlight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F05940&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F05940&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;.2em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;inset&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;.2em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;inset&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ref commit: &lt;a href="https://github.com/g0v/g0v.tw/commit/df20f4c917521977eb33f0f29ab932395843de49"&gt;https://github.com/g0v/g0v.tw/commit/df20f4c917521977eb33f0f29ab932395843de49&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;參考連結:&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/13668881/variable-in-class-name-jade"&gt;variable in class name jade&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/visionmedia/jade/issues/698"&gt;Multi-line variable declaration is not supported&lt;/a&gt;  &lt;/p&gt;</summary><category term="g0v"></category><category term="jade"></category><category term="css"></category></entry><entry><title>Django template check if in debug mode</title><link href="http://blog.carlcarl.me/1382/django_template_check_if_in_debug_mode/" rel="alternate"></link><updated>2013-12-22T21:30:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-12-22:1382/django_template_check_if_in_debug_mode/</id><summary type="html">&lt;p&gt;找了一下在 template 中確認是否在 debug mode 底下的方法，找了很多，不過好像都有點繞圈子，後來發現其實 Django 內建還是有&lt;a href="http://www.djangobook.com/en/2.0/chapter09.html"&gt;簡單的方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;settings.py&lt;/code&gt; 裡，先確認 &lt;code&gt;debug&lt;/code&gt; 是 &lt;code&gt;True&lt;/code&gt;，然後再加上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INTERNAL_IPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後在 template 裡就可以這樣用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;production&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果到 production 的話，就將 &lt;code&gt;debug&lt;/code&gt; 設為 &lt;code&gt;False&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="https://djangosnippets.org/snippets/93/"&gt;Template Query Debug&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/api/#subclassing-context-requestcontext"&gt;Subclassing Context: RequestContext&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4247717/django-using-different-templates-for-production/"&gt;Django: Using Different Templates for Production&lt;/a&gt;  &lt;/p&gt;</summary><category term="django"></category></entry><entry><title>[review] kivy interactive applications in python</title><link href="http://blog.carlcarl.me/1381/review_kivy_interactive_applications_in_python/" rel="alternate"></link><updated>2013-12-08T17:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-12-08:1381/review_kivy_interactive_applications_in_python/</id><summary type="html">&lt;p&gt;&lt;img alt="kivy interactive applications in python" src="http://i.imgur.com/87z6yUy.png" /&gt;&lt;/p&gt;
&lt;p&gt;其實很久沒看有關 GUI library 相關的書了，會看這本是因為之前其實就有聽說過 &lt;a href="http://kivy.org"&gt;kivy&lt;/a&gt; 這個 python library，但是一直沒機會摸摸看。前一陣子剛好 &lt;a href="http://www.packtpub.com"&gt;packt&lt;/a&gt; 在找人 review 一些電子書，所以就想說可以試試看。是說 packt 最近感覺還滿活躍的，常在一些網站徵求可以幫忙 review 的人，譬如說我現在就有在看另外一本 zsh 的書，幫忙訂正草稿和給一些意見，事後除了可以得到原來的電子書，也可以另外在網站上選一本自己想要的電子書，還蠻不錯的~~。&lt;/p&gt;
&lt;p&gt;從 kivy 的官網可以看到它的一些特色，像 cross platform，license 也是很 free 的 MIT，其他還有像常被拿來講的 multi-touch 之類的 feature。在書中可以看到 kivy 還有一個比較特別的地方就是它有一個 kivy language，其實有種 css 的感覺，主要就是負責整個 GUI 的 view 該怎麼呈現，而且也有各種不同的 layout 可以套用，不過大致上我覺得是有利有弊吧，把 view 切出來，在程式的處理上可能是會比較乾淨，不過這樣也要再花時間另外學一種語言，如果可以的話，我是滿希望可以直接套用 css 語法，這樣學習曲線比較沒那麼陡 XD。&lt;/p&gt;
&lt;p&gt;整本書分成幾個部分，一開始就直接講該如何建立一個 GUI app，然後講解 kivy language 的寫法和一些排版該怎麼實作，是說沒講說 kivy 該怎麼安裝，讓我一開始不知道哪種安裝方法比較好，譬如說我可以用 &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;，可以從官網下載 kivy 的安裝程式，也可以用 &lt;a href="http://brew.sh"&gt;homebrew&lt;/a&gt; 安裝，後來有查一下資料和實際試過幾個方法發現 pip 安裝有點問題，homebrew 安裝會有點不穩，所以就用官方網站上的了。不過我覺得少點篇幅介紹怎麼安裝是件好事就是XD。&lt;/p&gt;
&lt;p&gt;接下來幾章則是介紹 canvas 的用法，widget 的 event 該怎麼建立，因為之前有摸過 Java，感覺在使用上算是相差不大，如果有用過其他一些 GUI library 的話，應該不會覺得很陌生，其他接著是一些比較進階的應用，也有講到 multi-touch 的實作。最後一章則是直接實作一個類似小蜜蜂的射擊遊戲。這部分就會包含一些 animation 該怎麼實現，子彈射擊的音效和軌跡該怎麼做之類的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Invaders Revenge" src="http://i.imgur.com/YCH8DwW.png" /&gt;&lt;/p&gt;
&lt;p&gt;整個部分其實章節內容不多，書中有很大的比例都是程式碼，作者會根據這些程式碼分段講解對應的功能，也會有如上圖的截圖解說，不過並不會讓人覺得像是在衝頁數就是(譬如說國內的一些教學工具書)，如果有在用 kivy 的話，這本書是蠻適合參考看看的，因為程式碼很多，就算看不懂解說，也可以從程式大致了解實際上要怎麼用，所以還滿不錯的 XD。&lt;/p&gt;</summary><category term="kivy"></category></entry><entry><title>Define Makefile variable in rule</title><link href="http://blog.carlcarl.me/1380/define_makefile_variable_in_rule/" rel="alternate"></link><updated>2013-11-29T23:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-11-29:1380/define_makefile_variable_in_rule/</id><summary type="html">&lt;p&gt;沒在寫啥 Makefile，要用的時候才發現不會在 rule 裡面 assign variable XD。具體用法如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval &lt;/span&gt;tmp :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell &lt;span class="nb"&gt;echo &lt;/span&gt;1&lt;span class="k"&gt;))&lt;/span&gt;
    @echo &lt;span class="k"&gt;$(&lt;/span&gt;tmp&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考資料:&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/1909188/define-make-variable-at-rule-execution-time"&gt;Define make variable at rule execution time&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/2019989/how-to-assign-the-output-of-a-command-to-a-makefile-variable"&gt;How to assign the output of a command to a Makefile variable&lt;/a&gt;  &lt;/p&gt;</summary><category term=""></category></entry><entry><title>Python celery crontab</title><link href="http://blog.carlcarl.me/1379/python_celery_crontab/" rel="alternate"></link><updated>2013-11-15T00:19:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-11-15:1379/python_celery_crontab/</id><summary type="html">&lt;p&gt;記錄一下 celery crontab 的用法，分成兩個部分：service 和 worker。service 負責定期塞 job 到 message queue 裡面，worker 則將 queue 裡的 job 拿出來執行，message queue 的部分這裡使用 &lt;code&gt;rabbitmq&lt;/code&gt;。這邊為了方便，用了一個簡單的加法為例。&lt;/p&gt;
&lt;h2&gt;Worker&lt;/h2&gt;
&lt;h3&gt;tasks.py&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="n"&gt;celery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;amqp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;amqp://guest@localhost//&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;執行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 叫三個 worker，每個 worker 有三個 process，然後取 tasks[.py] 內的 task&lt;/span&gt;
celeryd-multi start 3 -c 3 -A tasks
&lt;span class="c"&gt;# 想叫一個 worker，有三個 process，然後是用 eventlet，並且取 tasks[.py] 內的 task&lt;/span&gt;
celeryd-multi start 1 -P eventlet -c 3 -A tasks
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Daemon script&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/celery/celery/blob/3.1/extra/generic-init.d/celeryd"&gt;/etc/init.d/celeryd&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.celeryproject.org/en/master/tutorials/daemonizing.html"&gt;/etc/default/celeryd&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Service&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;celeryconfig.py&lt;/code&gt; 是預設會讀的設定檔&lt;/p&gt;
&lt;h3&gt;celeryconfig.py&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;

&lt;span class="n"&gt;CELERYBEAT_SCHEDULE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;add-every-30-seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c"&gt;# 可以自己決定取什麼名字&lt;/span&gt;

        &lt;span class="c"&gt;# 塞 tasks 內的 add 到 job queue 裡，&lt;/span&gt;
        &lt;span class="c"&gt;# tasks.py 不需要跟 celeryconfig.py 在同個目錄下，&lt;/span&gt;
        &lt;span class="c"&gt;# 這裡看來只是把這個 task 名稱丟進 queue 裡而已&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tasks.add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

         &lt;span class="c"&gt;# 每隔 30 秒&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;schedule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

        &lt;span class="c"&gt;# 加法的兩個數字&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;CELERY_TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;執行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;celery beat
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Daemon script&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/celery/celery/blob/3.1/extra/generic-init.d/celerybeat"&gt;/etc/init.d/celerybeat&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.celeryproject.org/en/master/tutorials/daemonizing.html"&gt;/etc/default/celerybeat&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html"&gt;Periodic Tasks&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.celeryproject.org/en/master/getting-started/first-steps-with-celery.html"&gt;http://docs.celeryproject.org/en/master/getting-started/first-steps-with-celery.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.andretw.com/2013/07/using-celery-right-now-and-more-best-practices-1.html"&gt;用 Celery 結合 Redis 或 RabbitMQ = 馬上開始使用 Task Queue&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.metaltoad.com/blog/celery-periodic-tasks-installation-infinity"&gt;http://www.metaltoad.com/blog/celery-periodic-tasks-installation-infinity&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.celeryproject.org/en/latest/userguide/calling.html#linking-callbacks-errbacks"&gt;Calling Tasks&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.celeryproject.org/en/latest/reference/celery.bin.celeryd_multi.html"&gt;celery.bin.celeryd_multi&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://tech.idv2.com/2011/06/27/django-celery-rabbitmq-intro/"&gt;使用django+celery+RabbitMQ實現異步執行&lt;/a&gt;  &lt;/p&gt;</summary><category term="celery"></category></entry><entry><title>Ubuntu resolveconf setting</title><link href="http://blog.carlcarl.me/1378/ubuntu_resolveconf_setting/" rel="alternate"></link><updated>2013-11-02T11:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-11-02:1378/ubuntu_resolveconf_setting/</id><summary type="html">&lt;p&gt;好久沒設定 ubuntu server 了，最近在用的時候發現重開的時候，DNS 設定 (&lt;code&gt;resol.conf&lt;/code&gt;) 會 reset，可是我也沒裝 NetworkManager 之類的東西啊 =.=，查了一下，是 &lt;code&gt;resolveconf&lt;/code&gt; 這個套件的影響，可是我不太想直接把它移除，因為怕有啥 side effect，所以就還是照它的使用方法做，順便記錄一下該怎麼設定：&lt;/p&gt;
&lt;h2&gt;先刪除原本預設的 DNS 設定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo resolvconf -d eth0.inet
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;新增設定檔&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir -p /etc/resolvconf/resolv.conf.d
sudo vim /etc/resolvconf/resolv.conf.d/base
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;base 的內容(xxx.xxx.xxx.xxx 是你要的 DNS IP)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nameserver xxx.xxx.xxx.xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更新設定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo resolvconf -u
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;應該這樣就可以了，其實上面這些在 &lt;a href="https://code.google.com/p/collective-intelligence-framework/wiki/ResolvconfSetup_v1"&gt;這邊&lt;/a&gt; 就有了，不過在自己的 blog 搜尋總是比較方便 XD。&lt;/p&gt;</summary><category term="ubuntu"></category></entry><entry><title>Mac OSX user original thumbnail location</title><link href="http://blog.carlcarl.me/1377/mac_osx_user_ogiginal_thumbnail_location/" rel="alternate"></link><updated>2013-10-24T18:57:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-10-24:1377/mac_osx_user_ogiginal_thumbnail_location/</id><summary type="html">&lt;p&gt;當初用攝影機照了一張當作頭像，不過後來一直找不到原圖的位置，google 了一下，發現很多人講的都不一樣，我是用 OSX 10.9 Mavericks，位置是在 &lt;code&gt;~/Library/Containers/com.apple.ImageKit.RecentPictureService/Data/Library/Images/Recent\ Pictures&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;參考資料&lt;br /&gt;
&lt;a href="http://apple.stackexchange.com/questions/44956/where-does-the-mac-store-account-pictures"&gt;Where does the Mac store account pictures?&lt;/a&gt;  &lt;/p&gt;</summary><category term="mac"></category></entry><entry><title>From wordpress to pelican</title><link href="http://blog.carlcarl.me/1376/from-wordpress-to-pelican/" rel="alternate"></link><updated>2013-10-24T02:18:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-10-24:1376/from-wordpress-to-pelican/</id><summary type="html">&lt;p&gt;終於從 &lt;a href="http://tw.wordpress.org"&gt;wordpress&lt;/a&gt; 轉到 &lt;a href="https://github.com/carlcarl/pelican/tree/support-post-id"&gt;pelican&lt;/a&gt; 了，中間經歷了不少的問題，之所以從 wordpress 離開到 pelican，主要是覺得 wordpress 本身其實綁了很多我不需要的功能，現在我只是想純粹做一些筆記而已，於是朝 static site generator 這方面去看，之前是有看過 &lt;a href="http://octopress.org"&gt;octopress&lt;/a&gt;，但是對 ruby 實在沒啥興趣，找了一下 python 寫的，發現其實也有蠻多種的，後來看 pelican 有蠻多人都有試過，而且開發也還蠻熱烈的，於是就選擇了這個 blog 系統。&lt;/p&gt;
&lt;p&gt;接下來就是想想該怎麼轉移，從 wordpress export 文章出來之後，pelican 提供了 &lt;code&gt;pelican-import&lt;/code&gt; 這個工具可以將 wordpress 文章匯入的功能，還蠻方便的，但是卻沒有支援 &lt;code&gt;post_id&lt;/code&gt; 這個文章屬性，於是我自己 &lt;a href="https://github.com/carlcarl/pelican/tree/support-post-id"&gt;fork&lt;/a&gt; 了出來，加上了這個功能，丟了一個 pull request 過去，只可惜作者好像不領情，內容大概是說我不應該這樣做，會變成要加一個屬性，就得加一個參數進去之類的，後來想想也沒錯，而且不一定每個人都需要這個 id，但是其實我覺得可以透過參數來加入自己要的 metadata，而且這些額外的 metadata 也可以考慮直接丟到一個 list，直接 loop scan就可以了，但是作者後來就沒理我了 orz。&lt;/p&gt;
&lt;p&gt;import 完之後就是惡夢的開始了，因為我中間轉了很多次 blog 平台，從 pixnet，wordpress(轉了幾次放的地方)，現在到 pelican，發現以前很多連結和圖片，還有一些 code snippet 都出問題，還有就是 code highlight 的 syntax 也不同，還有修補以前不愛用標點符號的文章，於是我每天花一點時間改個十多篇，過了幾個禮拜終於改完了 QQ。&lt;/p&gt;
&lt;p&gt;domain name......，決定改成 carlcarl.me！原本是 carlcarl.tw，後來覺得前者比較順眼，於是就決定換掉了，以後可能就要跟這個 carlcarl.tw 說再見了。&lt;/p&gt;
&lt;p&gt;接下來是選擇要把 blog 放哪裏，其實也想了很久，最後還是決定放在 github 上，放的方式很簡單，用 github page 的方式丟上去就可以了，另外再把 domain name 設定的部分用一用，前面再放個 cloudflare，就沒啥問題哩。&lt;/p&gt;
&lt;p&gt;下面是一些我找資料看到的網址，這些都可以參考看看：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.macdrifter.com/2012/08/pelican-guide-moving-from-wordpress-and-initial-setup.html"&gt;Pelican Guide - Moving From WordPress and Initial Setup&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://kevin.deldycke.com/2013/02/wordpress-to-pelican/"&gt;WordPress to Pelican&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://jamesmurty.com/2013/05/23/migrate-wordpress-blog-to-static-site/"&gt;How I Migrated my Wordpress Blog to a Static Site&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.macdrifter.com/2012/07/migrating-to-pelican-extracting-wordpress-data.html"&gt;Migrating to Pelican - Extracting WordPress Data&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://farseerfc.github.io/try-pelican.html"&gt;嘗試一下 Pelican&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://jsliang.com/blog/2013/02/moving-to-pelican-hosting-on-github-pages.html"&gt;網誌搬家！改用 Pelican + GitHub Pages&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://frantic1048.com/bo-ke-dan-sheng-ji-ji-yu-githubpelicanchuang-jian-bo-ke-de-zheng-ge-guo-cheng.html"&gt;博客诞生记:基于GitHub+Pelican创建博客的整个过程&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.getpelican.com/en/latest/settings.html"&gt;pelican settings&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.getpelican.com/en/3.3.0/importer.html"&gt;Import from other blog software&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;  &lt;/p&gt;</summary><category term="pelican"></category></entry><entry><title>tig broken in tmux</title><link href="http://blog.carlcarl.me/1375/tig-broken-in-tmux/" rel="alternate"></link><updated>2013-10-05T02:15:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-10-05:1375/tig-broken-in-tmux/</id><summary type="html">&lt;p&gt;這個問題已經困擾我滿久了，在 &lt;a href="http://tmux.sourceforge.net"&gt;tmux&lt;/a&gt; 裡用 &lt;a href="https://github.com/jonas/tig"&gt;tig&lt;/a&gt;
畫面會一直破碎，不過一直找不到原因，最近想到，於是又找看看有沒有解法，後來試了&lt;a href="https://wiki.archlinux.org/index.php/tmux"&gt;一篇&lt;/a&gt;裡面的做法就
OK 了 QQ。&lt;/p&gt;
&lt;p&gt;靈感是在查資料的時候看到有人是因為在 &lt;code&gt;tmux.conf&lt;/code&gt; 裡設定了
&lt;code&gt;default-terminal=xterm&lt;/code&gt; 想到的，中間有試了一下 screen，發現 tig 在
screen 中是 OK 的，&lt;code&gt;echo $TERM&lt;/code&gt; 得到的輸出是 &lt;code&gt;screen&lt;/code&gt;，而我在 tmux
下得到的輸出卻是 &lt;code&gt;xterm-256color&lt;/code&gt;，想說朝這個方向去找資料。這邊先找了
&lt;code&gt;tmux.conf&lt;/code&gt; 中，但是我並沒有設定這個東西，看了
&lt;code&gt;.zshrc&lt;/code&gt;，原來我是在這邊設定了
&lt;code&gt;export TERM=xterm-256color&lt;/code&gt;，於是我參看上面連結裡的內容在設定 &lt;code&gt;TERM&lt;/code&gt;
下面再加上了一行就 OK 了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$TMUX&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="screen"></category><category term="tig"></category><category term="tmux"></category></entry><entry><title>sphinx and github pages</title><link href="http://blog.carlcarl.me/1365/sphinx-and-github-pages/" rel="alternate"></link><updated>2013-10-04T21:26:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-10-04:1365/sphinx-and-github-pages/</id><summary type="html">&lt;p&gt;就之前產生的 sphinx document，接下來是如何 deploy 到 github page 上。&lt;/p&gt;
&lt;p&gt;這個文章是根據 &lt;a href="http://raxcloud.blogspot.tw/2013/02/documenting-python-code-using-sphinx.html"&gt;Documenting python code using sphinx and github&lt;/a&gt; 和
&lt;a href="http://datadesk.latimes.com/posts/2012/01/sphinx-on-github/"&gt;Sphinx documentation on GitHub&lt;/a&gt;
整理而成的，兩個地方的資料都不錯，不過都沒有很完美，所以就寫了這篇。&lt;/p&gt;
&lt;h2&gt;建立 github page repo&lt;/h2&gt;
&lt;p&gt;這邊看到大部分的做法都是直接在 project 根目錄下直接開另外一個
branch，不過我後來在上面連結看到一個不錯的做法，就是直接把 branch 建立在
subdirectory 下。首先先在 project 根目錄下建立一個 gh-pages 的資料夾：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著利用 &lt;code&gt;git-new-workdir&lt;/code&gt; 這個指令建立一個 subdirectory，這個指令一般在
&lt;code&gt;/usr/local/share/git-core/contrib/workdir/git-new-workdir&lt;/code&gt;，在 Mac
下需要另外用 &lt;code&gt;brew&lt;/code&gt; 裝 &lt;code&gt;git&lt;/code&gt;，位置會放在
&lt;code&gt;/usr/local/Cellar/git/1.8.4/share/git-core/contrib/workdir/git-new-workdir&lt;/code&gt;，&lt;code&gt;1.8.4&lt;/code&gt;
要換成你現在的 git 版本，至於 Xcode 本身雖然也有裝
git，但是我就找不到它的 &lt;code&gt;git-new-workdir&lt;/code&gt; 在哪了，然後可以自己建個 link
來用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ln -s /usr/local/Cellar/git/1.8.4/share/git-core/contrib/workdir/git-new-workdir /usr/local/bin/git-new-workdir
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後繼續下面的步驟：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git-new-workdir . gh-pages/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著進入資料夾並 checkout 一個新的 branch：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;gh-pages/html
git checkout --orphan gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將裡面的東西都清光光：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git rm -rf .
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;產生 sphinx document&lt;/h2&gt;
&lt;p&gt;回到 project 根目錄下的 doc 下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../../doc/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 Makefile：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;BUILDDIR&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; _build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;BUILDDIR&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; ../gh-pages/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣所有的輸出都會在 &lt;code&gt;gh-pages/html/&lt;/code&gt; 底下。但是這樣 sphinx 的 html
變成會在 &lt;code&gt;gh-pages/html/&lt;/code&gt; 底下再建一個 &lt;code&gt;html&lt;/code&gt; 資料夾，所以 Makefile
還有一個地方要改：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;$(&lt;/span&gt;SPHINXBUILD&lt;span class="k"&gt;)&lt;/span&gt; -b html &lt;span class="k"&gt;$(&lt;/span&gt;ALLSPHINXOPTS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;BUILDDIR&lt;span class="k"&gt;)&lt;/span&gt;/html
@echo
@echo &lt;span class="s2"&gt;&amp;quot;Build finished. The HTML pages are in $(BUILDDIR)/html.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;$(&lt;/span&gt;SPHINXBUILD&lt;span class="k"&gt;)&lt;/span&gt; -b html &lt;span class="k"&gt;$(&lt;/span&gt;ALLSPHINXOPTS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;BUILDDIR&lt;span class="k"&gt;)&lt;/span&gt;
@echo
@echo &lt;span class="s2"&gt;&amp;quot;Build finished. The HTML pages are in $(BUILDDIR).&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣它就會把 html 的部分直接輸出到 &lt;code&gt;gh-pages/html/&lt;/code&gt; 底下，接著輸入
&lt;code&gt;Make html&lt;/code&gt; 產生網頁。&lt;/p&gt;
&lt;h2&gt;github page push&lt;/h2&gt;
&lt;p&gt;先移到 gh-pages/html 下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../gh-pages/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊還有一個地方要注意，那就是 github 預設的 site 架構 (Jekyll)，會忽略
&lt;code&gt;_&lt;/code&gt; 開頭的資料夾，所以要用個檔案來告訴 github 不要用這種架構：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;touch .nojekyll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著加入所有檔案到 git 中， commit 並 push 上去就完成了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;First commit&amp;quot;&lt;/span&gt;
git push -u origin gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/blog/572-bypassing-jekyll-on-github-pages"&gt;Bypassing Jekyll on GitHub Pages&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://nuclearsquid.com/writings/git-new-workdir/"&gt;git-new-workdir&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://subtech.g.hatena.ne.jp/secondlife/20121207/1354854068"&gt;git-new-workdir が便利&lt;/a&gt;&lt;/p&gt;</summary><category term="github"></category><category term="sphinx"></category></entry><entry><title>Python Sphinx simple example</title><link href="http://blog.carlcarl.me/1331/python-sphinx-simple-example/" rel="alternate"></link><updated>2013-10-02T02:32:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-10-02:1331/python-sphinx-simple-example/</id><summary type="html">&lt;p&gt;查了很多資料，遇到一堆鬼打牆問題，終於弄成我要的樣子了，不過其實也沒有加多少東西，只是基本的設定一直搞不定
orz。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面是一開始的 project 結構，接著會利用 &lt;code&gt;sphinx&lt;/code&gt; 在根目錄下建立 &lt;code&gt;doc&lt;/code&gt;
這個目錄：&lt;/p&gt;
&lt;h2&gt;Project 目錄架構&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── CHANGES.txt
├── MANIFEST.in
├── README.rst
├── test
│   ├── __init__.py
│   └── test.py
├── requirements.txt
└── setup.py
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;安裝並產生設定&lt;/h2&gt;
&lt;p&gt;首先先安裝 &lt;code&gt;sphinx&lt;/code&gt;(ex: &lt;code&gt;pip install sphinx&lt;/code&gt;)，接著在 project
根目錄下輸入 &lt;code&gt;sphinx-quickstart&lt;/code&gt;，設定步驟如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Welcome to the Sphinx 1.1.3 quickstart utility.

Please enter values for the following settings (just press Enter to
accept a default value, if one is given in brackets).

Enter the root path for documentation.
&amp;gt; Root path for the documentation [.]: doc

You have two options for placing the build directory for Sphinx output.
Either, you use a directory &amp;quot;_build&amp;quot; within the root path, or you separate
&amp;quot;source&amp;quot; and &amp;quot;build&amp;quot; directories within the root path.
&amp;gt; Separate source and build directories (y/N) [n]:

Inside the root directory, two more directories will be created; &amp;quot;_templates&amp;quot;
for custom HTML templates and &amp;quot;_static&amp;quot; for custom stylesheets and other static
files. You can enter another prefix (such as &amp;quot;.&amp;quot;) to replace the underscore.
&amp;gt; Name prefix for templates and static dir [_]:

The project name will occur in several places in the built documentation.
&amp;gt; Project name: test
&amp;gt; Author name(s): carlcarl

Sphinx has the notion of a &amp;quot;version&amp;quot; and a &amp;quot;release&amp;quot; for the
software. Each version can have multiple releases. For example, for
Python the version is something like 2.5 or 3.0, while the release is
something like 2.5.1 or 3.0a1.  If you don&amp;#39;t need this dual structure,
just set both to the same value.
&amp;gt; Project version: 0.0.1
&amp;gt; Project release [0.0.1]:

The file name suffix for source files. Commonly, this is either &amp;quot;.txt&amp;quot;
or &amp;quot;.rst&amp;quot;.  Only files with this suffix are considered documents.
&amp;gt; Source file suffix [.rst]:

One document is special in that it is considered the top node of the
&amp;quot;contents tree&amp;quot;, that is, it is the root of the hierarchical structure
of the documents. Normally, this is &amp;quot;index&amp;quot;, but if your &amp;quot;index&amp;quot;
document is a custom template, you can also set this to another filename.
&amp;gt; Name of your master document (without suffix) [index]:

Sphinx can also add configuration for epub output:
&amp;gt; Do you want to use the epub builder (y/N) [n]:

Please indicate if you want to use one of the following Sphinx extensions:
&amp;gt; autodoc: automatically insert docstrings from modules (y/N) [n]: y
&amp;gt; doctest: automatically test code snippets in doctest blocks (y/N) [n]:
&amp;gt; intersphinx: link between Sphinx documentation of different projects (y/N) [n]:
&amp;gt; todo: write &amp;quot;todo&amp;quot; entries that can be shown or hidden on build (y/N) [n]:
&amp;gt; coverage: checks for documentation coverage (y/N) [n]:
&amp;gt; pngmath: include math, rendered as PNG images (y/N) [n]:
&amp;gt; mathjax: include math, rendered in the browser by MathJax (y/N) [n]:
&amp;gt; ifconfig: conditional inclusion of content based on config values (y/N) [n]:
&amp;gt; viewcode: include links to the source code of documented Python objects (y/N) [n]:

A Makefile and a Windows command file can be generated for you so that you
only have to run e.g. `make html&amp;#39; instead of invoking sphinx-build
directly.
&amp;gt; Create Makefile? (Y/n) [y]:
&amp;gt; Create Windows command file? (Y/n) [y]: n

Creating file doc/conf.py.
Creating file doc/index.rst.
Creating file doc/Makefile.

Finished: An initial directory structure has been created.

You should now populate your master file doc/index.rst and create other documentation
source files. Use the Makefile to build the docs, like so:
   make builder
where &amp;quot;builder&amp;quot; is one of the supported builders, e.g. html, latex or linkcheck.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比較要注意的是一開始的路徑輸入 &lt;code&gt;doc&lt;/code&gt; 表示要在當前目錄的 &lt;code&gt;doc&lt;/code&gt;
底下建立文件。 &lt;code&gt;autodoc&lt;/code&gt; 這個記得選 &lt;code&gt;y&lt;/code&gt;。因為不是用 Windows，所以
&lt;code&gt;Windows command file&lt;/code&gt; 這個選項我就選 &lt;code&gt;n&lt;/code&gt; 了。輸入完後會建立 &lt;code&gt;doc&lt;/code&gt;
這個目錄。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;產生 API 設定文件&lt;/h2&gt;
&lt;p&gt;在 project 根目錄下輸入：&lt;code&gt;sphinx-apidoc -o doc/api test&lt;/code&gt;，會將 API
設定文件放到 &lt;code&gt;doc/api&lt;/code&gt; 底下。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;修改設定檔&lt;/h2&gt;
&lt;p&gt;接著進入 &lt;code&gt;doc&lt;/code&gt; 這個目錄 (&lt;code&gt;cd doc&lt;/code&gt;)，修改 &lt;code&gt;index.rst&lt;/code&gt; 以及 &lt;code&gt;conf.py&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;conf.py&lt;/h3&gt;
&lt;p&gt;首先是 &lt;code&gt;conf.py&lt;/code&gt;。在 &lt;code&gt;import sys, os&lt;/code&gt; 下面加上
&lt;code&gt;sys.path.insert(0, os.path.abspath('..'))&lt;/code&gt; 即可，這邊是將 project 的
path 加入 &lt;code&gt;sys.path&lt;/code&gt; 當中，不然 sphinx 會找不到。&lt;/p&gt;
&lt;h3&gt;index.rst&lt;/h3&gt;
&lt;p&gt;這邊是我整個設定檔：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;.. test documentation master file, created by&lt;/span&gt;
&lt;span class="cp"&gt;   sphinx-quickstart on Wed Oct  2 00:41:51 2013.&lt;/span&gt;
&lt;span class="cp"&gt;   You can adapt this file completely to your liking, but it should at least&lt;/span&gt;
&lt;span class="cp"&gt;   contain the root `toctree` directive.&lt;/span&gt;

&lt;span class="gh"&gt;Welcome to test&amp;#39;s documentation!&lt;/span&gt;
&lt;span class="gh"&gt;======================================&lt;/span&gt;

&lt;span class="na"&gt;:doc:&lt;/span&gt;&lt;span class="nv"&gt;`API Documentation &amp;lt;api/test&amp;gt;`&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; ../README.rst


&lt;span class="gh"&gt;Indices and tables&lt;/span&gt;
&lt;span class="gh"&gt;==================&lt;/span&gt;

&lt;span class="m"&gt;*&lt;/span&gt; &lt;span class="na"&gt;:ref:&lt;/span&gt;&lt;span class="nv"&gt;`genindex`&lt;/span&gt;
&lt;span class="m"&gt;*&lt;/span&gt; &lt;span class="na"&gt;:ref:&lt;/span&gt;&lt;span class="nv"&gt;`modindex`&lt;/span&gt;
&lt;span class="m"&gt;*&lt;/span&gt; &lt;span class="na"&gt;:ref:&lt;/span&gt;&lt;span class="nv"&gt;`search`&lt;/span&gt;

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;toctree&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
   &lt;span class="nc"&gt;:hidden:&lt;/span&gt;

   api/modules
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;API Documentation&lt;/code&gt; 這段是程式的 API 連結。如果在 project 根目錄有
&lt;code&gt;README.rst&lt;/code&gt; 的話，可以如上面這樣 include 進來。最下面的 &lt;code&gt;toctree&lt;/code&gt; 到
&lt;code&gt;api/modules&lt;/code&gt; 這段是因為 &lt;code&gt;sphinx-apidoc&lt;/code&gt; 會產生一個 &lt;code&gt;modules.rst&lt;/code&gt;
檔案，如果沒加到 &lt;code&gt;toctree&lt;/code&gt; 會有警告，這邊就把它加進來，然後設隱藏，至於
&lt;code&gt;toctree&lt;/code&gt; 是啥，可以參考 &lt;a href="http://sphinx-doc.org/concepts.html"&gt;這個連結&lt;/a&gt;，算是一個目錄架構這樣。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;產生 html&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;doc&lt;/code&gt; 底下輸入 &lt;code&gt;make html&lt;/code&gt;，產生的 html 會放在 &lt;code&gt;_build/html&lt;/code&gt;
下，到這裡就算大功告成了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;其他遇到的問題&lt;/h2&gt;
&lt;h3&gt;為啥不在 rst 檔案中加入 automodule 的設定，而是用 &lt;code&gt;sphinx-apidoc&lt;/code&gt; 產生 API 文件？&lt;/h3&gt;
&lt;p&gt;因為 automodule 做不到 recursive 尋找 submodule。相關討論連結如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4616693/automatically-generating-documentation-for-all-python-package-contents"&gt;Automatically Generating Documentation for All Python Package Contents&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/2701998/sphinx-autodoc-is-not-automatic-enough"&gt;Sphinx autodoc is not automatic enough&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/11508290/sphinx-using-automodule-to-find-submodules"&gt;Sphinx, using automodule to find submodules&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;sphinx-build option -b not recognized&lt;/h3&gt;
&lt;p&gt;這個錯誤的直接原因是因為 module 裡面有用 &lt;code&gt;argparse&lt;/code&gt; 這類的 module，然後
&lt;code&gt;sphinx-build&lt;/code&gt; 執行時有 &lt;code&gt;-b&lt;/code&gt; 這個參數，傳進去之後就炸了。但是一般來說
module 裡用 &lt;code&gt;argparse&lt;/code&gt;，本身不是個問題，問題是 sphinx
為啥執行了這段程式，有幾個可能的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;module 裡沒用 &lt;code&gt;if __name__ == '__main__':&lt;/code&gt; 這段，而是直接執行。&lt;/li&gt;
&lt;li&gt;sphix-apidoc 讀取的目錄裡包含 &lt;code&gt;setup.py&lt;/code&gt;，即使 module
    裡有用上面的判斷包起來，還是會全執行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我一開始才會用 &lt;code&gt;sphinx-apidoc -o doc/api test&lt;/code&gt; 而不是
&lt;code&gt;sphinx-apidoc -o doc/api .&lt;/code&gt;，就是要避開
&lt;code&gt;setup.py&lt;/code&gt;。下面是找到的相關連結：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/6912025/is-optionparser-in-conflict-with-sphinx"&gt;Is OptionParser in conflict with sphinx?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/14769962/how-should-i-solve-the-conflict-of-optionparser-and-sphinx-build-in-a-large-proj"&gt;How should I solve the conflict of OptionParser and sphinx-build in a large project?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.mail-archive./om/sphinx-dev@googlegroups.com/msg05521.html"&gt;Re: sphinx-dev option -b not recognized?&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;WARNING: document isn't included in any toctree&lt;/h3&gt;
&lt;p&gt;參閱 &lt;a href="http://stackoverflow.com/questions/1690757/location-of-sphinx-sources-for-my-notes"&gt;Location of Sphinx sources for my notes&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://raxcloud.blogspot.tw/2013/02/documenting-python-code-using-sphinx.html"&gt;Documenting python code using sphinx and github&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/10324393/sphinx-build-fail-autodoc-cant-import-find-module"&gt;sphinx-build fail - autodoc can't import/find module&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://scienceoss.com/minimal-sphinx-setup-for-autodocumenting-python-modules/"&gt;http://scienceoss.com/minimal-sphinx-setup-for-autodocumenting-python-modules/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://api.mongodb.org/python/current/"&gt;Example: PyMongo documentation&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="sphinx"></category></entry><entry><title>Python multiprocessing share counter</title><link href="http://blog.carlcarl.me/1315/python-multiprocessing-share-counter/" rel="alternate"></link><updated>2013-09-19T00:09:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-09-19:1315/python-multiprocessing-share-counter/</id><summary type="html">&lt;p&gt;找了一下，以下是基本的寫法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;countdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;counter_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;counter_lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
    &lt;span class="n"&gt;data_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;initializer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;initargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊在找資料的時候發現一個問題，那就是 &lt;code&gt;counter.value&lt;/code&gt;
在做運算的時候需不需要 lock？&lt;br /&gt;
於是我看了一下 source code，&lt;code&gt;multiprocessing.Value&lt;/code&gt; 等於
&lt;code&gt;multiprocessing.sharedctypes.Value&lt;/code&gt;，下面是它的定義：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typecode_or_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Return a synchronization wrapper for a Value&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;unrecognized keyword argument(s): &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RawValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typecode_or_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;acquire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; has no method &amp;#39;acquire&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;synchronized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在沒有指定 lock 的情況下，會設 &lt;code&gt;None&lt;/code&gt;，在是 &lt;code&gt;None&lt;/code&gt; 的情況下會自動 assign
一個 &lt;code&gt;RLock&lt;/code&gt;，&lt;code&gt;RLock&lt;/code&gt; 是啥可以參考&lt;a href="http://blog.csdn.net/JGood/article/details/4305604"&gt;這邊&lt;/a&gt;，總之也是 lock
的一種，那這邊這個 &lt;code&gt;lock&lt;/code&gt; 會不會用到呢？再繼續看 &lt;code&gt;synchronized&lt;/code&gt;
這個定義：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;synchronized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SynchronizedBase&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;object already synchronized&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_SimpleCData&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Synchronized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_type_&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ctypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_char&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SynchronizedString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SynchronizedArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;scls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fields_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;make_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;classname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Synchronized&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;
            &lt;span class="n"&gt;scls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SynchronizedBase&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;scls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊由於我當初指定是 &lt;code&gt;multiprocessing.Value('i', len(data_list))&lt;/code&gt;，&lt;code&gt;'i'&lt;/code&gt;
表示是 integer type，等於 &lt;code&gt;c_int&lt;/code&gt;，而 &lt;code&gt;c_int&lt;/code&gt;這個 class 本身是繼承
&lt;code&gt;_SimpleCData&lt;/code&gt;，所以在上面的判斷式會走第一個 &lt;code&gt;if&lt;/code&gt;，並 return
&lt;code&gt;Synchronized(obj, lock)&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Synchronized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SynchronizedBase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Synchronized&lt;/code&gt; 這邊繼承 &lt;code&gt;SynchronizedBase&lt;/code&gt;，不過重點是接下來的
value，這邊的 &lt;code&gt;make_property&lt;/code&gt; 是另外寫的，定義如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;prop_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
        &lt;span class="n"&gt;prop_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;def get&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;(self):&lt;/span&gt;
&lt;span class="s"&gt;    self.acquire()&lt;/span&gt;
&lt;span class="s"&gt;    try:&lt;/span&gt;
&lt;span class="s"&gt;        return self._obj.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    finally:&lt;/span&gt;
&lt;span class="s"&gt;        self.release()&lt;/span&gt;
&lt;span class="s"&gt;def set&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;(self, value):&lt;/span&gt;
&lt;span class="s"&gt;    self.acquire()&lt;/span&gt;
&lt;span class="s"&gt;    try:&lt;/span&gt;
&lt;span class="s"&gt;        self._obj.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; = value&lt;/span&gt;
&lt;span class="s"&gt;    finally:&lt;/span&gt;
&lt;span class="s"&gt;        self.release()&lt;/span&gt;
&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; = property(get&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;, set&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;還滿有趣的寫法，可以看到針對 &lt;code&gt;value&lt;/code&gt; 這個變數提供了對應的 get 和 set
method，&lt;code&gt;self.acquire()&lt;/code&gt; 和 &lt;code&gt;self.release()&lt;/code&gt; 分別是要求和釋放
lock，這邊可以再看一下 &lt;code&gt;SynchronizedBase&lt;/code&gt; 的定義：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SynchronizedBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__reduce__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;assert_spawning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;synchronized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_obj&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lock&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; wrapper for &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊的 &lt;code&gt;self.acquire&lt;/code&gt; 和 &lt;code&gt;self.release&lt;/code&gt; 其實就會分別呼叫 &lt;code&gt;_lock&lt;/code&gt; 裡的
&lt;code&gt;acquire&lt;/code&gt; 和 &lt;code&gt;release&lt;/code&gt; method。&lt;/p&gt;
&lt;p&gt;所以不需要再自己 lock 囉？......No,
還是需要(炸)。上面只有在單獨取值或寫值的時候才有 lock，但是如果是取值和寫值這兩個動作要放在一起做的話就需要自己再用一個 lock 包起來，以上面的程式來排一個流程，如 A process 和 B process
分別對 &lt;code&gt;counter.value&lt;/code&gt; 做遞增 (&lt;code&gt;counter.value += 1&lt;/code&gt;)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c"&gt;# 暫存值 11, A process&lt;/span&gt;
&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c"&gt;# 暫存值 11, B process&lt;/span&gt;
&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="c"&gt;# A process&lt;/span&gt;
&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="c"&gt;# B process&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;依然會得到錯誤的結果~~。所以需要用如以下的做法才行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;counter_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;counter_lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/1233222/"&gt;Python multiprocessing easy way to implement a simple counter?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/1233222/python-multiprocessing-easy-way-to-implement-a-simple-counter"&gt;Python multiprocessing and a shared counter&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.python.org/2/library/multiprocessing.html#multiprocessing.sharedctypes.synchronized"&gt;multiprocessing.sharedctypes.synchronized&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://eli.thegreenplace.net/2012/01/04/shared-counter-with-pythons-multiprocessing/"&gt;Shared counter with Python’s multiprocessing&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/8276933/python-multiprocessing-lock-issue"&gt;python multiprocessing lock issue&lt;/a&gt;&lt;/p&gt;</summary><category term="multiprocessing"></category></entry><entry><title>brunch watch stylesheet dependency</title><link href="http://blog.carlcarl.me/1302/brunch-watch-stylesheet-dependency/" rel="alternate"></link><updated>2013-09-09T02:10:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-09-09:1302/brunch-watch-stylesheet-dependency/</id><summary type="html">&lt;p&gt;之前在改網站的 style，明明套用了 brunch，但是修改後，卻沒辦法自動產生
build 好的 css，這個問題一直困擾我很久，每次都要重新跑一次
&lt;code&gt;brunch watch --server&lt;/code&gt; 實在是很不爽，今天晚上剛好有一點時間就來修了。&lt;/p&gt;
&lt;p&gt;網站是用 &lt;code&gt;less&lt;/code&gt;，然後有一個主要的 less 檔來 &lt;code&gt;@import&lt;/code&gt; 其他在 &lt;code&gt;less&lt;/code&gt;
資料夾底下的 .less 檔，目錄架構大概像底下這樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;├── less
│   ├── archives.less
│   ├── index.less
└── less_proxy.less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後 &lt;code&gt;config.ls&lt;/code&gt; (這邊是用 livescript) 裡對應的設定部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;stylesheets:&lt;/span&gt;
  &lt;span class="nv"&gt;joinTo:&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;css/app.css&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/^app\/styles\/\w+\.less/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(這邊在 watch 的時候只監看 &lt;code&gt;less_proxy.less&lt;/code&gt; 有沒有變動再做 join，所以改
&lt;code&gt;less&lt;/code&gt; 底下的檔案並不會有反應)&lt;/p&gt;
&lt;p&gt;下面就直接給解法了，首先把 &lt;code&gt;less&lt;/code&gt; 資料夾改名為 &lt;code&gt;_less&lt;/code&gt;，接著在
&lt;code&gt;config.ls&lt;/code&gt;，加上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;conventions:&lt;/span&gt;
    &lt;span class="nv"&gt;ignored: &lt;/span&gt;&lt;span class="sr"&gt;/^app\/styles\/_less/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這個設定會將 &lt;code&gt;_less&lt;/code&gt; 底下的檔案都加入 watch，但是不會再額外
compile。這邊要注意的是資料夾必須是 &lt;code&gt;_&lt;/code&gt; 開頭的，不然還是不行。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="https://github.com/brunch/brunch/issues/681"&gt;Stylesheet dependency compilation/watching&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/brunch/brunch/blob/stable/docs/config.md"&gt;brunch config doc&lt;/a&gt;&lt;/p&gt;</summary><category term="brunch"></category></entry><entry><title>g0v.tw sns buttons</title><link href="http://blog.carlcarl.me/1292/g0v-tw-sns-buttons/" rel="alternate"></link><updated>2013-08-28T01:40:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-08-28:1292/g0v-tw-sns-buttons/</id><summary type="html">&lt;p&gt;修了一下 render 的問題，以結果來看其實並沒有完全做好，還是會有 render
過程中偏移的問題
orz，不過也比原來的情況好多了(汗)，之後功力如果好一點再來深入研究吧 =
=+。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/g0v/g0v.tw/commit/93777efbd4941f3ba74bb0380ffb65c4d4330f13"&gt;commit diff&lt;/a&gt;&lt;br /&gt;
主要修正幾個地方：&lt;/p&gt;
&lt;h3&gt;fb button size&lt;/h3&gt;
&lt;p&gt;fb button 基本上最大就 60px 的樣子，原本設了
500px，導致一開始預留的空間過大，整個會往左邊撐開，render
完後又變一個小按鈕，所以整個看起來很囧，解決方法就是不去限制大小，反正按鈕最大也就那樣而已。&lt;/p&gt;
&lt;h3&gt;sns buttons 放大&lt;/h3&gt;
&lt;p&gt;原本的方法是直接把 button 用 css 加上 &lt;code&gt;transform&lt;/code&gt; + &lt;code&gt;scale&lt;/code&gt;
放大，不過如果有多個 button 的話，這樣兩者之間的 margin
會很難去設定，因為 margin
是放大之前的距離，放大之後從螢幕上來看，距離會因為 button
的放大而縮小，後來想到乾脆把包 sns buttons 的 block
整個放大好了，雖然這樣幾個按鈕的大小會不一樣，不過還算是可以接受，間隔距離也比較可以掌握。&lt;/p&gt;
&lt;h3&gt;sns buttons 底線對齊&lt;/h3&gt;
&lt;p&gt;有想過用 translate 手動對齊底線，不過想想這樣太智障了。後來則是用
&lt;code&gt;table-cell&lt;/code&gt; + &lt;code&gt;inline-block&lt;/code&gt; + &lt;code&gt;vertical-align: bottom&lt;/code&gt;
來做對齊。這邊後來也把 &lt;code&gt;width&lt;/code&gt; 和 &lt;code&gt;height&lt;/code&gt; 拿掉，&lt;code&gt;width&lt;/code&gt;
設定會因為放大的關係，導致 button
會出現在左邊，所以乾脆就不設定，讓內容的部分自己把 block
撐開就好，&lt;code&gt;height&lt;/code&gt; 則是會放大到超過
banner，而這邊其實也不需要特別去設定高度，所以就跟著拿掉了。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://wordpress.org/plugins/only-tweet-like-share-and-google-1/"&gt;Tweet, Like, Google +1 and Share&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/6116423/how-to-vertically-align-floating-divs-to-the-bottom"&gt;How to vertically align floating divs to the bottom?&lt;/a&gt;&lt;/p&gt;</summary><category term="g0v"></category><category term="css"></category></entry><entry><title>Chrome tab key accessibility bug</title><link href="http://blog.carlcarl.me/1277/chrome-tab-key-accessibility-bug/" rel="alternate"></link><updated>2013-08-22T00:58:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-08-22:1277/chrome-tab-key-accessibility-bug/</id><summary type="html">&lt;p&gt;簡單說就是在 link 內容如果是 float 的情況下，這個 link 沒辦法在按 tab
鍵的時候得到 focus。Google 了一下，好像是 &lt;a href="https://bugs.webkit.org/show_bug.cgi?id=51333"&gt;Webkit 的
bug&lt;/a&gt;，不過好像沒有打算要修的樣子(汗)。&lt;br /&gt;
Link 如果在下面的情況是 OK 的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是如果加了 &lt;code&gt;float&lt;/code&gt; 後就會出問題：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;float:left;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我的解決方法很簡單，就是乾脆把 &lt;code&gt;float&lt;/code&gt; 移到外面的 element
上(炸)。目前看來是沒問題，Firefox 下測試也 OK，所以應該就先這樣~。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
[Webkit removes links containing only floated elements from the tab
order][]&lt;/p&gt;
&lt;p&gt;[Webkit removes links containing only floated elements from the tab
  order]: http://www.heresonesolution.com/2010/12/google-chrome-float-tab-order/&lt;/p&gt;</summary><category term="chrome"></category><category term="g0v"></category><category term="css"></category></entry><entry><title>C define debug function</title><link href="http://blog.carlcarl.me/1267/c-define-debug-function/" rel="alternate"></link><updated>2013-08-13T15:50:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-08-13:1267/c-define-debug-function/</id><summary type="html">&lt;p&gt;參考&lt;a href="http://www.makelinux.net/ldd3/chp-4-sect-2"&gt;這篇&lt;/a&gt;，然後做了點修改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#undef CM_DBG
#ifdef LTE_CM_DEBUG
#   define CM_DBG(fmt, args...) do{   
    printf(&amp;quot;  (%d/%s): &amp;quot;fmt, __LINE__, __FILE__, ## args);   
}while(0)
#else
#   define CM_DBG(fmt, args...)
#endif

#undef CM_DBGG
#define CM_DBGG(fmt, args...) do{   
    printf(&amp;quot;  (%d/%s): &amp;quot;fmt, __LINE__, __FILE__, ## args);   
}while(0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大致除了命名外還做了點修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 &lt;code&gt;printk&lt;/code&gt; 的部分拿掉，因為我不需要。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CM_DBGG&lt;/code&gt; 改成跟原本功能一樣。這樣有個好處就是我可以先 disable
    所有的 debug function，然後將要看的 &lt;code&gt;CM_DBG&lt;/code&gt; 後面加個
    &lt;code&gt;G&lt;/code&gt;，就可以只顯示需要注意的部分。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至於 Makefile 的部分有個折衷的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# DEBUG&lt;/span&gt;
&lt;span class="nv"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; y
&lt;span class="cp"&gt;ifeq ($(DEBUG),y)&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -DLTE_CM_DEBUG
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;CFLAGS += -DLTE_CM_DEBUG&lt;/span&gt;
&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣可以透過修改 &lt;code&gt;DEBUG&lt;/code&gt; 的值，來決定是否要開啟 debug
function，例如在開發時就可以先開啟，等到要 production 的時候再設定
&lt;code&gt;DEBUG = n&lt;/code&gt;，另外也可以用 &lt;code&gt;make debug&lt;/code&gt; 來直接開啓
debug，執行上會更簡單。&lt;/p&gt;</summary><category term="debug"></category><category term="makefile"></category></entry><entry><title>Javascript parseInt and Number</title><link href="http://blog.carlcarl.me/1262/javascript-parseint-and-number/" rel="alternate"></link><updated>2013-08-07T15:31:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-08-07:1262/javascript-parseint-and-number/</id><summary type="html">&lt;p&gt;這個是查資料時看到的 benchmark &lt;a href="http://jsperf.com/performance-of-parseint"&gt;performance of parseInt()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;簡單歸納幾點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;parseInt&lt;/code&gt; 基本上幾乎是比 &lt;code&gt;Number&lt;/code&gt;
    還要快的，兩者雖然用法有點不同，不過純粹做轉換的話，&lt;code&gt;parseInt&lt;/code&gt;
    會比較快。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parseInt('4')&lt;/code&gt; 跟 &lt;code&gt;parseInt('4', 10)&lt;/code&gt;
    在不同瀏覽器的效能也不一樣。不過直覺來看，感覺應該是 &lt;code&gt;parseInt('4')&lt;/code&gt;
    會比較快說，因為不需要驗證參數。就個人來說，還是直接 &lt;code&gt;parseInt('4')&lt;/code&gt;
    就好。&lt;/li&gt;
&lt;li&gt;new 會帶來多的 overhead，所以 new Number 又比 Number 慢。&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Number"></category><category term="parseInt"></category></entry><entry><title>Python functools.wraps note</title><link href="http://blog.carlcarl.me/1249/python-functools-wraps-note/" rel="alternate"></link><updated>2013-08-06T15:38:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-08-06:1249/python-functools-wraps-note/</id><summary type="html">&lt;p&gt;研究一下 &lt;code&gt;functools.wraps&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# @wraps(f)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# print `test`&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@deco&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# print `hello`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 &lt;code&gt;hello&lt;/code&gt; 裡 print 出
'test'，這個沒什麼問題，但是在宣告完後，如果想確認 &lt;code&gt;test&lt;/code&gt; 的 &lt;code&gt;__name__&lt;/code&gt;
attribute，會發現 print 出的是 'hello'，這是因為 &lt;code&gt;test&lt;/code&gt; 在被 decorate
後，其實已經變成 &lt;code&gt;hello&lt;/code&gt;，真正的 &lt;code&gt;test&lt;/code&gt; 則被包在 &lt;code&gt;hello&lt;/code&gt; 裡執行。如果把
&lt;code&gt;@wraps&lt;/code&gt; 前的註解拿掉，就會發現最後 print 出來的會變回原來的
'test'，因為 &lt;code&gt;wraps&lt;/code&gt; 這個 decorator 會將一些原本 function 的 attribute
複製到外面的 function 上，可以看一下內部實作。&lt;/p&gt;
&lt;h3&gt;實作&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;WRAPPER_ASSIGNMENTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;WRAPPER_UPDATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;assigned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WRAPPER_ASSIGNMENTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WRAPPER_UPDATES&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assigned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{}))&lt;/span&gt;
    &lt;span class="c"&gt;# Return the wrapper so this can be used as a decorator via partial()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;assigned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WRAPPER_ASSIGNMENTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WRAPPER_UPDATES&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;assigned&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;assigned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先先看 &lt;code&gt;wraps&lt;/code&gt; 這個 function，參數中 &lt;code&gt;wrapped&lt;/code&gt; 是參數傳進來的
function，&lt;code&gt;assigned&lt;/code&gt; 是要複製的 attribute，&lt;code&gt;updated&lt;/code&gt; 是要更新的
attribute， 這邊可以看到是直接呼叫 &lt;code&gt;partial&lt;/code&gt;，至於這個 function
的用法可以參考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.au92.com/archives/how-to-use-functools-partial-in-python.html"&gt;python的functools.partial用法解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.blackwhite.tw/2013/02/python-functoolspartial.html"&gt;python 的 functools.partial 函數&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡單說就是像把 &lt;code&gt;wrapped&lt;/code&gt;, &lt;code&gt;assigned&lt;/code&gt;, &lt;code&gt;updated&lt;/code&gt; 丟進 &lt;code&gt;update_wrapper&lt;/code&gt;
的參數裡，並 return 一個新 function，接著只要把還沒填的參數丟進這個新的
function 就可以了。因為是 decorator 的用法，所以 &lt;code&gt;parital&lt;/code&gt; 產生的
function 在 return 時會被執行，接著跑到 &lt;code&gt;update_wrapper&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;update_wrapper&lt;/code&gt; 這邊多了個 &lt;code&gt;wrapper&lt;/code&gt; 參數，也就是被 &lt;code&gt;@wraps&lt;/code&gt; 裝飾 的
function，以最上面的例子來看，就是 &lt;code&gt;hello&lt;/code&gt; function
。這邊可以順便注意一下傳進 decorator function
參數的順序，首先會先傳進來的是 decorator function 的參數(剛才的
&lt;code&gt;wrapped&lt;/code&gt;)，再來是被 decorate 的 function 本身(&lt;code&gt;wrapper&lt;/code&gt;)，再來則是被
decorate 的 function 的參數這樣(這邊沒有使用)。&lt;/p&gt;
&lt;p&gt;接著 &lt;code&gt;update_wrapper&lt;/code&gt; 會將 &lt;code&gt;wrapped&lt;/code&gt; 裡的 &lt;code&gt;__module__&lt;/code&gt;, &lt;code&gt;__name__&lt;/code&gt;,
&lt;code&gt;__doc__&lt;/code&gt; 複製到 &lt;code&gt;wrapper&lt;/code&gt; 上，並將 &lt;code&gt;__dict__&lt;/code&gt;
也更新過去，大致就完成了~~。&lt;/p&gt;
&lt;p&gt;這邊好奇為啥 &lt;code&gt;__dict__&lt;/code&gt; 也要複製過去，應該說 function 為啥要有
&lt;code&gt;__dict__&lt;/code&gt;，搜尋了一下，看到 &lt;a href="http://stackoverflow.com/questions/7439023/why-do-python-functions-have-a-dict"&gt;stackoverflow
上也有人問&lt;/a&gt;，在答案的連結裡可以看到一些用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;...&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;unittest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;testframework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/308999/what-does-functools-wraps-do"&gt;What does functools.wraps do?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://artemrudenko.wordpress.com/2013/04/15/python-why-you-need-to-use-wraps-with-decorators/"&gt;Python: Why to use @wraps with decorators?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/15357776/what-is-the-difference-between-functools-wraps-and-update-wrapper"&gt;what is the difference between functools.wraps and update_wrapper&lt;/a&gt;&lt;/p&gt;</summary><category term="wraps"></category></entry><entry><title>Python fibonacci number</title><link href="http://blog.carlcarl.me/1240/python-fibonacci-number/" rel="alternate"></link><updated>2013-08-04T02:35:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-08-04:1240/python-fibonacci-number/</id><summary type="html">&lt;p&gt;在 Python Taiwan 社團看到的寫法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt; 分別對應 &lt;code&gt;10&lt;/code&gt; 和 &lt;code&gt;[1,1]&lt;/code&gt; 這兩個參數，&lt;code&gt;10&lt;/code&gt; 表示要 fibonacci
的第十個項數，&lt;code&gt;[1,1]&lt;/code&gt; 是第一項和第二項的值。然後是一個 loop 將 &lt;code&gt;p&lt;/code&gt;
陣列中最後兩個值加起來再 append 進 &lt;code&gt;p&lt;/code&gt;，比較妙的是，因為這邊 loop append
完之後，整個會是一個
list，但是因為這邊只要最後一個值，而且又要忽略掉前面這個
list，於是用了 &lt;code&gt;and False&lt;/code&gt; 將整個值算成 &lt;code&gt;False&lt;/code&gt;，接著又由於
&lt;code&gt;False&lt;/code&gt; 與 &lt;code&gt;or&lt;/code&gt; 放在一起，所以會再進一步取後面的值，也就是
&lt;code&gt;p[-1]&lt;/code&gt;，也就是算完後的最後一個值。&lt;/p&gt;</summary><category term="fibonacci"></category></entry><entry><title>Python logging stream</title><link href="http://blog.carlcarl.me/1230/python-logging-stream/" rel="alternate"></link><updated>2013-07-25T17:11:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-07-25:1230/python-logging-stream/</id><summary type="html">&lt;p&gt;在用 &lt;a href="https://github.com/moskytw/uniout"&gt;uniout&lt;/a&gt; 的時候發現 logging
的時候沒辦法自動轉輸出為中文(因為資料有些是中文，然後有時候又需要做些log
囧)，看了一下 &lt;code&gt;uniout&lt;/code&gt; 的 code，看來做法是另外用了一個物件，然後把
&lt;code&gt;sys.stdout&lt;/code&gt; 的屬性複製上去，再加上編碼的功能，最後再將 &lt;code&gt;sys.stdout&lt;/code&gt;
assign 成這個物件。&lt;/p&gt;
&lt;h3&gt;我用的 logger 程式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;想說 &lt;code&gt;logging&lt;/code&gt; module 應該也是丟
&lt;code&gt;stdout&lt;/code&gt;，不過怎麼設就是不行，所以還是看一下 source code。&lt;/p&gt;
&lt;h3&gt;logging module&lt;/h3&gt;
&lt;p&gt;首先先隨便找個 function 下手 XD。這邊先看 &lt;code&gt;Logger&lt;/code&gt; 的
&lt;code&gt;debug()&lt;/code&gt;，&lt;code&gt;debug()&lt;/code&gt; 裡面呼叫到 &lt;code&gt;_log()&lt;/code&gt;，裡面做了一些 message
的處理，然後呼叫到 &lt;code&gt;handle()&lt;/code&gt;，&lt;code&gt;handle()&lt;/code&gt; 又呼叫
&lt;code&gt;callHandlers()&lt;/code&gt;，底下是 &lt;code&gt;callHandlers()&lt;/code&gt; 的 source code：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Pass a record to all relevant handlers.&lt;/span&gt;

&lt;span class="sd"&gt;    Loop through all handlers for this logger and its parents in the&lt;/span&gt;
&lt;span class="sd"&gt;    logger hierarchy. If no handler was found, output a one-off error&lt;/span&gt;
&lt;span class="sd"&gt;    message to sys.stderr. Stop searching up the hierarchy whenever a&lt;/span&gt;
&lt;span class="sd"&gt;    logger with the &amp;quot;propagate&amp;quot; attribute set to zero is found - that&lt;/span&gt;
&lt;span class="sd"&gt;    will be the last logger whose handlers are called.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hdlr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;levelno&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;hdlr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;hdlr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propagate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;    &lt;span class="c"&gt;#break out&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;raiseExceptions&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emittedNoHandlerWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No handlers could be found for logger&amp;quot;&lt;/span&gt;
                            &lt;span class="s"&gt;&amp;quot; &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emittedNoHandlerWarning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;蠻好奇為啥不用 &lt;code&gt;break&lt;/code&gt;，而是 assign &lt;code&gt;C = None&lt;/code&gt;
來跳出迴圈，不過這個是題外話 XD。這邊主要要看的是
&lt;code&gt;hdlr.handle(record)&lt;/code&gt;，本來以為是 call 回去剛才上面的
&lt;code&gt;handle()&lt;/code&gt;，不過研究了一下發現應該不是這樣，這個是 call 到另外一個
&lt;code&gt;class Handler&lt;/code&gt; 裡面的 &lt;code&gt;handle()&lt;/code&gt; 才對。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Handler&lt;/code&gt; 裡的 &lt;code&gt;handle()&lt;/code&gt; 會呼叫
&lt;code&gt;emit()&lt;/code&gt;，但是去看的時候發現裡面丟了個
&lt;code&gt;NotImplementedError Exception&lt;/code&gt;，看來比較像是個 abstract
class。這邊有繼承 &lt;code&gt;Handler&lt;/code&gt; 的主要有 &lt;code&gt;FileHandler&lt;/code&gt; 和 &lt;code&gt;StreamHandler&lt;/code&gt;
這兩個 class，直覺應該是要看 &lt;code&gt;StreamHander&lt;/code&gt; :P，這邊在 &lt;code&gt;StreamHandler&lt;/code&gt;
的 &lt;code&gt;__init__()&lt;/code&gt; 可以看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外再回去看 &lt;code&gt;logging.basicConfig()&lt;/code&gt; 的其中內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;filemode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hdlr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hdlr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不是開檔的話，就是走 stream 這邊，然後因為我在呼叫的時候沒有指定
&lt;code&gt;stream&lt;/code&gt; 的值，所以這邊拿到會是 &lt;code&gt;None&lt;/code&gt;，然後當成 &lt;code&gt;StreamHandler&lt;/code&gt;
的參數，然後又因為 &lt;code&gt;stream&lt;/code&gt; 是 &lt;code&gt;None&lt;/code&gt;，所以就會使用 &lt;code&gt;sys.stderr&lt;/code&gt;
來當輸出。&lt;/p&gt;
&lt;p&gt;其實我 trace 到中間的時候就想到是 &lt;code&gt;stderr&lt;/code&gt; 了
XD，不過想說還是有始有終的的把它 trace 下去。接下來要 fix
開始那個問題就很簡單了，在程式裡加入 &lt;code&gt;sys.stderr = uniout.uniout&lt;/code&gt; 就 OK
了，不過這樣的做法會把兩邊的輸出混在一起，所以應該也可以在
&lt;code&gt;basicConfig()&lt;/code&gt; 裡面指定 &lt;code&gt;stream=sys.stdout&lt;/code&gt;，logging 就不要走 &lt;code&gt;stderr&lt;/code&gt;
這樣~~。&lt;/p&gt;</summary><category term="logging"></category><category term="uniout"></category></entry><entry><title>ipk unarchive</title><link href="http://blog.carlcarl.me/1224/ipk-unarchive/" rel="alternate"></link><updated>2013-07-17T16:27:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-07-17:1224/ipk-unarchive/</id><summary type="html">&lt;p&gt;記錄一下:P&lt;/p&gt;
&lt;p&gt;查了一下資料，有些說直接用 &lt;code&gt;tar&lt;/code&gt;
就可以了，不過怎麼試就是不行zzzzzz。後來看到 &lt;a href="http://stackoverflow.com/questions/17369127/extracting-and-creating-ipk-files"&gt;stackoverflow&lt;/a&gt;
上有人提供的方法，試了一下就成功了 XD。&lt;/p&gt;
&lt;p&gt;先用 &lt;code&gt;ar x xxx.ipk&lt;/code&gt; 就可以解壓縮出幾個檔案，其中 &lt;code&gt;data.tar.gz&lt;/code&gt;
放的就是程式執行檔之類的，&lt;code&gt;control.tar.gz&lt;/code&gt; 放的是 ipk 的一些
information。&lt;/p&gt;
&lt;p&gt;接下來用 &lt;code&gt;tar -xf data.tar.gz&lt;/code&gt; or &lt;code&gt;tar -xf control.tar.gz&lt;/code&gt;
就可以看到裡面的資料了。&lt;/p&gt;</summary><category term="ipk"></category><category term="tar"></category></entry><entry><title>Python Yahoo weather</title><link href="http://blog.carlcarl.me/1212/python-yahoo-weather/" rel="alternate"></link><updated>2013-07-16T18:30:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-07-16:1212/python-yahoo-weather/</id><summary type="html">&lt;p&gt;實際做起來不難，是說弄完才發現有 &lt;a href="https://pypi.python.org/pypi/yweather/0.1"&gt;yweather&lt;/a&gt; 這個可以用囧。&lt;/p&gt;
&lt;p&gt;首先到 &lt;a href="http://developer.yahoo.com/yql/console/"&gt;YQL&lt;/a&gt; 這邊下 query，這邊可以參考&lt;a href="http://my.opera.com/weiyu/blog/2012/04/08/yql-yahoo"&gt;這篇&lt;/a&gt;最下面的兩種 query
方法。格式可以選 JSON 然後把 callback 名稱拿掉，下完 query
就可以產生一段網址，以新竹的例子來說就是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20location%3D%22TWXX0009%22%20and%20u%3D%22c%22&amp;amp;format=json&amp;amp;diagnostics=true&amp;amp;callback=
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著用 python 處理一下就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blahblah..&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;raw_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;requests&lt;/code&gt; 很方便，不過不是內建的，要先安裝：&lt;code&gt;pip install requests&lt;/code&gt;，最後得到的
&lt;code&gt;json_data&lt;/code&gt; 就是天氣資料。&lt;/p&gt;</summary><category term="weather"></category><category term="yahoo"></category><category term="yql"></category></entry><entry><title>tree command exclude multiple direcories</title><link href="http://blog.carlcarl.me/1194/tree-command-exclude-multiple-direcories/" rel="alternate"></link><updated>2013-07-14T17:57:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-07-14:1194/tree-command-exclude-multiple-direcories/</id><summary type="html">&lt;h3&gt;安裝&lt;/h3&gt;
&lt;p&gt;一般 Linux 好像都會有裝，不過 OSX 上預設沒有，下個 &lt;code&gt;brew install tree&lt;/code&gt;
裝就 OK 了。&lt;/p&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;p&gt;man 了一下，用 &lt;code&gt;-I pattern&lt;/code&gt; 就可以略過資料夾，那如果有多個呢？本來猜是
&lt;code&gt;-I pattern1 pattern2&lt;/code&gt;，結果不是囧，&lt;code&gt;-I pattern1 -I pattern2&lt;/code&gt;
也不是囧。後來才看到&lt;a href="http://unix.stackexchange.com/questions/61074/tree-command-for-multiple-includes-and-excludes"&gt;用法&lt;/a&gt;應該是 &lt;code&gt;-I pattern1|pattern2&lt;/code&gt; 才對 orz。&lt;/p&gt;</summary><category term="tree"></category></entry><entry><title>Python Pyramid with Grunt.js</title><link href="http://blog.carlcarl.me/1131/python-pyramid-with-grunt-js/" rel="alternate"></link><updated>2013-07-14T05:11:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-07-14:1131/python-pyramid-with-grunt-js/</id><summary type="html">&lt;p&gt;這幾天試玩了一下
&lt;a href="http://gruntjs.com"&gt;Grunt.js&lt;/a&gt;，感覺還不錯方便，所以來筆記一些自己的設定。一開始還在想
&lt;a href="http://www.pylonsproject.org"&gt;Pyramid&lt;/a&gt; 和 Grunt 要怎麼結合，雖然有 Google
了一下，不過好像都沒有一個比較準確的答案，所以這邊我就照自己想的來做
XD。&lt;/p&gt;
&lt;p&gt;我主要在 Grunt 中用的功能有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;minify 和 combine css, js&lt;/li&gt;
&lt;li&gt;監控檔案的變化，有變動的話就做 1 的步驟&lt;/li&gt;
&lt;li&gt;做完 1 的步驟就自動 reload browser (livereload)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;livereload 這邊是透過 Grunt bind 一個 port
並監視檔案的變化，接著網頁的部分加入這個 port 底下所提供的
javascript，一旦檔案發生變化，Grunt 就會 push 消息，通知 browser 做
reload 的動作。&lt;/p&gt;
&lt;h3&gt;Project 架構&lt;/h3&gt;
&lt;p&gt;下面是整個 project 的大致架構，架構應該還算簡單 XD。附帶一提，template
我是使用 &lt;a href="http://docs.pylonsproject.org/projects/pyramid_jinja2/en/latest/"&gt;jinja2&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── CHANGES.txt
├── Gruntfile.js
├── LICENSE
├── MANIFEST.in
├── README.txt
├── development.ini
├── package.json
├── production.ini
├── requirements.txt
├── setup.cfg
├── setup.py
├── node_modules
└── my_project
    ├── __init__.py
    ├── static
    │   ├── dist
    │   │   ├── css
    │   │   ├── favicon.ico
    │   │   ├── images
    │   │   ├── img
    │   │   ├── js
    │   │   └── manifest.mf
    │   └── src
    │       ├── css
    │       └── js
    ├── templates
    │   └── root.jinja2
    ├── tests.py
    └── views.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;static&lt;/code&gt; 底下該怎麼分類想了很久，Pyramid 的官方 doc
好像都沒提到該怎麼規劃比較好 orz，後來我是自己分類成 &lt;code&gt;src&lt;/code&gt; 和 &lt;code&gt;dist&lt;/code&gt;
兩個資料夾，處理過的 css, js 以及其他需要公開的檔案就放在 &lt;code&gt;dist&lt;/code&gt;
裡頭。記得 route 也要改一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_static_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;my_project:static/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Grunt CLI 安装&lt;/h3&gt;
&lt;p&gt;準備工作完成後，就可以來安裝 Grunt command line 了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;npm install -g grunt-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Grunt 設定檔&lt;/h3&gt;
&lt;p&gt;Grunt 基本需要兩個設定檔：第一個是 &lt;code&gt;package.json&lt;/code&gt;，用來指定裝 &lt;code&gt;grunt&lt;/code&gt;
以及其他一些外掛，像是上面提到的 minify, combine
這些功能都需要在這裡指定額外的外掛才能使用；第二個是
&lt;code&gt;Gruntfile.js&lt;/code&gt;，這個則是用來設定這些外掛的參數和如何執行。基本上這兩個檔案直接放在同一層會比較好，我自己後來是決定都放在最上層，當然，如果確定只需要操縱
&lt;code&gt;static&lt;/code&gt; 資料夾底下的檔案的話，也可以考慮都放在 &lt;code&gt;static&lt;/code&gt; 底下，要執行
grunt 指令的時候再移到那一層執行就 OK 了。&lt;/p&gt;
&lt;p&gt;下面是我的 package.json 內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;grunt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;grunt-contrib-uglify&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;grunt-contrib-cssmin&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;grunt-contrib-watch&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要裝的外掛就寫在 &lt;code&gt;devDependencies&lt;/code&gt; 裡面。這邊 &lt;a href="https://github.com/gruntjs/grunt-contrib-uglify"&gt;grunt-contrib-uglify&lt;/a&gt;
和 &lt;a href="https://github.com/gruntjs/grunt-contrib-cssmin"&gt;grunt-contrib-cssmin&lt;/a&gt; 分別是用來 minify, combine js 以及 css
用的，&lt;a href="https://github.com/gruntjs/grunt-contrib-watch"&gt;grunt-contrib-watch&lt;/a&gt; 則是用來監控檔案變化和 livereload。&lt;/p&gt;
&lt;p&gt;接下來則是 Gruntfile.js 的內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*global node:true, module:true*/&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Project configuration.&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;uglify&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;my_project/static/dist/js/index.min.js&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_project/static/src/js/jquery-1.8.3.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_project/static/src/js/bootstrap.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_project/static/src/js/index.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;cssmin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;keepSpecialComments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;my_project/static/dist/css/style.min.css&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="s1"&gt;&amp;#39;my_project/static/src/css/bootstrap.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s1"&gt;&amp;#39;my_project/static/src/css/bootstrap-responsive.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s1"&gt;&amp;#39;my_project/static/src/css/style.css&amp;#39;&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_project/static/src/css/*.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cssmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;livereload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_project/static/src/js/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;livereload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// Load the plugins&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-contrib-uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-contrib-cssmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-contrib-watch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Default task(s).&lt;/span&gt;
    &lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uglify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cssmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先第一個是 &lt;code&gt;uglify&lt;/code&gt;，&lt;code&gt;uglify&lt;/code&gt; 除了 minify 和 combine
外，預設還會將所有變數名稱用較短的名稱來取代 (超貼心)，&lt;code&gt;files&lt;/code&gt; 的 key
值是處理完後的檔案，array 裡則是要處理的檔案，以這裡的例子來看，就是把
&lt;code&gt;myproject/static/src/js&lt;/code&gt; 底下的三個 js 檔案 combine 在一起，做 minify
和 mangle(將變數取代為較短的名稱)，最後放到 &lt;code&gt;my_project/static/dist/js&lt;/code&gt;
底下，並命名為 &lt;code&gt;index.min.js&lt;/code&gt;，如果不想要 combine 在一起的話就必須在
&lt;code&gt;files&lt;/code&gt; 裡分開來寫；&lt;code&gt;cssmin&lt;/code&gt; 也是 minify 和 combine，&lt;code&gt;options&lt;/code&gt; 裡的
&lt;code&gt;keepSpecialComments: 0&lt;/code&gt; 表示將 comment 拿掉；&lt;code&gt;watch&lt;/code&gt;
則是指定要監控的檔案和要做的 task，另外還有設定 &lt;code&gt;livereload&lt;/code&gt;，不過
&lt;code&gt;livereload&lt;/code&gt; 的設定還沒結束，在 template 裡還需要加入一個
script，下面會提到。&lt;/p&gt;
&lt;h3&gt;Grunt plugins 安裝&lt;/h3&gt;
&lt;p&gt;設定完後，在資料夾最上層輸入指令
&lt;code&gt;npm install&lt;/code&gt;，接著會發現在現在的位置底下多了個
&lt;code&gt;node_modules&lt;/code&gt;(可以回去對照一下一開始列出的 project 架構)，不過這個
node_modules 不需要加入到 version control
中，所以可以設定一下，把這個資料夾忽略掉。&lt;/p&gt;
&lt;h3&gt;Livereload&lt;/h3&gt;
&lt;p&gt;接著是設定 &lt;code&gt;livereload&lt;/code&gt;，&lt;code&gt;livereload&lt;/code&gt; 需要在 template 中加入
script，但是我不希望 production 環境中也跑出這個，所以我需要一個 flag
來幫助我判斷，於是我在 &lt;code&gt;development.ini&lt;/code&gt; 以及 &lt;code&gt;production.ini&lt;/code&gt;
分別加入了 &lt;code&gt;dev = true&lt;/code&gt; 以及 &lt;code&gt;dev = false&lt;/code&gt;，並在
&lt;code&gt;my_project/__init__.py&lt;/code&gt; 的 &lt;code&gt;main&lt;/code&gt; function 裡加入下面程式，在透過
subscriber 註冊的 function 會帶一個參數，這裡命名為
&lt;code&gt;event&lt;/code&gt;，在這裡設值後，在 template 中就可以直接用 dev 這個變數。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_global&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subscriber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pyramid.events.BeforeRender&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 &lt;code&gt;root.jinja2&lt;/code&gt; 這個 template 的 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 上面加入以下程式就 OK 了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://127.0.0.1:35729/livereload.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Test&lt;/h3&gt;
&lt;p&gt;寫完後先執行網頁，設定檔用 &lt;code&gt;development.ini&lt;/code&gt;(ex:
&lt;code&gt;pserve development.ini&lt;/code&gt;)，然後執行 &lt;code&gt;grunt watch&lt;/code&gt;，接著嘗試改個 css 或
js 檔案並儲存看看，應該會自動產生處理後的檔案並自動 reload
網頁。&lt;code&gt;grunt watch&lt;/code&gt;
預設不會放到背景執行，所以需要另外開個視窗來編輯檔案。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://docs.spmjs.org/contrib/simple-grunt"&gt;關於Grunt，從一個簡單的配置開始！&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://gibuloto.com/blog/grunt-plus-requirejs-with-multi-page-website/"&gt;Grunt + RequireJS with multi-page website&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blog.wu-boy.com/2013/03/javascript-command-line-tool-gruntjs/"&gt;Javascript command line tool GruntJS 介紹&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://gist.github.com/appLhui/5283784/raw/093685c9971ac941be75d7ff7a718eca5173fcb1/初学grunt进行项目构建(二).md"&gt;初学grunt进行项目构建 二&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.jankerli.com/?p=1628"&gt;Grunt.js 初使用&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.k68.org/?p=1232"&gt;使用Grunt進行js、css壓縮合併&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/16371022/how-to-use-grunt-contrib-livereload"&gt;How to use grunt-contrib-livereload?&lt;/a&gt;&lt;/p&gt;</summary><category term="grunt"></category><category term="grunt.js"></category><category term="pyramid"></category></entry><entry><title>OSX Mavericks Beta header file position</title><link href="http://blog.carlcarl.me/1120/osx-mavericks-betaheader-file-position/" rel="alternate"></link><updated>2013-07-12T02:15:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-07-12:1120/osx-mavericks-betaheader-file-position/</id><summary type="html">&lt;p&gt;Beta 版的 header file 位置有些不同，看到幾個地方都傳出災情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mxcl/homebrew/pull/20938"&gt;gpg-agent: Set correct stdint.h header path for Mac OSX Mavericks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jfahrenkrug/WWDC-Downloader/issues/5"&gt;The gem doesn't yet build in Mavericks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/josegonzalez/homebrew-php/issues/591"&gt;Installation fails on OS X Mavericks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原本的 &lt;code&gt;/usr/include&lt;/code&gt; 已經不見了，找了一下，位置是在：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Xcode5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Developer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Platforms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MacOSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Developer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SDKs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MacOSX10&lt;/span&gt;&lt;span class="mf"&gt;.9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果像是 vim 有 plugin (ex: youcompleteme) 需要指定 header file
位置的話，可以另外把這個位置加上去。&lt;/p&gt;</summary><category term="mac"></category></entry><entry><title>Javascript MutationObserver</title><link href="http://blog.carlcarl.me/1113/javascript-mutationobserver/" rel="alternate"></link><updated>2013-07-03T18:46:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-07-03:1113/javascript-mutationobserver/</id><summary type="html">&lt;p&gt;最近看到 Aol Reader release，試用了一下，感覺還滿不錯的，但是右邊的廣告實在很礙眼，就算用
adblock 擋掉，右邊還是會留空，想說都沒寫過 browser 的 extension
，所以就拿這個來練功啦～，不然其實寫 userscript 也可以就是。要弄的
extension 以 Opera 和 Chrome 為主，因為兩個基本上架構可以共通，寫起來 CP
值比較高 XD。&lt;/p&gt;
&lt;p&gt;本來想說直接綁定 &lt;code&gt;window.onload&lt;/code&gt; 在裡面做就好了，不過後來發現 Aol Reader
在 &lt;code&gt;onload&lt;/code&gt; 之後還會有個它自己 loading
的頁面，處理起來就變麻煩很多，因為除了要觀察 dom 來判斷何時才算真的
ready 以外，另外就是 Opera extension guide 裡說限制不能用 setTimeout
之類的函式，本來我還想用暴力法，每秒檢查要處理的 element
讀好了沒，確定都好了才做，看來是行不通...。&lt;/p&gt;
&lt;p&gt;後來大 CA 在噗浪上面說可以用 &lt;code&gt;MutationObserver&lt;/code&gt;
做，找了一些資料看，好像真的是我要的東西 XD。MutationObserver
簡單說，它可以用來 monitor 某個 element 的變化並呼叫對應的
callback。後來我又發現 Aol Reader 在真正 ready 的情況下，會在 &lt;code&gt;body&lt;/code&gt;
上加上 &lt;code&gt;ready&lt;/code&gt; 這個 class，說起來還滿貼心的
XD。所以該有的條件都有了，接下來就是實作啦。下面是部分的實作內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;MutationObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MutationObserver&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebKitMutationObserver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MutationObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mutationRecord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mutationRecord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ready&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// do something here&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;

            &lt;span class="c1"&gt;// Done, remove this event.&lt;/span&gt;
            &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attributeFilter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊設定只關注 attribute 的變化，然後在 &lt;code&gt;classList&lt;/code&gt; 裡如果有 &lt;code&gt;ready&lt;/code&gt;
這個 class 的時候就做處理，className
因為要自己再另外切字串，會比較麻煩一點，所以這邊才改用
classList。在做完之後就用 &lt;code&gt;disconnect()&lt;/code&gt; 把這個綁定的 event
給清除掉。比較要注意的是 &lt;code&gt;attributeFilter&lt;/code&gt;，如果沒設定的話，會連其他
attribute 有變化的時候也呼叫 callback，這邊設定只對 &lt;code&gt;class&lt;/code&gt;
有變化的情況下才呼叫 callback，效能上多少會有一點差。&lt;a href="https://github.com/carlcarl/Aol-Reader-No-ads"&gt;這邊是 source code
的網址&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;這邊只有大概講一下，其他 MutationObserver
的使用細節可以看下面的參考網址。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="https://developer.mozilla.org/zh-CN/docs/DOM/MutationObserver"&gt;MutationObserver&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://chrisyip.im/post/mutation-events-and-mutationobserver/"&gt;Mutation 事件和 MutationObserver&lt;/a&gt;&lt;/p&gt;</summary><category term="MutationObserver"></category></entry><entry><title>javascript style.width offsetWidth</title><link href="http://blog.carlcarl.me/1107/javascript-style-width-offsetwidth/" rel="alternate"></link><updated>2013-06-28T20:29:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-28:1107/javascript-style-width-offsetwidth/</id><summary type="html">&lt;p&gt;查了一些資料，看起來 &lt;code&gt;style.width&lt;/code&gt; 是如果 css 沒指定 element 的 width
的話，就會拿到空值，即使它本身的確佔有一個大小。這時候如果想拿到實際大小的話可以用
&lt;code&gt;offsetWidth&lt;/code&gt;，另外要注意的是 &lt;code&gt;offsetWidth&lt;/code&gt; 是
&lt;code&gt;readonly&lt;/code&gt;，所以如果要設寬度，還是得從 &lt;code&gt;style.width&lt;/code&gt; 著手。還有 &lt;a href="http://jsperf.com/style-width-vs-offsetwidth1/5"&gt;這篇&lt;/a&gt;
是 &lt;code&gt;style.width&lt;/code&gt; 和 &lt;code&gt;offsetWidth&lt;/code&gt; 的效能比較，看來 &lt;code&gt;offsetWidth&lt;/code&gt;
效能好很多，看來以後抓寬度就直接抓這個值就好了@@。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://zhuweiwu.com/?p=86"&gt;原生js获取宽高与jquery获取宽高的方法的关系&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://bbs.csdn.net/topics/80381570"&gt;offsetWidth和width有什么不同啊?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4787527/how-to-find-the-width-of-a-div"&gt;How to find the width of a div&lt;/a&gt;&lt;/p&gt;</summary><category term="js"></category><category term="css"></category><category term="offsetWidth"></category></entry><entry><title>firefox developer tool screenshot</title><link href="http://blog.carlcarl.me/1095/firefox-developer-tool-screenshot/" rel="alternate"></link><updated>2013-06-27T19:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-27:1095/firefox-developer-tool-screenshot/</id><summary type="html">&lt;p&gt;雖然也可以用另外的軟體截圖，不過有時候截的大小不是很準確
orz。這邊我是要對某個 element 做截圖，而且大小要很精確，後來剛好看到
firefox 的 developer tool 也有這樣的功能，所以就試了一下。&lt;/p&gt;
&lt;p&gt;一開始按 &lt;code&gt;shift+F2&lt;/code&gt; 就會出現一個輸入視窗。嗯，沒錯，它的 screenshot 是
CLI 的 XD。如果是要對某個 element 做截圖的話，例如是一個 id 叫做 target
的區塊，可以這樣下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;screenshot test.png --selector #target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就會把 &lt;code&gt;#target&lt;/code&gt; 這個部分存成一個圖片檔，名稱為 &lt;code&gt;test.png&lt;/code&gt;。其他還有
&lt;code&gt;--delay&lt;/code&gt;, &lt;code&gt;--clipboard&lt;/code&gt;...等選項，只要輸入 &lt;code&gt;-&lt;/code&gt;
就會出現選項的提示，詳細的可以直接從裡面看。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://www.ghacks.net/2012/11/02/take-screenshots-straight-from-firefoxs-developer-toolbar/"&gt;Take screenshots straight from Firefox’s Developer
Toolbar(裡面前面是舊版的 API，要注意)&lt;/a&gt;&lt;/p&gt;</summary><category term="firefox"></category></entry><entry><title>Linux conntrack delete destination NAT</title><link href="http://blog.carlcarl.me/1080/linux-conntrack-delete-destination-nat/" rel="alternate"></link><updated>2013-06-27T16:41:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-27:1080/linux-conntrack-delete-destination-nat/</id><summary type="html">&lt;p&gt;最近遇到在測 throughput 中，有一定機率無法關掉 DMZ
的問題，而且這邊只要關掉 throughput 後，DMZ 就會順利關掉，看起來像是
throughput 的連線讓被刪掉的 conntrack 連線又復活(?)了這樣 =.=。&lt;/p&gt;
&lt;p&gt;看了一下 firewall 的 rule，裡面確實是有刪除 conntrack connection 的
rule，指令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;conntrack -D conntrack -g -r xxx.xxx.xxx.xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看了一下 &lt;code&gt;conntrack －L conntrack&lt;/code&gt; 的記錄，grep 了在接收 throughput 的
port，發現還是有連線存在，來源是從 NAT
內部到外面...，所以看來這個連線也會讓外部的封包有機會進來的樣子。&lt;/p&gt;
&lt;p&gt;第一直覺就是把這邊的連線也砍掉啦，規則就從
&lt;code&gt;conntrack -L conntrack -g -r&lt;/code&gt; 這裡拿到所有的 dest ip，然後一個一個用
&lt;code&gt;conntrack -D conntrack -d dest_ip&lt;/code&gt; 砍掉。&lt;/p&gt;
&lt;p&gt;不過事情好像沒那麼美好 orz，後來用 &lt;code&gt;conntrack&lt;/code&gt; 看，發現 source ip
的部分應該也要濾掉，而且因為 throughput
太大，有機會讓被砍掉的連線復活，所以又加了個迴圈來砍，聽起來有點暴力啊(汗)。這邊因為有些特殊需求，所以整個
shell 程式必須用 c 產生，判斷有沒有殺掉的部分就用
&lt;code&gt;popen("conntrack -L conntrack | grep xxx.xxx.xxx.xxx", "r")&lt;/code&gt; 做，轉成
shell 的話大概如下，這邊迴圈就不寫了:P：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 因為有可能拿到複數個，所以需要用雙引號包起來&lt;/span&gt;
&lt;span class="nv"&gt;outside_ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(conntrack -L conntrack -g -r xxx.xxx.xxx.xxx | awk &amp;#39;{ print $5 }&amp;#39; | cut -f2 -d=)&amp;quot;&lt;/span&gt;
conntrack -D conntrack -g -r xxx.xxx.xxx.xxx

&lt;span class="nv"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(conntrack -L conntrack | grep xxx.xxx.xxx.xxx)&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;$check&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# -r 表示如果前面給的參數是空的話，就不執行後面的指令&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$outside_ip&lt;/span&gt; | xargs -r conntrack -D conntrack -d
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$outside_ip&lt;/span&gt; | xargs -r conntrack -D conntrack -s
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;整個解法其實沒有說很好，不知道還有沒有什麼更漂亮的解法就是了。&lt;/p&gt;
&lt;h2&gt;2013/10/03 補充&lt;/h2&gt;
&lt;p&gt;同事後來用了一個更好的方法修掉了，內容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;iptables -t raw -I PREROUTING -s source_ip -j DROP
conntrack -D conntrack -g -r source_ip
iptables -t raw -D PREROUTING -s source_ip -j DROP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為 raw 這張 table + PREROUTING 是在 ip conntrack
之前，所以先增加一個規則在前面將 source ip drop 掉，然後後面再清掉
conntrack 中的內容，清完後再把這條規則清掉就可以了。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://manpages.ubuntu.com/manpages/jaunty/man8/conntrack.8.html"&gt;conntrack manual&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://hi.baidu.com/weioip/item/3a48aaf45efa600cd89e7296"&gt;iptables中的conntrack記錄&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://hi.baidu.com/farmerluo/item/f49bbdc0e390a52dee4665bb"&gt;用iptables的raw表解決ip_conntrack: table full, dropping packet的問題&lt;/a&gt;  &lt;/p&gt;</summary><category term="conntrack"></category></entry><entry><title>stunnel Mac client</title><link href="http://blog.carlcarl.me/1070/stunnel-mac-client/" rel="alternate"></link><updated>2013-06-22T15:18:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-22:1070/stunnel-mac-client/</id><summary type="html">&lt;p&gt;stunnel server 的設定就照&lt;a href="https://wido.me/sunteya/setup-a-socks-proxy-server-pass-by-secure-firewall/"&gt;這篇&lt;/a&gt;的教學，不過 Mac client
的設定似乎不能直接套用 Ubuntu client
的，試了一下網路上的一些設定，總算有可以 work
的了，以下是我的設定，比較要注意的就是 &lt;code&gt;cert&lt;/code&gt; 的位置要設對，另外就是
&lt;code&gt;connect&lt;/code&gt; 的 &lt;code&gt;host&lt;/code&gt; 要改成你 stunnel server 的位置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;
&lt;span class="n"&gt;setgid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nogroup&lt;/span&gt;
&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stunnel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;

&lt;span class="n"&gt;cert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stunnel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;

&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="n"&gt;sslVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SSLv3&lt;/span&gt;
&lt;span class="n"&gt;verify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;danted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;accept&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1080&lt;/span&gt;
&lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1081&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://briteming.blogspot.tw/2012/01/vpsstunnel.html"&gt;在vps上搭建stunnel，用来翻墙的详细方法(原创文章）&lt;/a&gt;&lt;/p&gt;</summary><category term="stunnel"></category><category term="mac"></category></entry><entry><title>ssh with firewall</title><link href="http://blog.carlcarl.me/1053/ssh-with-firewall/" rel="alternate"></link><updated>2013-06-19T00:19:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-19:1053/ssh-with-firewall/</id><summary type="html">&lt;p&gt;記錄一下實用的 ssh 穿牆指令，然後這邊有個前提是：在牆外要有可以 ssh
的主機，這裡以 &lt;code&gt;example.com&lt;/code&gt; 為例。 (其實參考資料的連結內容更詳細
XD，有需要的人建議點進去看看唄～～。)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;從內部往外。&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 在 local 開一個 9999 的 port 轉到 `example.com` 的 22 port，&lt;/span&gt;
&lt;span class="c"&gt;# 接下來只要把 proxy 的設定指到 localhost 的 9999 就可以了。&lt;/span&gt;
ssh -NfD 9999 user@example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;從外部連內。&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 這邊必須先在內部的 server 輸入下面這一行，連到 example.com，&lt;/span&gt;
&lt;span class="c"&gt;# 然後在 example.com 上開 9999 port 來建立一個通道，&lt;/span&gt;
ssh -NfR 9999:localhost:22 user@example.com
 
&lt;span class="c"&gt;# 在 example.com 上連這個 port 即可。&lt;/span&gt;
ssh -p 9999 -l user localhost
 
&lt;span class="c"&gt;# 如果需要 ssh 以外的連線，仿照第一個方法，加個 9998 的 port，&lt;/span&gt;
&lt;span class="c"&gt;# proxy 設定改成 example.com 9998 port 即可。&lt;/span&gt;
ssh -p 9999 -l user -D 9998 localhost
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;怕斷線的話可以用 &lt;code&gt;autossh&lt;/code&gt;，記得要另外安裝，通常預設不會有。前面 &lt;code&gt;ssh&lt;/code&gt;
的指令改成 &lt;code&gt;autossh -M 12345&lt;/code&gt;。&lt;code&gt;12345&lt;/code&gt; 是自己隨便給的。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://josephj.com/entry.php?id=312"&gt;反向建立 SSH Tunnel、免 VPN 連回公司&lt;/a&gt;&lt;/p&gt;</summary><category term="ssh"></category></entry><entry><title>chrome cpu profiler program</title><link href="http://blog.carlcarl.me/1049/chrome-cpu-profiler-program/" rel="alternate"></link><updated>2013-06-17T15:26:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-17:1049/chrome-cpu-profiler-program/</id><summary type="html">&lt;p&gt;查了一下 chrome 裡 cpu profiler 裡的 program 代表啥意思，像有人說是整個
js code 的 root，不過看了一下其他的意見，感覺比較像是 native code
所花的時間，包括 DOM 操作，gc 等一堆雜事等。舉個例子來說，假如你是要看你
function 處理一堆 array 結構的校能的話，就可以不需要理這欄。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/9494228/slow-javascript-execution-in-chrome-profiler-yields-program"&gt;Slow javascript execution in chrome, profiler yields (program)&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://groups.google.com/forum/?fromgroups#!topic/chromium-discuss/02CEYDcuO18"&gt;What does (program) signify in the Chrome profiler?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/3847954/chrome-debugger-what-is-program-in-the-profiler"&gt;Chrome debugger - what is “(program)” in the profiler?&lt;/a&gt;&lt;/p&gt;</summary><category term="chrome"></category></entry><entry><title>nginx pagespeed gzip combine js</title><link href="http://blog.carlcarl.me/1043/nginx-pagespeed-gzip-combine-js/" rel="alternate"></link><updated>2013-06-16T23:10:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-16:1043/nginx-pagespeed-gzip-combine-js/</id><summary type="html">&lt;p&gt;在用 &lt;a href="http://gtmetrix.com"&gt;GTmetrix&lt;/a&gt; 看網站的效能的時候，發現只有 pagespeed combine 出來的
js，沒有被 gzip 處理過。&lt;/p&gt;
&lt;p&gt;google 了一下，在 &lt;a href="https://github.com/pagespeed/ngx_pagespeed/issues/368"&gt;Github 上也找到同樣的問題&lt;/a&gt;，裡面說要加上
&lt;code&gt;application/javascript&lt;/code&gt;，回頭看了一下我的 nginx 設定檔，果然沒加到= =。&lt;/p&gt;
&lt;p&gt;我原本設定是
&lt;code&gt;gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript&lt;/code&gt;，想說該設的都設了，想不到還是有漏網之魚，加上之後重啟，果然就 OK 哩。&lt;/p&gt;
&lt;p&gt;附帶一提，我把 wp-minify 這個外掛也拿掉了，因為 pagespeed
基本上算是可以取代掉它了（而且 wp-minfiy 還有一些怪怪的 bug...）。&lt;/p&gt;</summary><category term="nginx"></category><category term="pagespeed"></category></entry><entry><title>html5 canvas double buffering</title><link href="http://blog.carlcarl.me/1023/html5-canvas-double-buffering/" rel="alternate"></link><updated>2013-06-16T19:25:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-16:1023/html5-canvas-double-buffering/</id><summary type="html">&lt;p&gt;因為之前寫 java 的經驗，讓我以為在 html5 的 canvas 上也要自己實作 double
buffering，但是在我後來實作後發現，好像哪裡怪怪的，因為其實原本就沒有在閃的感覺了，所以加了
double buffering 好像也沒啥差，重點是 performance 下降很多......。&lt;/p&gt;
&lt;p&gt;後來花了一些時間找資料，我得到的結論－是大部分的情況，不需要自己做
double buffering，因為瀏覽器會很聰明的幫你做。但是它怎麼判斷什麼時候該把
buffer 的部分 render 上去呢？以下是我的鍵盤猜測：&lt;/p&gt;
&lt;p&gt;因為現在大多數的螢幕更新頻率都是 60Hz，也就是說大概每 16 ms
就會刷新一次螢幕，而瀏覽器本身在刷新的頻率可能也會接近這個時間，但是有沒有比較高就不知道了，因為你所看到的可能會被你螢幕的更新頻率所限制，就算瀏覽器刷新頻率是
1000Hz，反正一般的銀幕也看不出來:P。&lt;/p&gt;
&lt;p&gt;以一個簡單的例子來實驗，假如我在一開始把一個方形塗上顏色然後 clear
掉，等一段時間後再塗上顏色，間隔如果設 10ms
的話，在我的螢幕上就看不到被清空的那段畫面；又假如我設成
20ms，就會看到被刷空白的那段畫面，也就是俗稱的「畫面在閃」，我在這邊實驗的結果是
12ms 就會有閃的感覺，也許是因為程式執行的
delay。然後瀏覽器應該也不會傻傻的即使你什麼都不做也一直重複 render
上去，而是在上次 render
後這段時間，假如有做一些畫面上的操作，才會把畫面再 render
上去，這樣感覺比較合理。&lt;/p&gt;
&lt;p&gt;也就是說，如果你的圖形可以在 1x ms 畫完的話，就不需要做 double
buffering；但是如果你的圖形很複雜，你畫這個圖形需要 100ms，又是直接畫在
canvas
上，那可能就會出現半完成的圖形（我說可能的原因是不知道瀏覽器會不會自己做
optimization，等到一個 function 裡的事情都做完再一起
render，因為我之前的實驗使用 &lt;code&gt;setTimeout&lt;/code&gt; 來做，有可能不符合 browser
optimize 的策略？），在這種情況下就有可能會考慮做 double buffering
。另外還有一種情況就是像 &lt;a href="http://www.html5rocks.com/en/tutorials/canvas/performance/"&gt;這篇&lt;/a&gt; 所提到的，可以省略掉每次都要重新
render 複雜圖形的步驟，效能上會好很多。&lt;/p&gt;
&lt;p&gt;如果真的要做 double buffering 的話，
有些簡單的方法，我之前用的方法是用另外生一個 canvas，在上面畫完之後再用
drawImage 把 buffering canvas 畫到 display 用的 canvas
就好了，或是這邊還有 &lt;a href="http://stackoverflow.com/questions/2795269/does-html5-canvas-support-double-buffering"&gt;一個簡單的方法&lt;/a&gt; 可以參考看看。&lt;/p&gt;
&lt;p&gt;參考資料:&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/11777483/do-we-need-to-implement-double-buffering-ourselves-with-canvas"&gt;Do we need to implement double buffering ourselves with \&amp;lt;canvas&gt;?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.mail-archive.com/whatwg@lists.whatwg.org/msg19969.html"&gt;Re: [whatwg] Canvas size and double buffering.&lt;/a&gt;  &lt;/p&gt;</summary><category term="canvas"></category><category term="html5"></category></entry><entry><title>Java paintComponent paint duplicate</title><link href="http://blog.carlcarl.me/967/java-paintcomponent-paint-duplicate/" rel="alternate"></link><updated>2013-06-11T03:43:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-11:967/java-paintcomponent-paint-duplicate/</id><summary type="html">&lt;p&gt;之前寫 Java 的時候遇到的小問題，在實作 &lt;code&gt;JPanel&lt;/code&gt; 的 &lt;code&gt;paintComponent&lt;/code&gt;
時，發現怎麼畫完後會出現多餘的重複物件。&lt;/p&gt;
&lt;p&gt;後來找了一下資料，在 stackoverflow
發現&lt;a href="http://stackoverflow.com/questions/13773315/java-paintcomponent-paints-a-copy-of-the-top-gui-panel-for-no-apparent-reason"&gt;有人有一樣的問題&lt;/a&gt;。解決方法也很簡單，只要在 &lt;code&gt;paintComponent&lt;/code&gt;
一開始加上
&lt;code&gt;super.paintComponent(g);&lt;/code&gt;，可惜的是不懂為啥不呼叫的話會出現這樣的結果就是。&lt;/p&gt;</summary><category term="java"></category></entry><entry><title>PHP: Unable to allocate memory for pool</title><link href="http://blog.carlcarl.me/961/php-unable-to-allocate-memory-for-pool/" rel="alternate"></link><updated>2013-06-10T22:29:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-10:961/php-unable-to-allocate-memory-for-pool/</id><summary type="html">&lt;p&gt;其實本來一開始的問題是 nginx 突然出現 &lt;code&gt;404 bad gateway&lt;/code&gt;，後來去看 log
才發現這個錯誤，所以看來如果出現 bad gateway
的問題的話，可能就是跟後端的連線出了問題這樣。&lt;/p&gt;
&lt;p&gt;查了一下資料，發現到&lt;a href="http://www.cyberciti.biz/faq/linux-unix-php-warning-unable-to-allocate-memory-for-pool/"&gt;這篇&lt;/a&gt;說可能是 php apc
的關係，剛好我也有裝，於是跟著把 &lt;code&gt;apc.shm_size&lt;/code&gt; 調大之後並重開就 OK 了。&lt;/p&gt;
&lt;p&gt;不過老實說不能確定是因為重開，還是因為 cache
有調大的關係。可能之後還要再觀察看看，目前過了幾天，看起來是都沒問題這樣～～。&lt;/p&gt;</summary><category term="apc"></category><category term="nginx"></category><category term="php"></category></entry><entry><title>Python setup.py package_data permission</title><link href="http://blog.carlcarl.me/941/python-setup-py-package_data-permission/" rel="alternate"></link><updated>2013-06-10T02:12:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-10:941/python-setup-py-package_data-permission/</id><summary type="html">&lt;p&gt;最近嘗試把一些額外的 static 檔案加入到 python 的 package
裡來讓程式操作，後來有查到可以在 setup.py 裡設定
&lt;code&gt;package_data&lt;/code&gt;，照著做之後好像滿順利的，但是在用 root 權限 install
完，用一般使用者執行就遇到 permission 的錯誤了。&lt;/p&gt;
&lt;p&gt;看了一下安裝目錄下的 static 檔案，結果權限是 &lt;code&gt;400&lt;/code&gt;，owner 是
&lt;code&gt;root&lt;/code&gt;，難怪一般使用者無法讀取，想說會不會是因為我的原本檔案權限的關係，檢查了一下，果然是
&lt;code&gt;400&lt;/code&gt;，但是我改了權限再重新安裝居然還是一樣，這時我還想說會不會是原本就有這樣的限制，還查了一堆資料
orz。&lt;/p&gt;
&lt;p&gt;最後想到，會不會是因為我那些 build 所產生的目錄的關係，於是我把
&lt;code&gt;xxx.pkg-info&lt;/code&gt;，&lt;code&gt;build&lt;/code&gt; 和 &lt;code&gt;dist&lt;/code&gt;
這三個資料夾都移除掉後再重新安裝，果然就 OK 了 =.=。&lt;/p&gt;
&lt;p&gt;所以結論是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;setup.py 的 &lt;code&gt;package_data&lt;/code&gt;
    裡的檔案在安裝的時候會繼承你原來的檔案讀寫權限，只是用 root
    安裝的話，owner 和 group 會變。&lt;/li&gt;
&lt;li&gt;鬼打牆的時候，記得把那些 build 資料夾刪一刪。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前面在查資料的時候，看到在 &lt;a href="http://stackoverflow.com/questions/14861634/how-do-i-distribute-data-files-with-a-python-package-such-that-theyre-readable"&gt;stackoverflow&lt;/a&gt;
也有個人跟我有一樣的問題，後來就順便回了一下，不過不確定這樣是否能解決他的問題就是，而且也滿久以前發的了:P。&lt;/p&gt;</summary></entry><entry><title>JSLint note</title><link href="http://blog.carlcarl.me/897/jslint-note/" rel="alternate"></link><updated>2013-06-08T01:36:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-08:897/jslint-note/</id><summary type="html">&lt;p&gt;記錄一些錯誤的處理方式。&lt;/p&gt;
&lt;h3&gt;1. Document was used before it was defined&lt;/h3&gt;
&lt;p&gt;因為 JSLint 只是用來分析一般的 javascript code，像 &lt;code&gt;document&lt;/code&gt;
這種在瀏覽器上才有用的 global variable，就要在檔案開始加個宣告：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* jslint browser:true */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. This is an ES5 feature&lt;/h3&gt;
&lt;p&gt;比較新的
feature。在一些舊瀏覽器可能會有問題，如果不想管那些舊瀏覽器的話，簡單加上以下這樣就可解決：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* jslint es5: true */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Move the invocation into the parens that contain the function&lt;/h3&gt;
&lt;p&gt;改成用括弧將 function 和 參數 整個包起來就 OK 了，不過這部分不知道為啥
JSLint 要這樣做就是了 orz。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{})()&lt;/span&gt;
&lt;span class="c1"&gt;// 改成&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. Missing 'use strict' statement&lt;/h3&gt;
&lt;p&gt;在檔案 或 function 開頭加上下面這行即可。這個代表的是套用較嚴格的方式來
parse javascript，所以如果程式太亂寫的話，就會直接丟 exception
或是給你直接掛掉之類的，要注意。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5. The body of a for in should be wrapped in an if statement&lt;/h3&gt;
&lt;p&gt;會出現這個通常是因為你用以下的方式跑迴圈：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你需要改成如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// do something&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 或者是&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一種之所以會需要加上 &lt;code&gt;if&lt;/code&gt; 的檢查是因為 &lt;code&gt;for in&lt;/code&gt; 的方式會連 &lt;code&gt;prototype&lt;/code&gt;
裡的 attirbute 也會被走到，加上 &lt;code&gt;hasOwnProperty&lt;/code&gt;
可以避免這個問題。但是如果是直接 assign 的 attribute
的話，還是會被走到，要防止這種問題，用第二種方法會是比較一勞永逸的方式。&lt;/p&gt;
&lt;h3&gt;6. Unexpected 'continue'&lt;/h3&gt;
&lt;p&gt;連 &lt;code&gt;continue&lt;/code&gt; 也不給用，也太龜毛，現在就先無視吧
XD。如果硬要解的話，因為 &lt;code&gt;continue&lt;/code&gt; 通常會在某個 &lt;code&gt;if&lt;/code&gt; 底下，例如這樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yyy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時就可以改成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;yyy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// do something&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他還有一些比較複雜的組合，如果解不了的話，就選擇無視吧～～。&lt;/p&gt;
&lt;h3&gt;7. JSLint: Using a function before it's defined error function&lt;/h3&gt;
&lt;p&gt;可以調位置的話就調調看，如果有交互參考的話，就看實際執行是否會有問題，沒有的話也可以考慮不用理這樣。&lt;/p&gt;
&lt;h3&gt;8. unexpected ++&lt;/h3&gt;
&lt;p&gt;就乖乖改用 &lt;code&gt;+= 1&lt;/code&gt; 吧(炸)，用 &lt;code&gt;++&lt;/code&gt; 明明應該很 OK 的啊，我也不曉得 JSLint
在想啥。&lt;/p&gt;
&lt;p&gt;參考資料：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10766201/how-to-rectify-document-was-used-before-it-was-defined-using-jslint"&gt;http://stackoverflow.com/questions/10766201/how-to-rectify-document-was-used-before-it-was-defined-using-jslint&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://jslinterrors.com/this-is-an-es5-feature/"&gt;http://jslinterrors.com/this-is-an-es5-feature/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4979252/jslint-error-move-the-invocation-into-the-parens-that-contain-the-function"&gt;http://stackoverflow.com/questions/4979252/jslint-error-move-the-invocation-into-the-parens-that-contain-the-function&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/1450721/solution-for-jslint-errors"&gt;http://stackoverflow.com/questions/1450721/solution-for-jslint-errors&lt;/a&gt;
&lt;a href="http://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it"&gt;http://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1963102/what-does-the-jslint-error-body-of-a-for-in-should-be-wrapped-in-an-if-statemen"&gt;http://stackoverflow.com/questions/1963102/what-does-the-jslint-error-body-of-a-for-in-should-be-wrapped-in-an-if-statemen&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/6071762/unexpected-continue"&gt;http://stackoverflow.com/questions/6071762/unexpected-continue&lt;/a&gt;
&lt;a href="http://stackoverflow.com/questions/806163/jslint-using-a-function-before-its-defined-error"&gt;http://stackoverflow.com/questions/806163/jslint-using-a-function-before-its-defined-error&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/3000276/the-unexpected-error-in-jslint"&gt;http://stackoverflow.com/questions/3000276/the-unexpected-error-in-jslint&lt;/a&gt;&lt;/p&gt;</summary><category term="jslint"></category></entry><entry><title>brew install Macvim</title><link href="http://blog.carlcarl.me/893/brew-install-macvim/" rel="alternate"></link><updated>2013-06-07T19:56:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-07:893/brew-install-macvim/</id><summary type="html">&lt;p&gt;單純小筆記一下，因為每次重裝都會忘記 XDD，放在自己 blog，以後比較好查。&lt;/p&gt;
&lt;p&gt;如果只單純下 &lt;code&gt;brew install macvim&lt;/code&gt; 的話，原本的 vim 還是會留著，如果想用
Macvim 裡的 vim 的話，你可能會想說移掉原本的 vim，然後用 &lt;code&gt;ln -s&lt;/code&gt;，來建個
link 就好，不過實際做是不行的，會出現一些
error，如：&lt;code&gt;E254: Cannot allocate color&lt;/code&gt;，解決方法很簡單，就是下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install macvim --override-system-vim
brew linkapps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就會把原本的 vim 幹掉，直接套用 Macvim 裡的。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://apple.stackexchange.com/questions/14299/replaced-usr-bin-vim-now-i-get-error-messages"&gt;http://apple.stackexchange.com/questions/14299/replaced-usr-bin-vim-now-i-get-error-messages&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://apple.stackexchange.com/questions/59375/how-do-i-install-macvim"&gt;http://apple.stackexchange.com/questions/59375/how-do-i-install-macvim&lt;/a&gt;&lt;/p&gt;</summary><category term="brew"></category><category term="macvim"></category></entry><entry><title>Ubuntu nginx pagespeed module</title><link href="http://blog.carlcarl.me/879/ubuntu-nginx-pagespeed-module/" rel="alternate"></link><updated>2013-06-03T21:25:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-03:879/ubuntu-nginx-pagespeed-module/</id><summary type="html">&lt;p&gt;Ubuntu 版本：12.04 Nginx 版本：1.4.1 pagespeed 版本：1.5.27.3
記錄一下安裝的步驟：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 到 home 目錄下做，看個人習慣就是&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~
&lt;span class="c"&gt;# add-apt-repository 這個指令需要裝 python-software-properties&lt;/span&gt;
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
&lt;span class="c"&gt;# 下載 nginx source code&lt;/span&gt;
sudo apt-get &lt;span class="nb"&gt;source &lt;/span&gt;nginx
&lt;span class="c"&gt;# 裝 build nginx 需要的套件&lt;/span&gt;
sudo apt-get build-dep nginx
&lt;span class="c"&gt;# 裝 pagespeed 需要的套件&lt;/span&gt;
sudo apt-get install build-essential zlib1g-dev libpcre3 libpcre3-dev

&lt;span class="c"&gt;# 下載 pagespeed&lt;/span&gt;
wget https://github.com/pagespeed/ngx_pagespeed/archive/release-1.5.27.3-beta.zip
unzip release-1.5.27.3-beta.zip
&lt;span class="nb"&gt;cd &lt;/span&gt;ngx_pagespeed-release-1.5.27.3-beta/
wget https://dl.google.com/dl/page-speed/psol/1.5.27.3.tar.gz
tar -xzvf 1.5.27.3.tar.gz
 
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/nginx-1.4.1/
&lt;span class="c"&gt;# 我會需要用到 https，所以加上 --with-http_ssl_module&lt;/span&gt;
./configure --add-module&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/ngx_pagespeed-release-1.5.27.3-beta --with-http_ssl_module
make
sudo make install
 
&lt;span class="c"&gt;# 建個 link。也可以 link 到別的位置，不過記得下面 init sctipt 中的 DAEMON 的位置要跟著改&lt;/span&gt;
sudo ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果在之前有裝過 nginx 的話，在 &lt;code&gt;/etc/init.d/&lt;/code&gt; 底下應該有個 nginx 的
init script，我是直接用這個，不過還要加點修改：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# DAEMON 改成這樣&lt;/span&gt;
&lt;span class="n"&gt;DAEMON&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sbin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著修改 &lt;code&gt;/usr/local/nginx/conf/nginx.conf&lt;/code&gt;：（這邊是因為我在 configure
的時候沒有另外指定位置，所以在這裡）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# pid 改成這樣，以對應到 init script 中的設定，不然不能 restart 和 stop
pid /var/run/nginx.pid;
...
http {
    # 加上這兩行以啟用 pagespeed
    pagespeed on;
    pagespeed FileCachePath /var/ngx_pagespeed_cache;
...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著編輯每個 virtualhost 的 conf：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;server {
...
    # 加上以下幾行
    location ~ &amp;quot;\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+&amp;quot; { add_header &amp;quot;&amp;quot; &amp;quot;&amp;quot;; }
    location ~ &amp;quot;^/ngx_pagespeed_static/&amp;quot; { }
    location ~ &amp;quot;^/ngx_pagespeed_beacon$&amp;quot; { }
    location /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }
    location /ngx_pagespeed_message { allow 127.0.0.1; deny all; }
...
}
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新增 &lt;code&gt;/var/ngx_pagespeed_cache&lt;/code&gt; 這個資料夾，並讓 nginx
有寫入的權限。這個資料夾是讓 pagespeed 放 cache 用的，視情況可以考慮放在
&lt;code&gt;/dev/shm/&lt;/code&gt; 底下加快速度，不過我自己是還沒試過就是 :P。這邊我的 nginx
是用 &lt;code&gt;www-data&lt;/code&gt;，如以下操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir /var/ngx_pagespeed_cache
sudo chown www-data:www-data /var/ngx_pagespeed_cache
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;啟動 nginx:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service nginx start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著放個網頁並試試看以下指令，有的話就代表成功了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl -I -p 你的網址 | grep X-Page-Speed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上是基本的安裝，pagespeed
還有提供很多設定，要指定才會有效，之後有空再另外寫一篇補完。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="https://github.com/pagespeed/ngx_pagespeed"&gt;https://github.com/pagespeed/ngx_pagespeed&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://serverfault.com/questions/502764/how-to-build-nginx-1-4-0-and-ngx-pagespeed-in-ubuntu-debian"&gt;http://serverfault.com/questions/502764/how-to-build-nginx-1-4-0-and-ngx-pagespeed-in-ubuntu-debian&lt;/a&gt;
&lt;a href="http://serverfault.com/questions/180808/how-to-get-latest-nginx-using-apt-ubuntu"&gt;http://serverfault.com/questions/180808/how-to-get-latest-nginx-using-apt-ubuntu&lt;/a&gt;
&lt;a href="https://www.digitalocean.com/community/articles/how-to-install-the-latest-version-of-nginx-on-ubuntu-12-10"&gt;https://www.digitalocean.com/community/articles/how-to-install-the-latest-version-of-nginx-on-ubuntu-12-10&lt;/a&gt;
&lt;a href="http://blog.linuxeye.com/318.html"&gt;http://blog.linuxeye.com/318.html&lt;/a&gt;&lt;/p&gt;</summary><category term="nginx"></category><category term="pagespeed"></category><category term="ubuntu"></category></entry><entry><title>Ubuntu service can't restart or stop</title><link href="http://blog.carlcarl.me/873/ubuntu-service-cant-restart-or-stop/" rel="alternate"></link><updated>2013-06-03T11:48:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-03:873/ubuntu-service-cant-restart-or-stop/</id><summary type="html">&lt;p&gt;在自己編 nginx 的時候遇到的小問題，因為自己裝的 conf 設定和原本 Ubuntu
repo 裡的的不一樣，然後 init script 我是用 repo 裡提供的。&lt;/p&gt;
&lt;p&gt;看了一下 repo 提供的 init script，似乎是因為找不到 start service 所建立的
pid 檔案，google 了一下，在 stackoverflow
找到 &lt;a href="http://stackoverflow.com/questions/10939072/add-nginx-as-a-ubuntu-service-stop-and-reload-doesnt-work"&gt;這篇問題&lt;/a&gt; 剛好和我遇到的情況一樣，check 了一下 nginx conf 裡的 pid
檔案位置和 init script 裡的 pid
檔案位置，發現設定並不一樣，改成一樣後，問題就解決了～～。&lt;/p&gt;</summary><category term="nginx"></category><category term="ubuntu"></category></entry><entry><title>Python decorate method inside class</title><link href="http://blog.carlcarl.me/865/python-decorate-method-inside-class/" rel="alternate"></link><updated>2013-06-02T04:45:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-06-02:865/python-decorate-method-inside-class/</id><summary type="html">&lt;p&gt;簡易版的可以直接參考
&lt;a href="http://stackoverflow.com/questions/1367514/how-to-decorate-a-method-inside-a-class"&gt;http://stackoverflow.com/questions/1367514/how-to-decorate-a-method-inside-a-class&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;以我的例子來說，我需要對某些 method 加上 retry
的機制，除了需要有參數外，還希望能夠把 decorate method 放在 class
裡頭，這樣我才能呼叫 class 裡頭另外的 method。以下是簡單的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco_retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# f is the method decorated&lt;/span&gt;
            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f_retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f_retry&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;deco_retry&lt;/span&gt;

    &lt;span class="nd"&gt;@retry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;卡住的原因是因為不知道 &lt;code&gt;retry&lt;/code&gt; 裡的 &lt;code&gt;self&lt;/code&gt;
要從哪邊傳進來。而從上面的程式來看，整個參數傳遞的順序應該是：&lt;br /&gt;
1. Arguments(from decorate method)&lt;br /&gt;
2. decorated method&lt;br /&gt;
3. Arguments(from decorated method)&lt;/p&gt;
&lt;p&gt;第三個部分也就是 &lt;code&gt;f_retry&lt;/code&gt;，&lt;code&gt;self&lt;/code&gt; 會在這邊傳進來，因為它也是 &lt;code&gt;request&lt;/code&gt;
的參數，所以後來想想其實也滿合理的就是。&lt;/p&gt;</summary><category term="class"></category><category term="decorate"></category><category term="python"></category></entry><entry><title>Python: can't use a string pattern on a bytes-like object</title><link href="http://blog.carlcarl.me/852/python-cant-use-a-string-pattern-on-a-bytes-like-object/" rel="alternate"></link><updated>2013-05-23T16:25:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-05-23:852/python-cant-use-a-string-pattern-on-a-bytes-like-object/</id><summary type="html">&lt;p&gt;最近嘗試將 Python2 的程式轉成
Python3，看起來好像很順利，不過在執行的時候就出現了 Excepion
囧，內容就是
&lt;code&gt;can't use a string pattern on a bytes-like object&lt;/code&gt;，看了一下，是 &lt;code&gt;json&lt;/code&gt;
的 &lt;code&gt;loads&lt;/code&gt; 在轉&lt;code&gt;httplib&lt;/code&gt; &lt;code&gt;read&lt;/code&gt; 的 output 出現問題，而原來在 Python2
中並不會出現這個問題，原來程式如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_connect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getresponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;後來查了一下資料才發現，這邊的 &lt;code&gt;read&lt;/code&gt;，似乎讀出的資料是 &lt;code&gt;byte&lt;/code&gt; 的
type，還需要做 encode 才行，所以後來加上 encode utf-8 之後，在 Python2
和 Python3 測試就都 OK 了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_connect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getresponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10846112/use-byte-like-object-from-urlopen-read-with-json"&gt;http://stackoverflow.com/questions/10846112/use-byte-like-object-from-urlopen-read-with-json&lt;/a&gt;&lt;/p&gt;</summary><category term="encode"></category><category term="httplib"></category><category term="json"></category><category term="python"></category></entry><entry><title>Linux kernel space get time interval</title><link href="http://blog.carlcarl.me/838/linux-kernel-space-get-time-interval/" rel="alternate"></link><updated>2013-04-27T00:23:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-04-27:838/linux-kernel-space-get-time-interval/</id><summary type="html">&lt;p&gt;之前聽到可以用 &lt;code&gt;jiffies&lt;/code&gt;
來抓時間，可是我自己測的結果是前後抓的時間會都一樣囧。查了一下
stackoverflow，也有&lt;a href="http://stackoverflow.com/questions/4655711/measuring-execution-time-of-a-function-inside-linux-kernel"&gt;一個遇到一樣的問題&lt;/a&gt;，我猜可能 &lt;code&gt;jiffies&lt;/code&gt; 也是用
period update 的方式做更新，由於中間測量的 function
太快，導致來不及更新就拿到了一樣的值這樣。而在下面的回答中看到可以用
&lt;code&gt;do_gettimeofday()&lt;/code&gt; 來抓時間區間，簡單範例如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;linux/time.h&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;do_gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Do something here&lt;/span&gt;
&lt;span class="n"&gt;do_gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get milliseconds &lt;/span&gt;
&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_usec&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_usec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%lu msn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外也可以用 &lt;code&gt;getnstimeofday()&lt;/code&gt;，可以取到 nano second，至於
&lt;code&gt;gettimeofday()&lt;/code&gt; 則是 user space 的
function，故在這裡不考慮。ftrace 感覺好像很威，不過需要調設定，之後有機會再來試試看。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://www.makelinux.net/ldd3/chp-7-sect-1"&gt;http://www.makelinux.net/ldd3/chp-7-sect-1&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/10885685/jiffies-how-to-calculate-seconds-elapsed"&gt;http://stackoverflow.com/questions/10885685/jiffies-how-to-calculate-seconds-elapsed&lt;/a&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="time"></category></entry><entry><title>popen check empty</title><link href="http://blog.carlcarl.me/835/popen-check-empty/" rel="alternate"></link><updated>2013-04-26T20:31:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-04-26:835/popen-check-empty/</id><summary type="html">&lt;p&gt;最近常在用 &lt;code&gt;popen&lt;/code&gt; 呼叫系統指令，並讀取執行的結果作判斷，而有時候會有想確認內容是否會為空的需求，因為 popen return 的是一個 file descriptor，本來想說能不能用 &lt;code&gt;ftell&lt;/code&gt;
找出大小來做判斷，不過&lt;a href="http://stackoverflow.com/questions/7705338/ftell-function-giving-1-in-c-for-stdout"&gt;後來證明不行&lt;/a&gt;，pipe 跟一般的檔案還是有差別。&lt;/p&gt;
&lt;p&gt;找了一堆資料，後來只想到用 &lt;code&gt;fgetc&lt;/code&gt; 來讀，再用讀不讀得到值作為判斷 orz，不知道有沒有其他更好的解法就是。&lt;/p&gt;</summary><category term="popen"></category></entry><entry><title>appfog deploy pyramid</title><link href="http://blog.carlcarl.me/827/appfog-deploy-pyramid/" rel="alternate"></link><updated>2013-04-14T23:45:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-04-14:827/appfog-deploy-pyramid/</id><summary type="html">&lt;p&gt;這篇是參考
&lt;a href="http://antoineleclair.ca/2012/08/28/deploying-a-pyramid-app-on-appfog/"&gt;http://antoineleclair.ca/2012/08/28/deploying-a-pyramid-app-on-appfog/&lt;/a&gt;
這篇所講的，其實他講的就差不多了，但是漏掉了一些細節，所以幫忙補完一下。  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.appfog.com/"&gt;appfog&lt;/a&gt; 的 deploy 相對 &lt;a href="https://www.openshift.com/"&gt;openshift&lt;/a&gt; 來說，算是簡單很多 (不過
openshift 也有一堆 quickstart 的 github repo 可以直接用就是)，以
&lt;a href="http://www.pylonsproject.org/"&gt;pyramid&lt;/a&gt; 來講，主要就是在 project 根目錄新增一個 &lt;code&gt;wsgi.py&lt;/code&gt;
的檔案，內容引用文章連結內的程式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;paste.deploy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;loadapp&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;python setup.py develop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loadapp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;config:appfog.ini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;relative_to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程式的執行就從這個檔案開始，&lt;code&gt;appfog.ini&lt;/code&gt; 其實就是原本的
&lt;code&gt;development.ini&lt;/code&gt; 和 &lt;code&gt;production.ini&lt;/code&gt;，看有沒有需要另外新增一個檔案針對
appfog 使用，不然用原本的兩個設定檔也是可以。&lt;/p&gt;
&lt;p&gt;接下來這段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;appfog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;appfog_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;engine_from_config&lt;/span&gt;
    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engine_from_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sqlalchemy.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊 settings 拿 appfog 可以拿到值是因爲他在 &lt;code&gt;appfog.ini&lt;/code&gt; 裏，加上了
&lt;code&gt;appfog=true&lt;/code&gt;，所以這邊也要記得。&lt;/p&gt;
&lt;p&gt;大致比較要注意的就是這些，另外還有 &lt;code&gt;requirements.txt&lt;/code&gt; 要弄，DB
設定的部分就從 &lt;code&gt;os.getenv("VCAP_SERVICES")&lt;/code&gt;裏去讀取就 OK 了。&lt;/p&gt;
&lt;p&gt;另外這個是那篇文章作者的 &lt;a href="https://github.com/antoineleclair/OpenCode20121030/tree/master/shout"&gt;appfog repo&lt;/a&gt;，也可以參考看看。&lt;/p&gt;</summary><category term="appfog"></category><category term="pyramid"></category><category term="python"></category></entry><entry><title>Python Pyramid jsonp</title><link href="http://blog.carlcarl.me/819/python-pyramid-jsonp/" rel="alternate"></link><updated>2013-04-09T13:35:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-04-09:819/python-pyramid-jsonp/</id><summary type="html">&lt;p&gt;Python 的 Pyramid Framework 有支援 jsonp 的 renderer，看了一下
doc，設置還算簡單，不過好像漏了個小地方。  &lt;/p&gt;
&lt;p&gt;首先要先在 &lt;code&gt;Configurator&lt;/code&gt; 的檔案加入下面內容 (官方 doc 裡面沒提到要從哪邊
 &lt;code&gt;import JSONP&lt;/code&gt;)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.renderers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONP&lt;/span&gt;
&lt;span class="c"&gt;# 這裡使用 &amp;#39;callback&amp;#39; 當作預設的 callback function 名稱&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_renderer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jsonp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSONP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;callback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後在 view 裡面將 &lt;code&gt;renderer&lt;/code&gt; 改用 &lt;code&gt;jsonp&lt;/code&gt;，這邊你還是可以加上 &lt;code&gt;route_name&lt;/code&gt;
等參數：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@view_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jsonp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就完成了～～。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.pylonsproject.org/projects/pyramid/en/latest/api/renderers.html"&gt;http://docs.pylonsproject.org/projects/pyramid/en/latest/api/renderers.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://irclogs.rulim.de/%23pyramid/%23pyramid.2012-06-15.log.html"&gt;http://irclogs.rulim.de/%23pyramid/%23pyramid.2012-06-15.log.html&lt;/a&gt;&lt;/p&gt;</summary><category term="jsonp"></category><category term="pyramid"></category></entry><entry><title>ajax with mobile keyboard go button</title><link href="http://blog.carlcarl.me/813/ajax-with-mobile-keyboard-go-button/" rel="alternate"></link><updated>2013-04-07T22:58:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-04-07:813/ajax-with-mobile-keyboard-go-button/</id><summary type="html">&lt;p&gt;最近弄 ajax 在手機上測的時候發現按 keyboard 上的 go 按鈕不會自動
submit，所以看了一下是怎麼回事。找了一些資料加上自己測試了一下，發現原來
go 按鈕跟 enter 是一樣的 event。&lt;/p&gt;
&lt;p&gt;我最後決定的做法是將原本 ajax 要 submit 的 部分先用 form tag
包起來，ajax 的按鈕則改成 &lt;code&gt;&amp;lt;button type="submit"&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;，&lt;code&gt;type&lt;/code&gt; 用
&lt;code&gt;submit&lt;/code&gt; 可以使得在按 enter 或是 手機上按 go 的時候能 trigger submit 的
event，這邊用 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 也是可以，不過因為我有用一些 icon 在按鈕中，用
button tag 相對比較好做。再來就是註冊 form tag 的 event，用 jQuery
來說就是 &lt;code&gt;$('#myform').submit(myfunction);&lt;/code&gt;，接著在 &lt;code&gt;myfunction&lt;/code&gt;
中記得最後要 &lt;code&gt;return false;&lt;/code&gt;，以避免真的 submit 頁面上去。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/1960240/jquery-ajax-submit-form"&gt;http://stackoverflow.com/questions/1960240/jquery-ajax-submit-form&lt;/a&gt;&lt;/p&gt;</summary><category term="ajax"></category><category term="mobile"></category></entry><entry><title>git cross firewall</title><link href="http://blog.carlcarl.me/808/git-cross-firewall/" rel="alternate"></link><updated>2013-03-17T23:33:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-03-17:808/git-cross-firewall/</id><summary type="html">&lt;p&gt;&lt;code&gt;git://&lt;/code&gt; readonly 的 port 是使用
9418，雖然速度較快，但是也容易被防火牆擋掉，查了一下資料，發現一個不錯的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config --global url.&lt;span class="s2"&gt;&amp;quot;https://&amp;quot;&lt;/span&gt;.insteadOf git://
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;輸入以上指令就可以把 git 開頭的自動轉爲 https
協定的了，自然就不會無緣無故被擋掉。那爲什麼不直接一開始就改掉就好呢？以我的例子來說，如果我抓了一個別人的
git repo，裏面包含 submodule，且是
&lt;code&gt;git://&lt;/code&gt;，因爲我沒辦法直接改他的設定，這時就可以考慮這樣用。&lt;/p&gt;
&lt;p&gt;設定的部分存在 &lt;code&gt;~/.gitconfig&lt;/code&gt;，不需要的話可以直接從這邊拿掉。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4891527/git-protocol-blocked-by-company-how-can-i-get-around-that"&gt;http://stackoverflow.com/questions/4891527/git-protocol-blocked-by-company-how-can-i-get-around-that&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>OSX svn checkout fail</title><link href="http://blog.carlcarl.me/799/osx-svn-checkout-fail/" rel="alternate"></link><updated>2013-03-13T15:36:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-03-13:799/osx-svn-checkout-fail/</id><summary type="html">&lt;p&gt;在 OSX 上 checkout svn 的 repo 遇到了 error，跟我說 .svn
底下少了某個檔案，後來才發現有兩個同樣名稱的檔案，只是大小寫不一樣，看來好像是因為
OSX 的檔案系統預設大小寫視為一樣的。如果要解決這個問題除了換個名稱，要不然就是做個
case sensitive 的 image mount 上去，指令如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 建立 image 檔案&lt;/span&gt;
hdiutil create -size 100m -fs &lt;span class="s2"&gt;&amp;quot;Case-sensitive HFS+&amp;quot;&lt;/span&gt; -volname xxx xxx.dmg
&lt;span class="c"&gt;# size 後面的參數表示 image 大小&lt;/span&gt;
&lt;span class="c"&gt;# volname 後面的參數表示掛載後的名稱&lt;/span&gt;
&lt;span class="c"&gt;# xxx.dmg 是 image 檔案的名稱&lt;/span&gt;

&lt;span class="c"&gt;# 掛載 image 檔案&lt;/span&gt;
hdiutil attach xxx.dmg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著就可以在 &lt;code&gt;/Volumes/&lt;/code&gt; 底下看到剛才掛上去的 image 資料夾。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/2986786"&gt;http://stackoverflow.com/questions/2986786&lt;/a&gt;&lt;/p&gt;</summary><category term="svn"></category><category term="mac"></category></entry><entry><title>KDE dolphin network folder ssh fail</title><link href="http://blog.carlcarl.me/794/kde-dolphin-network-folder-ssh-fail/" rel="alternate"></link><updated>2013-02-28T02:02:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-02-28:794/kde-dolphin-network-folder-ssh-fail/</id><summary type="html">&lt;p&gt;鬼打牆的小問題，感覺比較像 bug ，想說還是筆記下來好了。&lt;/p&gt;
&lt;p&gt;解決方法：&lt;br /&gt;
把 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; 中，找到要連線的 host 那行，然後把那行刪掉，
dolphin 這邊再重連就能夠連上了。&lt;/p&gt;
&lt;p&gt;參考連結：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://superuser.com/questions/299940/kubuntu-cant-add-new-ssh-network-folder"&gt;http://superuser.com/questions/299940/kubuntu-cant-add-new-ssh-network-folder&lt;/a&gt;&lt;/p&gt;</summary><category term="dolphin"></category><category term="ssh"></category></entry><entry><title>bootstrap input align</title><link href="http://blog.carlcarl.me/788/bootstrap-input-align/" rel="alternate"></link><updated>2013-02-22T03:07:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-02-22:788/bootstrap-input-align/</id><summary type="html">&lt;p&gt;使用 bootstrap 的 input element 的時候遇到 text 和 button
位置不齊的情況，去 stackoverflow 找了一下就看到&lt;a href="http://stackoverflow.com/questions/10615872/bootstrap-align-input-with-button"&gt;解決的辦法&lt;/a&gt;了：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-horizontal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;簡單說就是在外面那層加上 &lt;code&gt;form-horizontal&lt;/code&gt; 這個 class 屬性，另外
&lt;code&gt;input-append&lt;/code&gt; 雖然也可以達到類似的效果，不過由於 input element
會貼在一起，所以不建議用。&lt;/p&gt;</summary><category term="bootstrap"></category><category term="css"></category></entry><entry><title>vim syntastic disable html check</title><link href="http://blog.carlcarl.me/785/vim-syntastic-disable-html-check/" rel="alternate"></link><updated>2013-02-22T02:58:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-02-22:785/vim-syntastic-disable-html-check/</id><summary type="html">&lt;p&gt;最近在用 vim 修改 html 的時候會在儲存的時候爛掉，後來發現好像是
&lt;a href="https://github.com/scrooloose/syntastic"&gt;syntastic&lt;/a&gt; 的問題，而且只有 html 會有這個問題，所以看了一下有沒有關掉
html check 的設定，後來在 stackoverflow 看到&lt;a href="http://stackoverflow.com/questions/12215710/how-to-invalid-syntastic-check-for-html-file-with-vim"&gt;解答&lt;/a&gt;：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;let g:syntastic_mode_map={ &amp;#39;mode&amp;#39;: &amp;#39;active&amp;#39;,
                      &amp;#39;active_filetypes&amp;#39;: [],
                      &amp;#39;passive_filetypes&amp;#39;: [&amp;#39;html&amp;#39;] }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將以上內容複製到 &lt;code&gt;.vimrc&lt;/code&gt; 內即可。&lt;/p&gt;</summary><category term="syntastic"></category><category term="vim"></category></entry><entry><title>python argparse</title><link href="http://blog.carlcarl.me/772/python-argparse/" rel="alternate"></link><updated>2013-01-29T16:50:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-01-29:772/python-argparse/</id><summary type="html">&lt;p&gt;紀錄一些 python argparse module 的使用方法和問題：  &lt;/p&gt;
&lt;h3&gt;選項的參數為 optional&lt;/h3&gt;
&lt;p&gt;譬如說 &lt;code&gt;-f&lt;/code&gt; 這選項允許一個檔案的路徑名稱： &lt;code&gt;-f test.txt&lt;/code&gt;，如果沒給檔案名稱就預設使用 example.txt：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定各個選項分開，不允許放在一起使用&lt;/h3&gt;
&lt;p&gt;如果我希望 &lt;code&gt;-f&lt;/code&gt; 和 &lt;code&gt;-b&lt;/code&gt; 只有其中一個能被執行而已的話，這時候要用 &lt;code&gt;add_mutually_exclusive_group&lt;/code&gt; 產生一個 group ，之後被加入這個 group 的參數就會套用這個分開使用的規則：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_mutually_exclusive_group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;同上，如果我還想要 &lt;code&gt;-f&lt;/code&gt; 的選項再另外綁定一個參數 &lt;code&gt;-u&lt;/code&gt; 的話(就是 &lt;code&gt;-f&lt;/code&gt; 一定要加上 &lt;code&gt;-u&lt;/code&gt; 的意思)&lt;/h3&gt;
&lt;p&gt;這個部份我查了很久，不過似乎找不太到解決的方法，所以我後來改套用 &lt;a href="http://docs.python.org/2/library/argparse.html#sub-commands"&gt;subcommand&lt;/a&gt; 的作法來實現，然後將原本的第一個選項改成用單字的方式來呈現，例如 &lt;code&gt;test -f&lt;/code&gt; 改成 &lt;code&gt;test file&lt;/code&gt; ，簡單說就是像 svn 和 git 的作法。&lt;/p&gt;
&lt;h3&gt;怎麼判斷現在是呼叫哪個 subcommand?&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;add_subparsers&lt;/code&gt; 的參數裡，指定 &lt;code&gt;dest&lt;/code&gt; 的值, dest 的值給什麼都可以，不過這樣的話，程式下面的 &lt;code&gt;args.command&lt;/code&gt; 中的 &lt;code&gt;command&lt;/code&gt; 也要改成對應的值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;subparsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subparsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;command&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://docs.python.org/2/library/argparse.html"&gt;http://docs.python.org/2/library/argparse.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.doughellmann.com/PyMOTW/argparse/"&gt;http://www.doughellmann.com/PyMOTW/argparse/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4480075/argparse-optional-positional-arguments"&gt;http://stackoverflow.com/questions/4480075/argparse-optional-positional-arguments&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/8250010/argparse-identify-which-subparser-was-used"&gt;http://stackoverflow.com/questions/8250010/argparse-identify-which-subparser-was-used&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/7869345/how-to-make-python-argparse-mutually-exclusive-group-arguments-without-prefix"&gt;http://stackoverflow.com/questions/7869345/&lt;/a&gt;&lt;/p&gt;</summary><category term="argparse"></category></entry><entry><title>python logging</title><link href="http://blog.carlcarl.me/759/python-logging/" rel="alternate"></link><updated>2013-01-28T15:08:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-01-28:759/python-logging/</id><summary type="html">&lt;p&gt;紀錄一下 python logging 的一些簡單設定。  &lt;/p&gt;
&lt;h3&gt;可以在一開始設定 log 訊息顯示的等級：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定顯示的訊息格式, ex: &lt;code&gt;ERROR: error message&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;log message 加上變數&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The value is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有人可能會想用另外一個較基本的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The value is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是這種方法，就會變成不管 log 不 log，都會執行組合字串的動作，所以並不建議，這邊可以參考 &lt;a href="http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format"&gt;stackoverflow&lt;/a&gt; 上的討論。&lt;/p&gt;</summary><category term="logging"></category></entry><entry><title>WebConf 2013</title><link href="http://blog.carlcarl.me/742/webconf-2013/" rel="alternate"></link><updated>2013-01-20T23:25:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-01-20:742/webconf-2013/</id><summary type="html">&lt;p&gt;&lt;img alt="http://i.imgur.com/jDquPl.jpg" src="http://i.imgur.com/jDquPl.jpg" title="Hosted by imgur.com" /&gt;&lt;/p&gt;
&lt;p&gt;最近這一年開始參加這類的 conf，而這次的 WebConf
也不例外啦，本來在去年年底就有在關注這個 conf
了，無奈開始賣票的時候我正在軍中新訓，當新訓結束的時候才發現票已經售完了囧。所幸後來同學那邊有多買一張賣我，我後來才有這個機會能夠參加這次的
WebConf。(這次的 WebConf 官方網站作得還滿不錯的，再加上這背景樣式，個人還滿喜歡的:P)  &lt;/p&gt;
&lt;p&gt;這次的議程分為兩天三軌，不過大部分的場次都有決定好了，不外乎就是~~正妹先決模式~~選擇涉獵較多方面的領域，以擴充所學，增廣見聞。不過也可惜因此錯過了幾場想聽的主題，像是
TonyQ 的「網站效能調整」，感覺上就滿實用的，後來也有去找 slide
來看；「敏捷 Web 開發之 Python 工具菜單」這場也沒有聽到，後來看了一下相片，似乎聽的人不多，可能是因為~~打對台的講者太強大了~~大家聽一整天程式相關的議題都累了，所以都想聽聽其他領域的分享吧。&lt;/p&gt;
&lt;p&gt;「在家也能架出好網站」是我覺得很實用的主題，我後來也有把這份 slide
轉給別人看（雖然我個人還是比較喜歡建在 PaaS
上就是了）；「打造愛料理開發及營運團隊」之前有聽過他們的團隊有類似同樣議題的分享，感覺他們相當會選擇適合自己需求的工具，這點我還滿佩服的，不過似乎大部分的服務都要錢啊（汗）。至於
Lighting talk 的部份，很多也都滿有趣的，像是「國內雲端主機 VPS
經驗談」，在 FB 和噗浪上似乎迴響還不錯（可見大家都還滿關心國內的雲端服務），而且這次大家的時間掌控都很不錯，幾乎都是準時結束，還滿意外的XD。&lt;/p&gt;
&lt;p&gt;另外這次有幾個攤位有設計出一些題目來讓參加者可以答題拿獎品或是抽獎之類的，我覺得還滿有趣的。SITCON 出的題目像是 wargame
的形式，不過除了第一題以外，後面的我都不會XDDDD，不過還好我有把握一開始的時候先答了第一題，所以有拿到了 SITCON 的 VIP 報名序號～～。另外一個是 PIXNET 的 API 程式實作，不過不像
SITCON 的題目是當天才出，PIXNET 的題目在前一天我就有看到了，總共有五題，每一題答對可多一張抽獎卷，我在前一天花了三個小時把其中四個題目寫一寫（其實好像花了有點長的時間
orz），最後一題 OpenID 後來就懶得寫了，因為我看到題目的時候已經是半夜十二點了（炸），寫完四題已經半夜三點，就想說睡覺不管了XD。後來在第二天的抽獎也成功的抽到了獎品：PIXNET
的吉祥物玩偶。&lt;br /&gt;
&lt;img alt="PIXNET 吉祥物" src="http://i.imgur.com/0gXmZ23l.jpg" /&gt;&lt;br /&gt;
然後這幾天剛好比較有空，就把這幾支程式打包丟到 github
上面，連結：&lt;a href="https://github.com/carlcarl/WebConf2013-PIXNET-code" title="WebConf2013-PIXNET-code"&gt;WebConf2013-PIXNET-code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;總結來說，我還滿喜歡這次的 WebConf
的，雖然是第一次舉辦，但是兩天下來我覺得品質還滿不錯的，一些小缺點像是"場次間隔時間有點趕"之類的希望之後能夠有改進囉，也希望之後還能有下一次的
WebConf。感謝這次辛苦的主辦人以及其他工作人員！&lt;/p&gt;</summary><category term="WebConf"></category></entry><entry><title>Another plugin set completefunc! Disabled neocomplcache</title><link href="http://blog.carlcarl.me/738/another-plugin-set-completefunc-disabled-neocomplcache/" rel="alternate"></link><updated>2013-01-10T20:33:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2013-01-10:738/another-plugin-set-completefunc-disabled-neocomplcache/</id><summary type="html">&lt;p&gt;最近替 vim 加上了 cscope
的設定後，&lt;code&gt;neocomplcache&lt;/code&gt;突然有時候會出現問題，查了一下資料發現只要加上一行就可以解決了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;let &lt;/span&gt;g:neocomplcache_force_overwrite_completefunc &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考資料：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/12975098/using-neocomplcache-and-clang-complete"&gt;http://stackoverflow.com/questions/12975098/using-neocomplcache-and-clang-complete&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/Shougo/neocomplcache/issues/276"&gt;https://github.com/Shougo/neocomplcache/issues/276&lt;/a&gt;&lt;/p&gt;</summary><category term="neocomplcache"></category><category term="vim"></category></entry><entry><title>KDE hide decoration</title><link href="http://blog.carlcarl.me/726/kde-hide-decoration/" rel="alternate"></link><updated>2012-12-02T08:45:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-12-02:726/kde-hide-decoration/</id><summary type="html">&lt;p&gt;之前為了隱藏 KDE 視窗的 decoration
找方法找好久，結果後來不經意就看到了這個資訊囧，不過可惜只能透過改設定檔的方式，GUI
上似乎沒有這個設定。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;.kde4/share/config/kwinrc&lt;/code&gt;，找到 &lt;code&gt;[Windows]&lt;/code&gt;，在下一行加上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;BorderlessMaximizedWindows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果找不到 &lt;code&gt;[Windows]&lt;/code&gt; ，就自己在檔案裡面補上去就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Windows]&lt;/span&gt;
&lt;span class="na"&gt;BorderlessMaximizedWindows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用好之後，可以再搭配 &lt;a href="http://kde-apps.org/content/show.php?content=143971"&gt;KWin Button applet
improved&lt;/a&gt;，個人覺得還滿方便的～。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://majewsky.wordpress.com/2010/03/24/the-kwin-button-applet/"&gt;http://majewsky.wordpress.com/2010/03/24/the-kwin-button-applet/&lt;/a&gt;&lt;/p&gt;</summary><category term="KDE"></category></entry><entry><title>MongoDB uptime query</title><link href="http://blog.carlcarl.me/721/mongodb-uptime-query/" rel="alternate"></link><updated>2012-11-15T07:33:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-11-15:721/mongodb-uptime-query/</id><summary type="html">&lt;p&gt;在 &lt;a href="http://stackoverflow.com/questions/13379170/how-long-was-a-mongo-instance-running"&gt;stackoverflow&lt;/a&gt;
看到這個問題，就順便查個資料回了一下，另外有個人是回答可以用 &lt;code&gt;ps -ef&lt;/code&gt;
來看，不過我想說 MongoDB 本身應該也會有這樣的功能，所以還是查了一下。&lt;/p&gt;
&lt;p&gt;後來果然在 &lt;a href="http://docs.mongodb.org/manual/reference/server-status/"&gt;MongoDB 官方文件&lt;/a&gt;
找到我要的資料，不過拿到的數據會是以秒為單位，所以必須自己作轉換。&lt;/p&gt;
&lt;p&gt;進入 mongo shell 之後輸入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// seconds&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serverStatus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;uptime&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他的就照單位轉換一下就可以：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// minutes&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serverStatus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;uptime&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="c1"&gt;// hours&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serverStatus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;uptime&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;
&lt;span class="c1"&gt;// days&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serverStatus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;uptime&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;86400&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要固定格式的話，目前似乎沒有直接的 function 可以 call，所以還是必須自己作轉換，像是 &lt;a href="http://stackoverflow.com/questions/175554/how-to-convert-milliseconds-into-human-readable-form"&gt;這篇&lt;/a&gt; 。&lt;/p&gt;</summary><category term="mongodb"></category></entry><entry><title>Mac virtualenvwrapper "No module named setuptools" error</title><link href="http://blog.carlcarl.me/709/mac-virtualenvwrapper-no-module-named-setuptools-error/" rel="alternate"></link><updated>2012-10-22T01:05:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-10-22:709/mac-virtualenvwrapper-no-module-named-setuptools-error/</id><summary type="html">&lt;p&gt;在 Mac 上安裝 virtualenvwrapper 的時候遇到的錯誤，解決方法：  &lt;/p&gt;
&lt;h3&gt;首先先重新安裝 setuptools &lt;a href="http://peak.telecommunity.com/dist/ez_setup.py"&gt;載點&lt;/a&gt; ，下載完執行：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo python ez_setup.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;移除 setuptools&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip uninstall setuptools
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://pypi.python.org/pypi/distribute"&gt;下載 distribute 套件&lt;/a&gt; ，解壓縮後進去資料夾執行：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo python distribute_setup.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到這邊就 OK 了。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.doughellmann.com/virtualenvwrapper/issue/158/installing-virtualenvwrapper-on-on-osx-108"&gt;http://code.doughellmann.com/virtualenvwrapper/issue/158/installing-virtualenvwrapper-on-on-osx-108&lt;/a&gt;&lt;/p&gt;</summary><category term="virtualenvwrapper"></category><category term="mac"></category></entry><entry><title>Ubuntu install salt tool</title><link href="http://blog.carlcarl.me/690/ubuntu-install-salt-tool/" rel="alternate"></link><updated>2012-10-15T20:44:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-10-15:690/ubuntu-install-salt-tool/</id><summary type="html">&lt;p&gt;現在有操作多台機器執行同樣指令的需求，想說裝 &lt;a href="http://docs.saltstack.org/en/latest/contents.html"&gt;salt&lt;/a&gt;
來管理看看，詳細介紹可以點連結進去看看。簡單來講，這套工具可以讓你方便一次去對多個機器進行操作，另外還可以透過用 Python 並 import salt module 來處理整個流程和回傳的資料。  &lt;/p&gt;
&lt;p&gt;salt 分成了兩個部份，&lt;code&gt;salt-master&lt;/code&gt; 和 &lt;code&gt;salt-minion&lt;/code&gt; ，&lt;code&gt;salt-master&lt;/code&gt;
就是 server 端，也就是你用來管理其他機器的機器上要裝的 (有點饒舌=
=")，minion 則是 client 端，就是被管理的機器所要裝的套件。server
端會開個 service 讓 client 連，所以 client 端必須能夠知道 server 端的 IP
或者是 host name ，client 端連上來後，server 端可以決定是否接受這個
client 端的要求，接受的話，之後就能夠管理這個 client
。以下是兩邊所要裝的套件流程:&lt;/p&gt;
&lt;p&gt;salt-master:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-software-properties
sudo add-apt-repository ppa:saltstack/salt
sudo apt-get update
sudo apt-get install salt-master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;salt-minion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-software-properties
sudo add-apt-repository ppa:saltstack/salt
sudo apt-get update
sudo apt-get install salt-minion
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;master 這邊裝好後，如果你的 master 有多個 IP
(如果沒有的話，可以跳過這步），可以選擇你要用哪個 IP 來 listen，修改
&lt;code&gt;/etc/salt/master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;interface: 改成你 master 要 listen 的 IP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完後，重啟 service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/salt-master restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;minion 這邊則要修改 &lt;code&gt;/etc/salt/minion&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;master: master 的 IP 或者是 host name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完後，重啟 service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/salt-minion restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝好之後，接下來要在 master 這邊加入 minion 這邊的機器，執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo salt-key -L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;應該能夠看到 minion 端的 host name ，接著執行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo salt-key -a &amp;lt;minon_hostname&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就可以將這台機器納入管理中了。&lt;br /&gt;
&lt;br /&gt;
設定完後，可以輸入下面指令做測試，回傳 True 的話就表示 OK 啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo salt * test.ping
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://docs.saltstack.org/en/latest/topics/installation/ubuntu.html"&gt;http://docs.saltstack.org/en/latest/topics/installation/ubuntu.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.saltstack.org/en/latest/topics/tutorials/modules.html"&gt;http://docs.saltstack.org/en/latest/topics/tutorials/modules.html&lt;/a&gt;&lt;/p&gt;</summary><category term="saltstack"></category></entry><entry><title>PHP MongoDB query timing</title><link href="http://blog.carlcarl.me/680/php-mongodb-query-timing/" rel="alternate"></link><updated>2012-10-12T03:19:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-10-12:680/php-mongodb-query-timing/</id><summary type="html">&lt;p&gt;最近在用 PHP 在對 MongoDB 作壓力測試的時候，發現怎麼我 1 shard 和 3
shards 的 performance 會一樣，卡了很久後來才發現原來是我搞錯 MongoDB
query 的時機，所以在測試的時候，query 其實都沒有發出，難怪數據會一樣。  &lt;/p&gt;
&lt;p&gt;在 PHP 的 &lt;a href="http://php.net/manual/en/class.mongocursor.php"&gt;manual&lt;/a&gt; 裡有說明，以下拿它的範例程式來說明 query 的時機：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$collection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// query 還沒發出&lt;/span&gt;

&lt;span class="nv"&gt;$cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$cursor&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// query 還是沒發出&lt;/span&gt;

&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$cursor&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getNext&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 這時才發出 query&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是說，query 回傳的是一個 cursor ，必須對這個 cursor
操作或取值，才會實際發出 query ，這邊它提供了兩個方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// 方法 1&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$cursor&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something to each document or do nothing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 方法 2&lt;/span&gt;
&lt;span class="nv"&gt;$cursor&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getNext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外再補充一點，有些人可能會問：做完 &lt;code&gt;find()&lt;/code&gt; 再做 &lt;code&gt;limit()&lt;/code&gt;
，那資料傳的部份是 limit() 前還是之後的？&lt;br /&gt;
答案是 &lt;strong&gt;之後的&lt;/strong&gt; ，因為在做 &lt;code&gt;limit()&lt;/code&gt; 時，這時候只是對 cursor
作設定，還沒實際發出 query，等到後面拿值的時候，才會發出 query ，這時的
query 就包含了 &lt;code&gt;find()&lt;/code&gt; 和 &lt;code&gt;limit()&lt;/code&gt; 的條件了。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10862109/does-mongodb-limit-load-all-the-documents-in-memory"&gt;http://stackoverflow.com/questions/10862109/does-mongodb-limit-load-all-the-documents-in-memory&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://derickrethans.nl/cursors-in-mongodb.html"&gt;http://derickrethans.nl/cursors-in-mongodb.html&lt;/a&gt;&lt;/p&gt;</summary><category term="mongodb"></category><category term="php"></category></entry><entry><title>MongoDB split chunk</title><link href="http://blog.carlcarl.me/671/mongodb-split-chunk/" rel="alternate"></link><updated>2012-10-09T03:21:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-10-09:671/mongodb-split-chunk/</id><summary type="html">&lt;p&gt;練習了一下自己手動切 chunk，因為有時候 MongoDB
切出來的不一定是理想的範圍 orz。&lt;/p&gt;
&lt;p&gt;大致就兩個步驟，第一個是切 chunk，第二個是移動 chunk 到某個 shard
上，如果 balancer 沒關掉的話，第二個步驟會由 balancer 幫你決定你的 chunk
要移到哪個 shard 上。  &lt;/p&gt;
&lt;h3&gt;切 chunk 指令&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 第一個參數是指定在哪個 DB 中的 collection，&lt;/span&gt;
&lt;span class="c1"&gt;// 因為文件裡只說是 collection，所以可能會忘了加上 DB 的名稱&lt;/span&gt;
&lt;span class="c1"&gt;// 第二個參數是你指定的 sharding key，cutPoint 則是要從哪個數值下去切&lt;/span&gt;
&lt;span class="nx"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splitAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourDB.yourCollection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;cutPoint&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runCommand&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourDB.yourcollection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;cutPoint&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;移動 chunk 指令&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 第一個參數是指定在哪個 DB 中的 collection&lt;/span&gt;
&lt;span class="c1"&gt;// 第二個參數是你指定的 sharding key，cutPoint 則是要從哪個數值下去切&lt;/span&gt;
&lt;span class="c1"&gt;// 第三個參數是要移到哪個 shard&lt;/span&gt;
&lt;span class="nx"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveChunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourDB.yourCollection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;cutPoint&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shardName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runCommand&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;moveChunk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourDB.yourCollection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;cutPoint&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shardName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你會發現這邊有兩個用法，一個是 &lt;code&gt;sh&lt;/code&gt; 開頭 (表示是 sharding
相關的指令)，一個是 &lt;code&gt;db&lt;/code&gt; 開頭，如果是在 mongo shell 裡操作的話，&lt;code&gt;sh&lt;/code&gt;
會較好用，因為 &lt;code&gt;db&lt;/code&gt; 這邊的操作必須在 &lt;code&gt;admin&lt;/code&gt; 這個 database
中才能執行，所以會多了 admin 和原來的 database 間的轉換，較為麻煩。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://docs.mongodb.org/manual/reference/method/sh.splitAt/"&gt;http://docs.mongodb.org/manual/reference/method/sh.splitAt/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.mongodb.org/manual/reference/method/sh.moveChunk/"&gt;http://docs.mongodb.org/manual/reference/method/sh.moveChunk/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://hedatou.com/archives/introduction_to_mongodb.html"&gt;http://hedatou.com/archives/introduction_to_mongodb.html&lt;/a&gt;&lt;/p&gt;</summary><category term="mongodb"></category></entry><entry><title>MongoDB check status command</title><link href="http://blog.carlcarl.me/663/mongodb-check-status-command/" rel="alternate"></link><updated>2012-10-09T02:15:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-10-09:663/mongodb-check-status-command/</id><summary type="html">&lt;p&gt;紀錄一下 MongoDB 看狀態時常會用到的指令。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 看目前 state 的指令&lt;/span&gt;
mongostat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下都是進 mongo shell 後的指令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 狀態總覽&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serverStatus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// 看 memory&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serverStatus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;mem&lt;/span&gt;

&lt;span class="c1"&gt;// 看 page fault&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serverStatus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;extra_info&lt;/span&gt;

&lt;span class="c1"&gt;// 看 sharding 的狀態，兩個指令同樣功能&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;printShardingStatus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// 查看 db 本身的資訊&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// 查看 collection 的 index&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIndexes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// 查看目前執行的 operation&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentOP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://docs.mongodb.org/manual/reference/server-status-index/"&gt;http://docs.mongodb.org/manual/reference/server-status-index/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.mongodb.org/display/DOCS/Sharding+Administration"&gt;http://www.mongodb.org/display/DOCS/Sharding+Administration&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.mongodb.org/manual/reference/database-statistics/"&gt;http://docs.mongodb.org/manual/reference/database-statistics/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.mongodb.org/display/DOCS/Indexes"&gt;http://www.mongodb.org/display/DOCS/Indexes&lt;/a&gt;&lt;/p&gt;</summary><category term="mongodb"></category></entry><entry><title>mongodb aggregation group count sort</title><link href="http://blog.carlcarl.me/645/mongodb-aggregation-group-count-sort/" rel="alternate"></link><updated>2012-09-14T05:05:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-09-14:645/mongodb-aggregation-group-count-sort/</id><summary type="html">&lt;p&gt;感覺不是很難的 query，想說用 mongodb aggregation 來解決，不過查資料查了好久才知道怎麼用。&lt;br /&gt;
以 sql 來說的話，我是要對某個欄位作 group by，分類完之後再對分類完的欄位作 count，算完之後再根據 count 的數字作 sort。下面這段是 MongoDB 中的用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mytable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$b_cd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$sum&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$sort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$b_cd&lt;/code&gt; 是我要分類的欄位，&lt;code&gt;num&lt;/code&gt; 是各分類欄位的數目，這邊利用 &lt;code&gt;$sum&lt;/code&gt;
作累加，接著再用 &lt;code&gt;$sort&lt;/code&gt; 對 num 作排序。&lt;/p&gt;
&lt;p&gt;中間我卡很久的原因是因為 syntax
搞錯（&lt;strong&gt;大括弧的位置要注意！！！！！&lt;/strong&gt;），不應該把 &lt;code&gt;$group&lt;/code&gt; 和 &lt;code&gt;$sort&lt;/code&gt;
放在同一個 object ，而是要分開來分別當作 &lt;code&gt;aggregate&lt;/code&gt; 的參數才對，有幾個
operator ($project, $group, $sort...,etc.) ，&lt;code&gt;aggregate&lt;/code&gt;
就會有幾個參數，另外要記得就是這些參數要&lt;strong&gt;分別用大括弧各包成
object&lt;/strong&gt; 才行。&lt;/p&gt;
&lt;p&gt;另外再補充一下另一個寫法，跟上面的是一樣的意思，我比較喜歡上面的寫法就是了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mytable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$b_cd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$sum&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$sort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://docs.mongodb.org/manual/applications/aggregation/"&gt;http://docs.mongodb.org/manual/applications/aggregation/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://docs.mongodb.org/manual/reference/aggregation/"&gt;http://docs.mongodb.org/manual/reference/aggregation/&lt;/a&gt;&lt;/p&gt;</summary><category term="mongodb"></category></entry><entry><title>Test KineticJS apply canvas</title><link href="http://blog.carlcarl.me/606/test-kineticjs-apply-canvas/" rel="alternate"></link><updated>2012-09-04T01:54:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-09-04:606/test-kineticjs-apply-canvas/</id><summary type="html">&lt;p&gt;寫起來跟以前寫 Java 作類似東西的感覺很像，東西基本上都已經用物件包好，然後還有提供 layer
讓你可以很方便的在不同 layer 放你要的物件。  &lt;/p&gt;
&lt;p&gt;我嘗試把我原本&lt;a href="https://github.com/carlcarl/CaGo/blob/master/js/cago.js"&gt;播放棋譜&lt;/a&gt;的 canvas 改成套用 KineticJS，不過後來發現，因為我的 canvas
操作沒很複雜，所以真的是太大材小用了...。&lt;/p&gt;
&lt;p&gt;以可讀性來講，因為我大部分畫 canvas 都是放在一個 function 裡，大致用幾個註解分幾個段落，其實就知道各部份的流程，換成物件的方式後，整個 function 感覺並沒有更好讀，而且程式沒有比較短=.=。&lt;/p&gt;
&lt;p&gt;然後我用一個固定的測試流程來作測試(這個流程不包括前面的 js file loading，是讀完後才開始作操作測試)，測試的結果原本是 200ms，換成 KineticJS 之後是 800ms，整個很不划算 ~.~。&lt;/p&gt;
&lt;p&gt;雖然 KineticJS 有提供 layer，不過如果只是簡單操作的話，這個我自己幹也是
OK，就動態新增幾個 canvas，設 z-index 就有類似一樣的效果，我自己現在是設定棋盤一個 background layer，棋子和其他一些標示設到 front layer。&lt;/p&gt;
&lt;p&gt;然後只 render 「改變的部份」這塊，KineticJS 需要紀錄在 layer
中的每個物件，不然在移除棋子的時候，沒辦法知道是要 remove
layer中的哪個棋子，但是這樣就變成需要多一個資料結構來紀錄，個人覺得不太划算。&lt;/p&gt;
&lt;p&gt;原本的 canvas 我要作的話，像是移除某個棋子，我只要把 background layer
的那部份拿來蓋掉棋子就可以了，相較之下會比較方便些，後來實作這部份之後，時間也從
200ms，降到 130ms 左右。之前測從一個 layer 切成兩個 layer 後，時間似乎沒啥差囧。&lt;/p&gt;
&lt;p&gt;不過使用者點擊的這部份 目前還是 render 全部，因為假如我按上一步的話，現在這一步的棋盤會移除掉，當我要畫上一步的棋盤時就沒辦法根據差異來只畫改變的部份，我現在是存棋盤上一個狀態是在哪一步，當然如果要改成存上一個狀態的整個棋盤就能解決，但是我怕 overhead 會太大。&lt;/p&gt;
&lt;p&gt;所以結論是 我覺得如果會需要用到一些 mouse event(ex: drag) 或是
animation...等一些比較複雜的操作的話，這時候再考慮用 KineticJS
吧，不然只有一些簡單的操作的話用 canvas 就好。另外 KineticJS 在設定一些
shape 的 attr，會發現比 canvas 的還少一點，因為有些都在程式裡寫死了，這個可能要注意一下。&lt;/p&gt;</summary><category term="canvas"></category><category term="kineticjs"></category></entry><entry><title>virtualenvwrapper setting</title><link href="http://blog.carlcarl.me/598/virtualenvwrapper-setting/" rel="alternate"></link><updated>2012-08-28T00:01:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-08-28:598/virtualenvwrapper-setting/</id><summary type="html">&lt;p&gt;最近為了方便，加了幾個 virtualenvwrapper 的設定。  &lt;/p&gt;
&lt;h3&gt;使用 &lt;code&gt;mkvirtualenv&lt;/code&gt; 建立 virtualenv 時，自動建立資料夾並移到資料夾位置下。&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;~/.virtualenv/postmkvirtualenv&lt;/code&gt;裡加入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;proj_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;|awk -F&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $NF}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -d &lt;span class="s2"&gt;&amp;quot;~/Projects/$proj_name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;mkdir ~/Projects/&lt;span class="nv"&gt;$proj_name&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${PWD##*/}&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/Projects/$proj_name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projects/&lt;span class="nv"&gt;$proj_name&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，把 &lt;code&gt;Projects&lt;/code&gt; 換成你的 project 位置。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;輸入 &lt;code&gt;workon 你的project&lt;/code&gt; 時，自動切換至 project 位置下。&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;在 `~/.virtualenv/postactivate`裡加入：

:::bash
proj_name=$(echo &lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;|awk -F&amp;#39;/&amp;#39; &amp;#39;{print &lt;span class="nv"&gt;$NF&lt;/span&gt;}&amp;#39;)

if [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PWD&lt;/span&gt;&lt;span class="c"&gt;##*/&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; != &amp;quot;~/Projects/&lt;span class="nv"&gt;$proj_name&lt;/span&gt;&amp;quot; ]; then
    cd ~/Projects/&lt;span class="nv"&gt;$proj_name&lt;/span&gt;
fi
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用 rmvirtualenv 時自動刪除資料夾&lt;/h3&gt;
&lt;p&gt;目前似乎沒辦法（炸），因為在 deactivate 狀態下 &lt;code&gt;$VIRTUAL_ENV&lt;/code&gt; 是不會有值的，而在 activate 下又不能刪除環境，所以目前看來是無解，只能自己手動刪除了。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://http://virtualenvwrapper.readthedocs.org/en/latest/tips.html"&gt;http://virtualenvwrapper.readthedocs.org/en/latest/tips.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://http://stackoverflow.com/questions/11005457/how-do-i-remove-delete-a-virtualenv"&gt;http://stackoverflow.com/questions/11005457/how-do-i-remove-delete-a-virtualenv&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="virtualenvwrapper"></category></entry><entry><title>mongodb php connection</title><link href="http://blog.carlcarl.me/589/mongodb-php-connection/" rel="alternate"></link><updated>2012-08-13T22:16:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-08-13:589/mongodb-php-connection/</id><summary type="html">&lt;p&gt;大概寫一下 mongodb + auth 的連線步驟，之前我是這樣做連線認証：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mongo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongodb://localhost:27017&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
&lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$m&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;mytable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$db&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$DB_USERNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$DB_USERPASSWORD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過後來更新 php mongodb 的 library 後，發現 &lt;code&gt;authenticate&lt;/code&gt; 這個 method
已經 deprecated 了，所以改用原本 mongodb 的建構式做連線認証：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Mongo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongodb://&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DB_USERNAME}:${DB_USERPASSWORD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@localhost/mydb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$m&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;mydb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊要注意的一點就是，雖然在 Mongo 的建構式中已經對 mydb
做認証並通過了，但是此時回傳的 &lt;code&gt;$m&lt;/code&gt; 只是 Mongo 的 object
而已，所以一旦要在某個 db 做搜尋的時候，還是必須再指定 db 才行。&lt;/p&gt;
&lt;p&gt;另外還有個小 bug 就是，密碼一旦包括 &lt;code&gt;@&lt;/code&gt; 字元的話會有錯誤，即使 escape 成
&lt;code&gt;%40&lt;/code&gt; 也是一樣，不知道這部份的問題該怎麼修正就是。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://http://stackoverflow.com/questions/3748252"&gt;http://stackoverflow.com/questions/3748252&lt;/a&gt;&lt;/p&gt;</summary><category term="mongodb"></category><category term="php"></category></entry><entry><title>vim neocomplcache sudo vim error</title><link href="http://blog.carlcarl.me/584/vim-neocomplcache-sudo-vim/" rel="alternate"></link><updated>2012-08-13T17:51:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-08-13:584/vim-neocomplcache-sudo-vim/</id><summary type="html">&lt;p&gt;指令輸入 &lt;code&gt;sudo vim 檔案&lt;/code&gt; 的時候會出現錯誤
&lt;code&gt;neocomplcache Please use sudo.vim plugin instead of sudo command...&lt;/code&gt;
，不過目前遇到只有在 Ubuntu 環境底下有發生，FreeBSD 和 Chakra
倒是沒出問題。&lt;/p&gt;
&lt;p&gt;因為我懶得去裝 sudo.vim
這個套件，而且操作會變麻煩，所以照它另外一個錯誤訊息建議去修改
&lt;code&gt;/etc/sudoers&lt;/code&gt; 檔案，只要加上 &lt;code&gt;Defaults always_set_home&lt;/code&gt; 這行就 OK 了。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://https://github.com/Shougo/neocomplcache/issues/179"&gt;https://github.com/Shougo/neocomplcache/issues/179&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://https://bbs.archlinux.org/viewtopic.php?id=72573"&gt;https://bbs.archlinux.org/viewtopic.php?id=72573&lt;/a&gt;&lt;/p&gt;</summary><category term="neocomplcache"></category><category term="vim"></category></entry><entry><title>vim neocomplcache indent error</title><link href="http://blog.carlcarl.me/573/vim-neocomplcache-indent-error/" rel="alternate"></link><updated>2012-08-12T22:18:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-08-12:573/vim-neocomplcache-indent-error/</id><summary type="html">&lt;p&gt;最近裝了 &lt;a href="https://github.com/shougo/neocomplcache"&gt;neocomplcache&lt;/a&gt; 這個 vim
plugin，但是在使用的時候發現，一旦按下 enter 鍵再加上有縮排的話會出現
&lt;code&gt;neocomplcache indent neocomplcache#smart_close_popup()&lt;/code&gt;
的文字，查了一下資料好像是 &lt;a href="https://github.com/Shougo/neocomplcache/issues/88"&gt;supertab 的問題&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;修正的方法是在 &lt;code&gt;vimrc&lt;/code&gt; 檔案中加入下面這行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;let g:SuperTabCrMapping = 0
&lt;/pre&gt;&lt;/div&gt;</summary><category term="neocomplcache"></category><category term="vim"></category></entry><entry><title>CloudStack port forwarding and load balancing note</title><link href="http://blog.carlcarl.me/555/cloudstack-port-forwarding-and-load-balancing-note/" rel="alternate"></link><updated>2012-08-09T04:15:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-08-09:555/cloudstack-port-forwarding-and-load-balancing-note/</id><summary type="html">&lt;p&gt;我用的是 Advanced network 的架構，而當我在弄 CloudStack 的 VM port
forwarding 時，發現 port 怎麼樣都 forward 不到 VM
上，找了很多資料，後來才發現原來是前端的 firewall 也要開對應的 port
才行。&lt;br /&gt;
&lt;img alt="firewall
rule" src="http://i.imgur.com/Q59NTKhl.png" title="firewall rule" /&gt; &lt;/p&gt;
&lt;p&gt;像是這邊我開了 5566 ~ 5567 port 的 TCP 連線，然後 Source
CIDR 設 0.0.0.0/0 表示接受來自所有的 IP。&lt;/p&gt;
&lt;p&gt;&lt;img alt="port
forwarding rule" src="http://i.imgur.com/aOeDQq2l.png" title="port forwarding rule" /&gt; &lt;/p&gt;
&lt;p&gt;然後我在這邊就可以拿上面有開放出來的 5566
port，然後拿來 forward 到某台 VM 的 80 port 了&lt;/p&gt;
&lt;p&gt;Load balance 也是差不多一樣，總之前面的 firewall 要先開 port
，不然預設都會在前面被擋掉，以至於到不了後面的 port forwarding 或 load
balancing 來處理。&lt;/p&gt;</summary><category term="cloudstack"></category></entry><entry><title>fix mongodb default allocate space too larger</title><link href="http://blog.carlcarl.me/546/fix-mongodb-default-allocate-space-too-larger/" rel="alternate"></link><updated>2012-07-27T20:19:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-07-27:546/fix-mongodb-default-allocate-space-too-larger/</id><summary type="html">&lt;p&gt;最近在做 VM template 的時候才發現到這個問題，安裝好 mongodb 之後，在
&lt;code&gt;/var/lib/mongodb/journal/&lt;/code&gt; 下面可以發現 mongodb 佔用了 3 GB 的 journal
檔案。&lt;/p&gt;
&lt;p&gt;當然，如果硬碟夠大或是沒啥必要的話，這其實可以不用去理它，但是我由於需要加快利用
VM template 安裝系統的速度，而 template 的大小會影響中間網路傳送
template 的時間，因此還是希望能避免不必要的空間浪費。&lt;/p&gt;
&lt;p&gt;而其實 mongodb 本身有提供一個參數 &lt;code&gt;smallfiles&lt;/code&gt;
，這個參數可以讓這些預先生成的 journal 檔案一個從 1G 降到約 13X MB
左右，所以總共 3 個 journal file 會從原本的 3 GB 降到約 400 MB 大小。&lt;/p&gt;
&lt;p&gt;如果是用 command line 的方式，就加上 &lt;code&gt;--smallfiles&lt;/code&gt;
，如果是設定檔的方式，就在設定檔裡加上 &lt;code&gt;smallfiles = true&lt;/code&gt; ，接著將
&lt;code&gt;/var/lib/mongodb/journal/prealloc.x&lt;/code&gt; 給刪掉 (x 是數字)，然後重啟
mongodb
，重啟完再察看檔案大小是否有改掉，如果沒有的話可以嘗試重啟幾遍試試看唄。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://www.mongodb.org/display/DOCS/Command+Line+Parameters"&gt;http://www.mongodb.org/display/DOCS/Command+Line+Parameters&lt;/a&gt;&lt;/p&gt;</summary><category term="mongodb"></category></entry><entry><title>Javascript Library simple structure</title><link href="http://blog.carlcarl.me/537/javascript-library-simple-structure/" rel="alternate"></link><updated>2012-07-23T02:03:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-07-23:537/javascript-library-simple-structure/</id><summary type="html">&lt;p&gt;之前在找 Javascript 這方面的 library
該怎麼寫，看了一些資料，覺得以下這種方式不錯  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// library example&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// private variable&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;getName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;windows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// call API&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣寫法的優點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透過將這個 library 當作一個物件並呼叫其中的
    function，使用上較不會跟其他 library function 混淆，也較好
    maintain。&lt;/li&gt;
&lt;li&gt;使用這個 library 的時候，也能夠保護到內部的 private variable
    不被直接做 access。&lt;/li&gt;
&lt;li&gt;可更直覺的知道哪些是提供出來的
    API，因為這邊透過變數命名和統一管理將這些 API 都放在 API varaible
    裡，最後再 return 這個 API
    variable。這樣子在外部使用的時候就限制只能操作這個 API variable
    裡頭所定義的 function 或 variable。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至於其他更詳細的可以看一下下面的參考網址，這邊的架構主要是從裏面學習來的。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://www.atlanticbt.com/blog/create-your-own-javascript-library/"&gt;http://www.atlanticbt.com/blog/create-your-own-javascript-library/&lt;/a&gt;&lt;/p&gt;</summary><category term="javascript"></category></entry><entry><title>HTML script speed up with defer</title><link href="http://blog.carlcarl.me/525/html-script-speed-up-with-defer/" rel="alternate"></link><updated>2012-07-06T03:49:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-07-06:525/html-script-speed-up-with-defer/</id><summary type="html">&lt;p&gt;在 &lt;a href="http://blog.xuite.net/vexed/tech/61308318"&gt;script tag 屬性 async defer 差別&lt;/a&gt; 這邊看到了 script tag 有 async
和 defer 的用法，所以就來試試看。大致測試了一下，速度的確有快了一些(大概加快50 ~ 100ms
左右吧XD)。以下大概講一下我的測試範例內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- &lt;/span&gt;
&lt;span class="c"&gt;這是原本的程式&lt;/span&gt;
&lt;span class="c"&gt;a-b.js 需要 a.js, 而 a-c.js 需要 a.js, 這是這 3 個 js 檔的相依關係&lt;/span&gt;
&lt;span class="c"&gt;最後會從 a-c.js 裡呼叫 library 來執行&lt;/span&gt;
&lt;span class="c"&gt;由於 async 屬性並不適合用來處理有相依性的 js 檔案，load 順序可能會出問題&lt;/span&gt;
&lt;span class="c"&gt;defer 則能保證執行的順序關係，所以我等下會是使用 defer 屬性&lt;/span&gt;
&lt;span class="c"&gt;如果你的 js 檔案並沒有相依關係的話，是可以考慮用 async 屬性&lt;/span&gt;
&lt;span class="c"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/a.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/a-b.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/a-c.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加上 defer 屬性後：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/a.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/a-b.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/a-c.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;();};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="javascript"></category></entry><entry><title>VM template can't specify hostname</title><link href="http://blog.carlcarl.me/519/vm-template-cant-specify-hostname/" rel="alternate"></link><updated>2012-06-18T18:07:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-06-18:519/vm-template-cant-specify-hostname/</id><summary type="html">&lt;p&gt;這個應該很多 hypervisor 都適用，在做完 vm 的 template 之後，因為
hostname 在這裡已經固定，所以利用這個 template 再開啟一個新的 instance
的時候，hostname 會還是原本舊的，如果是用 DHCP
的方式的話，照理來說是可以拿到當初指定的 hostname 的。  &lt;/p&gt;
&lt;p&gt;這邊我找了很多資料，本來從 hypervisor
這邊去找資料，不過都沒什麼結果，後來才發現原來從 Guest OS 這邊去修改就
OK 了，方法很簡單，在你的 VM 裡執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mv /etc/hostname /etc/hostname.old
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後重開 VM，這樣就會根據 DHCP 所指定的 hostname
來設定了。所以同樣的，為了方便，可以在做 template
之前，先執行以上的步驟，這樣之後所開的 instance 就會是指定的 hostname
了。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://cloudstack.org/forum/6-general-discussion/8591-ubuntu-10043-server-64-bit-template-creation-issues-take-snapshot-failed--hostname-not-updating.html"&gt;http://cloudstack.org/forum/6-general-discussion/8591-ubuntu-10043-server-64-bit-template-creation-issues-take-snapshot-failed--hostname-not-updating.html&lt;/a&gt;&lt;/p&gt;</summary><category term="hostname"></category><category term="template"></category></entry><entry><title>Chakra vim not support pythoncomplete</title><link href="http://blog.carlcarl.me/515/chakra-vim-not-support-pythoncomplete/" rel="alternate"></link><updated>2012-06-17T22:47:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-06-17:515/chakra-vim-not-support-pythoncomplete/</id><summary type="html">&lt;p&gt;最近在 Chakra 上用 vim 寫 python
的時候才突然發現這個問題，原因似乎是因為 vim 在編譯的時候沒有加上 python
的編譯參數，解決這個問題很簡單，只要改安裝 &lt;code&gt;vim-qt-git&lt;/code&gt; 就 OK
了，因為它所提供的 vim 是有支援 pythoncomplete 的。vim-qt-git
本身包含一套完整的 vim 以及加上 GUI 的套件，所以安裝的時候會要求將原本的
vim 移除掉，允許移除後，就能順利安裝並使用 pythoncomplete 的補完功能了。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=122091"&gt;https://bbs.archlinux.org/viewtopic.php?id=122091&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://wiki.archlinux.org/index.php/Vim"&gt;https://wiki.archlinux.org/index.php/Vim&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.linuxtty.com/post/13022099749/archlinux-vim-python-support"&gt;http://blog.linuxtty.com/post/13022099749/archlinux-vim-python-support&lt;/a&gt;&lt;/p&gt;</summary><category term="chakra"></category><category term="python"></category><category term="vim"></category></entry><entry><title>Chakra firefox-kde-opensuse repo</title><link href="http://blog.carlcarl.me/512/chakra-firefox-kde-opensuse-repo/" rel="alternate"></link><updated>2012-06-09T01:29:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-06-09:512/chakra-firefox-kde-opensuse-repo/</id><summary type="html">&lt;p&gt;2012/10/14 更新&lt;br /&gt;
firefox-kde-opensuse 已經進 chakra 的 bundle 了，就叫 firefox ，以後從
bundle 裡安裝即可，就不用加以下的 repo ，而且 repo
畢竟不是官方的，所以更新維護上可能也會有點問題。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;因為 firefox-kde-opensuse 要自己編太麻煩了，所以加個 repo
這樣以後安裝比較省時，是說要不是 &lt;a href="http://www.plurk.com/maxwux"&gt;Whiksy&lt;/a&gt;
有提供我還真的不知道原來有......。&lt;br /&gt;
以下複製到 &lt;code&gt;/etc/pacman.conf&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[chakra-gtk-repo]&lt;/span&gt;
&lt;span class="na"&gt;Server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://chakra-gtk-repo.tk/repo/x86_64/&lt;/span&gt;
&lt;span class="k"&gt;[packccr]&lt;/span&gt;
&lt;span class="na"&gt;Server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://repo.stephenmac.com/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就 OK 了。&lt;/p&gt;</summary><category term="chakra"></category><category term="firefox"></category><category term="firefox-kde-opensuse"></category></entry><entry><title>Chakra gogoc compile</title><link href="http://blog.carlcarl.me/499/chakra-gogoc-compile/" rel="alternate"></link><updated>2012-06-07T02:31:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-06-07:499/chakra-gogoc-compile/</id><summary type="html">&lt;p&gt;之前在 &lt;a href="http://blog.carlcarl.tw/397/ubuntu-tunnel-broker" title="Ubuntu Tunnel Broker IPv6 連 中研院"&gt;Ubuntu 系列上可以很方便的安裝 gogoc&lt;/a&gt;，但是後來換到 Chakra
之後，ccr 裡並沒有提供安裝包，沒辦法，只好自己編譯。&lt;/p&gt;
&lt;p&gt;1.首先先下載安裝包(不能下載的話，就必須到&lt;a href="http://www.gogo6.com/"&gt;官網&lt;/a&gt;註冊帳號並下載囉)、解壓縮，並進入到資料夾中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://content.gogo6.com/gogoc-1_2-RELEASE.tar.gz
tar -xf gogoc-1_2-RELEASE.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;gogoc-1_2-RELEASE/gogoc-tsp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.接下來是編譯，這邊沒意外的話會有錯（至少我是這樣XD），所以要先做點修改，將
    &lt;code&gt;#include &amp;lt;stddef.h&amp;gt;&lt;/code&gt; 加到
    &lt;code&gt;../gogoc-messaging/gogocmessaging/message.h&lt;/code&gt;
    的檔案最上方即可，這邊提供一下錯誤訊息的片斷：&lt;/p&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;src/clientmsgsender.cc:145:17: error: expected primary-expression before 『,』 token
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.正式編譯（這邊如果還是有錯的話，就是相依套件的問題，可以參考它的
    &lt;code&gt;INSTALL&lt;/code&gt; 檔案中的套件相依性解說）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.以 root 權限安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;installdir&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gogoc&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.修 設定檔，設定檔以上面的安裝路徑來說，會是
    &lt;code&gt;/usr/local/gogoc/bin/gogoc.conf&lt;/code&gt;
    這個檔案，檔案該如何修改可以參考[我之前這篇][Ubuntu
    系列上可以很方便的安裝 gogoc]。&lt;/p&gt;
&lt;p&gt;6.為了執行方便，在&lt;code&gt;/usr/local/bin&lt;/code&gt;中建立一個連結：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ln -s /usr/local/gogoc/bin/gogoc /usr/local/bin/gogoc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7.手動執行，這邊要用 root 權限執行並指定設定檔位置才行，不然會有
    &lt;code&gt;gogoc Failed to open specified file.&lt;/code&gt; 的錯誤：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo gogoc -f /usr/local/gogoc/bin/gogoc.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8.如果執行的時候出現以下錯誤不代表失敗，可以利用
&lt;a href="http://test-ipv6.com/"&gt;http://test-ipv6.com/&lt;/a&gt; 這個網站實際測試，如果滿分就 OK 囉。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TSP&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;supported&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.0.2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Failed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;retrieve&lt;/span&gt; &lt;span class="n"&gt;TSP&lt;/span&gt; &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Disconnected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Retrying&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;9.考慮加入開機時執行，這邊就看你要怎麼放了，我是在&lt;code&gt;~/.kde4/Autostart&lt;/code&gt;
    中寫一個簡單的 shell，然後這個檔案裡加入上面的這行指令這樣。&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gogo6.com/group/gogoclientdevelopment/forum/topics/clientmsgsender-cc-in-member-function-avoid-gogocmessaging"&gt;http://www.gogo6.com/group/gogoclientdevelopment/forum/topics/clientmsgsender-cc-in-member-function-avoid-gogocmessaging&lt;/a&gt;&lt;/p&gt;</summary><category term="chakra"></category><category term="gogoc"></category></entry><entry><title>MySQL table_cache fail</title><link href="http://blog.carlcarl.me/495/mysql-table_cache-fail/" rel="alternate"></link><updated>2012-05-31T15:26:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-31:495/mysql-table_cache-fail/</id><summary type="html">&lt;p&gt;一直記得之前好像遇過同樣的問題，後來才想到應該是 ulimit 的限制。ulimit
會限制一個 user 可開啟的檔案，MySQL 也不例外，預設會被限制在最多開 1024
個檔案，以下是跟 MySQL 有關的算式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;max_open_files = max_connections + (table_cache * 2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;max_open_files&lt;/code&gt; 基本上是固定 1024，所以後面的部份一旦自己設太大，MySQL
會自己再調整參數，所以可能會遇到你將 &lt;code&gt;max_connections&lt;/code&gt; 設到
1024、&lt;code&gt;table_cache&lt;/code&gt; 設到512，可是在 MySQL command line
中去查，&lt;code&gt;table_cache&lt;/code&gt; 卻還是預設 64 的情形，&lt;code&gt;max_connections&lt;/code&gt;
的值也會同樣被降低。&lt;/p&gt;
&lt;p&gt;要預防這種情形就必須修改 &lt;code&gt;ulimit&lt;/code&gt; 限制，在 &lt;code&gt;/etc/security/limits.conf&lt;/code&gt; 加上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="n"&gt;soft&lt;/span&gt; &lt;span class="n"&gt;nofile&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="n"&gt;hard&lt;/span&gt; &lt;span class="n"&gt;nofile&lt;/span&gt; &lt;span class="mi"&gt;8192&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著重開 MySQL 即可。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://www.neweguo.com/club/display.asp?id=44"&gt;http://www.neweguo.com/club/display.asp?id=44&lt;/a&gt;&lt;/p&gt;</summary><category term="mysql"></category><category term="table_cache"></category></entry><entry><title>MySQL insert if duplicate then update</title><link href="http://blog.carlcarl.me/486/mysql-insert-if-duplicate-then-update/" rel="alternate"></link><updated>2012-05-29T22:42:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-29:486/mysql-insert-if-duplicate-then-update/</id><summary type="html">&lt;p&gt;在做壓力測試的時候發現出來的數值不太對，後來看了一下，發現是因為程式裏面是拿
SELECT 出來的資料加 1 並給 UPDATE 來使用，但是這樣並不是一個 atomic 的
operation，如果在 SELECT 完之後有其他人也進行 SELECT
就變成會拿一樣的資料且都加 1，兩個做完 UPDATE 的結果就會只是加 1
過的數據，但是預期的結果應該要是加 2 的。  &lt;/p&gt;
&lt;p&gt;查了一下資料，發現有個簡單的語法可以使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* If id is the UNIQUE KEY */&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;DUPLICATE&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它的意思就是說一開始使用 INSERT，一旦有 UNIQUE KEY 的衝突，像這裡 id
如果是跟已存在的任何一個 id 值重複的話，就會轉用使用
UPDATE，並執行你所指定的動作，以我這邊的例子就是數字(num)+1。但是這樣用有個前提就是這裡的
id 必須設定為 UNIQUE KEY 或 PRIMARY KEY。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/6030071/mysql-table-insert-if-not-exist-otherwise-update"&gt;http://stackoverflow.com/questions/6030071/mysql-table-insert-if-not-exist-otherwise-update&lt;/a&gt;&lt;/p&gt;</summary><category term="mysql"></category></entry><entry><title>KDE oxygen-transparent error with playing video</title><link href="http://blog.carlcarl.me/482/kde-oxygen-transparent-error-with-playing-video/" rel="alternate"></link><updated>2012-05-28T10:57:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-28:482/kde-oxygen-transparent-error-with-playing-video/</id><summary type="html">&lt;p&gt;最近改用 Chakra + KDE 的環境，另外再裝了 oxygen-transparent
這個佈景主題，但是卻發現一個問題，那就是 Qt based
的影片播放器會因為這個主題而出問題，影片播放會變透明，什麼都看不到囧，只有聲音。&lt;/p&gt;
&lt;p&gt;目前還找不太到很好的解決方案，只想到一個比較簡單的替代方案，就是使用
VLC。但是預設的情況下播放還是會透明，必須到 Interface -&amp;gt; Preference
底下，使用 custom skin，VLC 就會使用他自己的佈景主題，既然是用它自己的佈景主題，影片播放自然就不會因為系統套用 oxygen transparent 的主題而受到影響了。&lt;/p&gt;
&lt;p&gt;不過目前用一用，偶爾還是會怪怪的，但是就撐著加減用吧，因為我不太想換系統的佈景主題XD。&lt;/p&gt;</summary><category term="KDE"></category><category term="oxygen"></category><category term="vlc"></category></entry><entry><title>CloudStack comment</title><link href="http://blog.carlcarl.me/473/cloudstack/" rel="alternate"></link><updated>2012-05-23T19:56:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-23:473/cloudstack/</id><summary type="html">&lt;p&gt;&lt;img alt="CloudStack" src="http://i.imgur.com/QqDmZipl.png" title="Selection_49cef6" /&gt;
用 CloudStack 也算用了一段時間了，來講一下心得好了 XD。 當初會看到是在
Youtube 上面看到教學影片，覺得安裝還滿方便的，而且是 Citrix
推出的，所以搭配 XenServer 的效果看起來還不錯，所以就來裝裝看了。&lt;/p&gt;
&lt;p&gt;安裝算是還滿簡單的，跟 OpenStack 比起來......( 感覺 OpenStack
還是比較注重在 KVM
上)，網路架構配置也不用太花腦筋，我自己是只配置一張網卡在 CloudStack
的架構上，並未將外網和內網分開，照理來說分開來會比較好啦，但是覺得這樣做，以後就能直接拿一般的
PC(單網卡) 來擴充當 compute node。management ip address 和 guest ip
address 就直接分在同個網段下的不同區域，例如 192.168.1.10\~192.168.1.30
是 management，192.168.1.60 ~ 192.168.1.199 是
guest，這邊只是例子，看你要怎麼搭配。&lt;/p&gt;
&lt;p&gt;這邊順便補充一下，management ip 是拿來提供給 CloudStack 的 System VM
用的，CloudStack 的一些服務都會透過建立成 VM
的方式來運作，一般是不會用到太多，至於要給多少，這個我就沒什麼建議了，因為我也不太清楚到底會用到幾個XD，就我現在的情況，3個
compute node，共開了 3 個 System VM 這樣，可以當作個參考唄。&lt;/p&gt;
&lt;p&gt;節點的角色就簡略的分成兩種：CloudStack 和 compute， CloudStack node
是負責管理 compute node 和提供 WebUI 用的，所以灌在 vm
上也沒關係，我就灌在另外有使用的 ESX
上，而且這樣子如果要做啥修改，先做個 snapshot
就好，也不用太怕他炸掉這樣XD。compute node
就必須用實體的機器了，我是使用 XenServer 5.6
sp2，不管是要本身安裝或是要整合到 CloudStack
中都算是非常方便，比較要注意的是在第一次安裝 CloudStack，必須搭配一個
XenServer(或其他種類的 hypervisor: 如 KVM) 來做安裝，因為必須用這個
hypervisor 開啟幾個 System VM ，CloudStack 才能運作。&lt;/p&gt;
&lt;p&gt;接著來總結一下幾項優缺點。&lt;/p&gt;
&lt;p&gt;優點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝方便&lt;/li&gt;
&lt;li&gt;跟 XenServer 整合良好 ( 因為是同一家公司嘛XD )&lt;/li&gt;
&lt;li&gt;WebUI 管理方便，特別是在外面的時候，也不是每台電腦都能讓你灌
    Xencenter 的&lt;/li&gt;
&lt;li&gt;升級還算簡單，照著官方 release notes 裡的 upgrade instruction
    步驟去做通常都 OK&lt;/li&gt;
&lt;li&gt;可以設定自動備份和備份的周期 ( 夠強大的話也是可以考慮自己寫 script
    直接去操作 XenServer 的 API 來做啦 )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.x 版之後的 WebUI 有點華而不實，導致原本在 2.x
    版中很簡單的操作程序在 3.x
    版中被拉的很冗長，不過看最近的升級，是有在改進啦......&lt;/li&gt;
&lt;li&gt;沒辦法利用 CloudStack 的 snapshot 直接復原 VM 的 Root disk，只能利用
    snapshot 另外做一個 VM 出來，但是這樣子出來的 VM ip
    就不一樣了，所以對這點有點傷腦筋，VM 的 datadisk 則是可以根據
    snapshot 直接做復原。&lt;/li&gt;
&lt;li&gt;最近比較紅的還是
    OpenStack，參與和開發的公司非常多，所以會讓人有點懷疑 CloudStack
    未來的發展性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後再補充一些東西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想用 local storage 的話，必須用管理者權限進入 WebUI 去改設定啟用
    local storage 才行，不然只能用 shared storage&lt;/li&gt;
&lt;li&gt;安裝 XenServer 的時候，選擇 XenDesktop optimized 的話，storage 會從
    lvm 轉為 ext，但是在 CloudStack 中當作 local storage
    還是可以正常使用的，效能的話我就不太清楚了。&lt;/li&gt;
&lt;li&gt;不建議將已經有開啟 VM 的 hypervisor 加入到 CloudStack
    中，這點是官方講的，還是要注意一下。&lt;/li&gt;
&lt;li&gt;刪除 host 或 storage 或其他啥的會失敗無法刪的話，請參考
    &lt;a href="http://wiki.cloudstack.org/display/QA/Organization+states"&gt;http://wiki.cloudstack.org/display/QA/Organization+states&lt;/a&gt;
    ，這篇會告訴你該如何處理&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cloudstack"></category><category term="openstack"></category><category term="xenserver"></category></entry><entry><title>Django name array</title><link href="http://blog.carlcarl.me/444/django-name-array/" rel="alternate"></link><updated>2012-05-09T17:38:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-09:444/django-name-array/</id><summary type="html">&lt;p&gt;在寫 php 的時候，如果想傳多個 checkbox 的值的話，常會在 html
裏面設定這些 checkbox 的 name 為
&lt;code&gt;list[]&lt;/code&gt;，也就是會加個 &lt;code&gt;[]&lt;/code&gt; 在名稱後面，在 php 處理的時候就可以利用
&lt;code&gt;$_POST['list']&lt;/code&gt; 取出這個 array。&lt;/p&gt;
&lt;p&gt;而如果是 django name array
要處理的話，方式有點不太一樣，它並不會自動去判斷 &lt;code&gt;[]&lt;/code&gt;，所以在 django
這邊還是必須讀 &lt;code&gt;list[]&lt;/code&gt; 這樣的名稱，這也表示在 html
裡，&lt;code&gt;[]&lt;/code&gt; 是可以不加的，但是我還是建議加上就是了，至少這樣我覺得會比較好懂。&lt;br /&gt;
來看一下簡單的範例：&lt;/p&gt;
&lt;p&gt;html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list[]&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value 1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list[]&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value 2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list[]&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value 3&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list[]&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value 4&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list[]&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value 5&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;django&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;list[]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# 用 request.POST[&amp;#39;list[]&amp;#39;] 會讀不到&lt;/span&gt;

&lt;span class="c"&gt;# 拿到之後可以用 for loop 來抓裏面的值&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就可以拿到 list 這個 array，並做更進一步處理了。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4997252/"&gt;http://stackoverflow.com/questions/4997252/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/801354/"&gt;http://stackoverflow.com/questions/801354/&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="python"></category></entry><entry><title>Javascript check if array and empty</title><link href="http://blog.carlcarl.me/438/javascript-check-if-array-and-empty/" rel="alternate"></link><updated>2012-05-09T04:24:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-09:438/javascript-check-if-array-and-empty/</id><summary type="html">&lt;p&gt;列出一些我覺得比較 OK 的方法，至於其他還有一些方法可以參考最下方的網址。  
判斷是否為 array 的方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// 第1種：先用 if 判斷瀏覽器是否支援此method 然後再執行&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 第2種&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[object Array]&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;// 第3種&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;判斷 array 是否為 empty的方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Array is empty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外如果還要判斷在 array 裡的某個 key 是否存在的話：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4775722/"&gt;http://stackoverflow.com/questions/4775722/&lt;/a&gt;
&lt;a href="http://stackoverflow.com/questions/2672380/"&gt;http://stackoverflow.com/questions/2672380/&lt;/a&gt;
&lt;a href="http://stackoverflow.com/questions/1098040/"&gt;http://stackoverflow.com/questions/1098040/&lt;/a&gt;&lt;/p&gt;</summary><category term="array"></category><category term="empty"></category><category term="javascript"></category></entry><entry><title>oh my zsh: my theme</title><link href="http://blog.carlcarl.me/414/oh-my-zsh-mytheme/" rel="alternate"></link><updated>2012-05-06T00:34:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-06:414/oh-my-zsh-mytheme/</id><summary type="html">&lt;p&gt;&lt;img alt="zsh" src="http://i.imgur.com/abOdnAul.png" title="Selection_61b4e7" /&gt;&lt;/p&gt;
&lt;p&gt;在之前&lt;a href="http://blog.carlcarl.tw/410/ubuntu%e5%ae%89%e8%a3%9d-oh-my-zsh" title="ubuntu 安裝 oh my zsh"&gt;安裝完 zsh 和 oh my zsh&lt;/a&gt;之後，就先來設定我的 theme 啦。&lt;/p&gt;
&lt;p&gt;但是因為看了老半天沒有一個 theme
符合我的需求，所以我就自己另外弄了一個，大致是從 muse 這個 theme
去改的，另外在搭配部份其他 theme 中的一些小元件。這個 theme 包含了基本的
host name、時間、和 進 git repo 會有的提示，git repo
的狀態包含多種圖示，所以很容易可以看出 repo 中有什麼改變。&lt;/p&gt;
&lt;p&gt;我的 theme 可以在這邊下載：&lt;a href="%20http://dl.dropbox.com/u/4413406/carlcarl.zsh-theme"&gt;載點&lt;/a&gt;。（或是可以直接 clone 我的
&lt;a href="https://github.com/carlcarl/oh-my-zsh"&gt;repo&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;把這個檔案下載下來存成 &lt;code&gt;carlcarl.zsh-theme&lt;/code&gt; 之後，放到
&lt;code&gt;~/.oh-my-zsh/themes/&lt;/code&gt; 底下，修改 &lt;code&gt;~/.zshrc&lt;/code&gt; 中的 &lt;code&gt;ZSH_THEME&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;ZSH_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;carlcarl&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;改完之後，重開
terminal，不過你可能會發現顏色不太一樣，這部份還需要透過設定 terminal
才行，terminal 配色可以參考&lt;a href="http://stevelosh.com/blog/2009/03/candy-colored-terminal/"&gt;這個網站&lt;/a&gt;。以下這邊是他建議的色碼：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Black: 0, 0, 0
Red: 229, 34, 34
Green: 166, 227, 45
Yellow: 252, 149, 30
Blue: 196, 141, 255
Magenta: 250, 37, 115 # 這個我是用 199, 32, 80 這組，我自己感覺是有比較好看XD
Cyan: 103, 217, 240
White: 242, 242, 242
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;以一般 terminal 來當作範例，可以從 Edit-&amp;gt;Profile Preferences-&amp;gt;Colors
這邊來選擇顏色&lt;/p&gt;
&lt;p&gt;&lt;img alt="terminal color" src="http://i.imgur.com/tkCwL9x.png" title="Selection_4fadd9" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;點一個顏色進去，就可以進行修改&lt;/p&gt;
&lt;p&gt;&lt;img alt="terminal color" src="http://i.imgur.com/9wkt1p3.png" title="Selection_fd4dd8" /&gt;&lt;/p&gt;
&lt;p&gt;接著就把上面那個色碼表分別填入到對應顏色的 Red, Green, Blue
欄位裡，這邊可能會有點難懂，簡單講，你可以根據你現在 terminal
提示字元的樣子和顏色去對應設定中的顏色來做修改。&lt;/p&gt;
&lt;p&gt;Theme 的設定大概就到這邊告一段落，本來還想加個有趣的表情符號到提示字元裡，不過想說這樣太花了，所以就算了XD。oh-my-zsh
另外還有 plugin 的部份我還沒試過，有空再來試試看唄。&lt;/p&gt;
&lt;p&gt;附帶一提，terminal 我本來是使用 &lt;a href="http://projects.comum.org/guake"&gt;guake&lt;/a&gt;，但是現在因為用 F12
開啟之後，會有亂碼出現，所以我後來改用 &lt;a href="http://yakuake.kde.org/"&gt;yakuake&lt;/a&gt; 了。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/"&gt;http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://forrst.com/posts/Oh_my_zsh_iTerm2_Nice_Colors_git_hg_suppo-1Ct"&gt;http://forrst.com/posts/Oh_my_zsh_iTerm2_Nice_Colors_git_hg_suppo-1Ct&lt;/a&gt;&lt;/p&gt;</summary><category term="oh-my-zsh"></category><category term="zsh"></category></entry><entry><title>ubuntu install oh my zsh</title><link href="http://blog.carlcarl.me/410/ubuntu-install-oh-my-zsh/" rel="alternate"></link><updated>2012-05-05T23:41:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-05:410/ubuntu-install-oh-my-zsh/</id><summary type="html">&lt;p&gt;在網路上看到 &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh my zsh&lt;/a&gt; 這套件，這個套件對 zsh
做了一些客製化，包含很多外掛以及提示字元主題，感覺還滿炫的，所以就想說從
bash 換成 zsh 看看囉。&lt;/p&gt;
&lt;h3&gt;首先要先安裝 zsh，因為 zsh 預設在 ubuntu 上是沒有安裝的&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install zsh
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;下載 oh-my-zsh 套件到家目錄底下的 &lt;code&gt;.oh-my-zsh&lt;/code&gt; 資料夾&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;複製設定檔樣板出來使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;改成預設使用 zsh，執行以下指令並輸入你的密碼&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chsh -s /bin/zsh
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;開啟 terminal 測試看看&lt;/h3&gt;
&lt;p&gt;下一篇再來講「提示字元主題」調整的部份。&lt;/p&gt;</summary><category term="oh-my-zsh"></category><category term="zsh"></category></entry><entry><title>Ubuntu Tunnel Broker IPv6 連 中研院</title><link href="http://blog.carlcarl.me/397/ubuntu-tunnel-broker/" rel="alternate"></link><updated>2012-05-04T16:36:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-05-04:397/ubuntu-tunnel-broker/</id><summary type="html">&lt;p&gt;最近看到有人用 &lt;a href="http://planykao.blogspot.com/2012/04/archlinux-ipv6-tunnel-broker.html"&gt;Archlinux 設定 Tunnel Broker
的方法&lt;/a&gt;，所以研究了一下該怎麼用，發現還滿簡單的0.0。&lt;/p&gt;
&lt;h3&gt;申請帳號&lt;/h3&gt;
&lt;p&gt;到 &lt;a href="http://tb2.ipv6.ascc.net/"&gt;http://tb2.ipv6.ascc.net/&lt;/a&gt; 註冊一個帳號。&lt;/p&gt;
&lt;h3&gt;安裝 gogoc&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install gogoc
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定 gogoc (&lt;code&gt;/etc/gogoc/gogoc.conf&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;if_prefix&lt;/code&gt; 要看你的網卡裝置名稱叫啥，不過預設應該都是 eth0。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;userid=你的帳號
passwd=你的密碼
server=tb2.ipv6.ascc.net
auth_method=digest-md5
host_type=host
prefixlen=64
if_prefix=eth0
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;開啟 gogoc&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/gogoc start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;網頁測試&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://test-ipv6.com/"&gt;http://test-ipv6.com/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://ipv6day.tw/20helper.html"&gt;http://ipv6day.tw/20helper.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ipv6 test" src="http://i.imgur.com/IxTtYxBl.png" /&gt;&lt;br /&gt;
&lt;img alt="ipv6 test2" src="http://i.imgur.com/tcbmCvdm.png" /&gt;&lt;/p&gt;</summary><category term="ipv6"></category><category term="tunnel broker"></category><category term="ubuntu"></category></entry><entry><title>Ubuntu mount Box service</title><link href="http://blog.carlcarl.me/390/ubuntu-mount-box-service/" rel="alternate"></link><updated>2012-04-20T00:20:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-04-20:390/ubuntu-mount-box-service/</id><summary type="html">&lt;p&gt;之前在 PTT 看到有人分享可以用 boxfs 這個套件來掛載 &lt;a href="http://www.box.com/"&gt;Box&lt;/a&gt; 到本地端的資料夾上，感覺好像還不錯，而且因為之前買 Sony Ericsson 的手機，所以有 Box 額外送的 50G 空間，所以就想說拿來加減用啦。&lt;/p&gt;
&lt;p&gt;首先要先安裝相依的套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install libxml2-dev libfuse-dev libcurl4-gnutls-dev libzip-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著到 &lt;a href="http://code.google.com/p/boxfs/downloads/list"&gt;這邊&lt;/a&gt; 下載最新版本的 boxfs。下載完成後，解壓縮：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tar xzf boxfs-relno.tgz&lt;/p&gt;
&lt;p&gt;接著進入 &lt;code&gt;box-版本&lt;/code&gt; 資料夾，像我的就是 &lt;code&gt;boxfs-0.7&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;boxfs-0.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊還需要再另外安裝 libapp，這邊需要用到 git ，沒有的話就要安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install git-core
git clone http://github.com/drotiro/libapp.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;進入 libapp 資料夾並編譯安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;libapp
make
sudo make install
sudo ldconfig
make apptest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝好 libapp 之後，到外層的資料夾並編譯安裝 boxfs：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到此 boxfs 套件算是安裝完畢，不過還需要登入並掛載到你的檔案系統上，這邊以掛載到你的家目錄底下
box 資料夾為例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/box
boxfs -u usermail -p password ~/box
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行完後，check 一下你的 &lt;code&gt;~/box&lt;/code&gt; 底下是否有東西，有的話就代表掛載成功囉~。 &lt;/p&gt;
&lt;p&gt;目前我遇到的小問題是：&lt;br /&gt;
如果我在手機端刪除掉檔案，在電腦上會發現檔案還存在，必須卸載後再掛載才會更新，卸載的話可以直接使用 &lt;code&gt;umount&lt;/code&gt; 這個指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;umount ~/box
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://code.google.com/p/boxfs/wiki/Compiling"&gt;http://code.google.com/p/boxfs/wiki/Compiling&lt;/a&gt;&lt;/p&gt;</summary><category term="box"></category><category term="boxfs"></category></entry><entry><title>2012 OSDC</title><link href="http://blog.carlcarl.me/382/2012-osdc/" rel="alternate"></link><updated>2012-04-17T21:23:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-04-17:382/2012-osdc/</id><summary type="html">&lt;p&gt;&lt;img alt="OSDC" src="http://i.imgur.com/IG3xtcu.jpg" title="DSC_0113" /&gt;&lt;/p&gt;
&lt;p&gt;第一次去
OSDC，比我想像中的有趣很多！幾乎每位講者都滿有梗的！而且很多投影片都做得很棒
(某個在講啥 s pen 的除外 就真的滿無聊的XD，回頭望向那學校的
seminar.....。&lt;/p&gt;
&lt;p&gt;雖然覺得要在那麼短的時間學到一些東西，有點難度啦\~，比較偏向瞭解有什麼新東西和感受一下那種氣氛。  &lt;/p&gt;
&lt;p&gt;然後還看到了幾位以前的學長\~\~，米蟲大大以前好像有看過，不過已經忘了長啥樣子了XD，還有幾位在噗浪有追的大大也有出現，不過我還是他們不知道長怎樣就是了\~\~，而且我也不太會裝熟XD。&lt;br /&gt;
是說之前都是用G+在追一些網路名人比較多，現在比較偏向用噗浪追了:p&lt;/p&gt;
&lt;p&gt;覺得 400 元能聽到許多大神的演講+一堆點心能吃+拿贈品+跟 SG 合照(?&lt;br /&gt;
算是非常物超所值XD，車票錢反而還花比較多(有點辛酸就是了
為什麼我不在台北QQ&lt;/p&gt;
&lt;p&gt;很久沒打心得了，感覺打得很不順\~\~，詳細的心得就懶得 po 了XD。&lt;/p&gt;</summary><category term="OSDC"></category></entry><entry><title>github readme with image</title><link href="http://blog.carlcarl.me/366/github-readme-with-image/" rel="alternate"></link><updated>2012-04-08T02:09:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-04-08:366/github-readme-with-image/</id><summary type="html">&lt;p&gt;github readme 的圖片目前看到比較方便的作法好像都是放在程式的資料夾裡面
push 上去，然後再利用連結去連圖片。&lt;/p&gt;
&lt;p&gt;github 圖片連結通常是這樣的格式：  &lt;/p&gt;
&lt;p&gt;「http://github.com/&lt;code&gt;yourname&lt;/code&gt;/&lt;code&gt;your-repository&lt;/code&gt;/raw/master/&lt;code&gt;your-folder&lt;/code&gt;/&lt;code&gt;xxx.png&lt;/code&gt;」&lt;/p&gt;
&lt;p&gt;要自己設定的：&lt;code&gt;yourname&lt;/code&gt;, &lt;code&gt;your-repository&lt;/code&gt;, &lt;code&gt;your-folder&lt;/code&gt;, &lt;code&gt;xxx.png&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yourname&lt;/code&gt;: 你的帳號。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;your-respository&lt;/code&gt;: 你的 project 名稱。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;your-folder&lt;/code&gt;: 你放圖片的資料夾名稱，如果是直接放在 project
    的目錄底下的話，就可以省略這個。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxx.png&lt;/code&gt;: 你的圖片名稱。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外再附上 markdown 寫法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/yourname/your-repository/raw/master/your-folder/xxx.png)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;alt text&lt;/code&gt; 是圖片的替代文字，看你想打啥。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://groups.google.com/forum/?fromgroups#!topic/github/T3X1iadPH14"&gt;https://groups.google.com/forum/?fromgroups#!topic/github/T3X1iadPH14&lt;/a&gt;&lt;/p&gt;</summary><category term="git"></category><category term="github"></category><category term="markdown"></category></entry><entry><title>ajaxfileupload SyntaxError: missing } in XML expression</title><link href="http://blog.carlcarl.me/355/ajaxfileupload-syntaxerror-missing-in-xml-expression/" rel="alternate"></link><updated>2012-04-06T04:39:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-04-06:355/ajaxfileupload-syntaxerror-missing-in-xml-expression/</id><summary type="html">&lt;p&gt;本來用 &lt;a href="http://www.phpletter.com/Our-Projects/AjaxFileUpload/"&gt;ajaxfileupload&lt;/a&gt;
用得好好的，結果不知道為什麼就突然出現這個錯誤，查了一下資料再加上自己比對的結果才發現，原來是因為我在
server 端的 response 加上 content type="application/json"
的關係，而這個結果導致在 client 這邊的 response 被 &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;
給包了起來，也因此在 parse 的時候出現錯誤。&lt;/p&gt;
&lt;p&gt;解決方法有兩種：&lt;br /&gt;
1. server 端拿掉 minetype&lt;br /&gt;
2. client 端把 response 的 &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt; 處理掉。&lt;br /&gt;
這邊我是選擇了第2種方法來做，因為我覺得 minetype
這東西是需要加的，現在不加怕以後會有相容性問題。&lt;/p&gt;
&lt;p&gt;這邊其實很簡單，只要在 ajaxfileupload.js 中修改 uploadHttpData functon
為以下的樣子就行了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;uploadHttpData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xml&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseXML&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// If the type is &amp;quot;script&amp;quot;, eval it in global context&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;script&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalEval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Get the JavaScript object, if JSON is used.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If you add mimetype in your response,&lt;/span&gt;
        &lt;span class="c1"&gt;// you have to delete the &amp;#39;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&amp;#39; tag&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// evaluate scripts within html&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;div&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;evalScripts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//alert($(&amp;#39;param&amp;#39;, data).each(function(){alert($(this).attr(&amp;#39;value&amp;#39;));}));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加上了一些修正之後，為了以後方便就丟到 &lt;a href="https://github.com/carlcarl/AjaxFileUpload"&gt;github&lt;/a&gt;
上面了，需要的可以直接抓下來用。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://www.iteye.com/problems/34213"&gt;http://www.iteye.com/problems/34213&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/3939741/ajaxfileupload-syntaxerror-missing-in-xml-expression"&gt;http://stackoverflow.com/questions/3939741/&lt;/a&gt;&lt;/p&gt;</summary><category term="ajax"></category><category term="ajaxfileupload"></category></entry><entry><title>Django ajax file upload</title><link href="http://blog.carlcarl.me/342/django-ajax-file-upload/" rel="alternate"></link><updated>2012-04-03T21:56:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-04-03:342/django-ajax-file-upload/</id><summary type="html">&lt;p&gt;原本以為很簡單可以完成的東西，結果花了我不少時間解決囧。&lt;/p&gt;
&lt;p&gt;Ajax 檔案上傳我用的是 &lt;a href="http://www.phpletter.com/Our-Projects/AjaxFileUpload/"&gt;ajaxfileupload&lt;/a&gt; 這個 jQuery 套件，問題在於
Django 會檢查 csrf 的問題，如果我不在 settings.py 裡的
&lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 加上
&lt;code&gt;django.middleware.csrf.CsrfViewMiddleware&lt;/code&gt;，上傳會出現 syntax
error，如果我加上了，則是會跟我說 csrf token 找不到。&lt;/p&gt;
&lt;p&gt;後來找到的解決辦法就是在 views.py 裡拿到 csrf token 並傳到 template
中，然後再改寫 ajaxfileupload.js 中的內容，讓它支援傳送參數，接著將 csrf
token 當作參數傳送回去就 OK 了。&lt;/p&gt;
&lt;p&gt;​1. 在 settings.py 中確認 &lt;code&gt;django.middleware.csrf.CsrfViewMiddleware&lt;/code&gt; 是否在
 &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 中，沒有的話就加進去，如以下範例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;​2. 在你的 views.py 中 &lt;code&gt;import get_token&lt;/code&gt; ，然後將拿到的 token 傳到
template，以下是個簡單的範例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.middleware.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_token&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RequestContext&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;csrf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;csrf_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;csrf_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;context_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;​3. 改寫 ajaxfileupload.js&lt;br /&gt;
這裡可以參考&lt;a href="http://www.linuxfly.org/post/519/"&gt;這邊&lt;/a&gt;的「三、支持額外參數」的部份。&lt;br /&gt;
4. 在 call ajaxfileupload 的 function 加上 csrf token 的參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;secureuri&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;csrfmiddlewaretoken&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{ csrf_token }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nx"&gt;fileElementId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fileToUpload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;​5. 大功告成！&lt;/p&gt;</summary><category term="ajax"></category><category term="ajaxfileupload"></category><category term="csrf"></category><category term="django"></category><category term="python"></category></entry><entry><title>python documentation: epydoc</title><link href="http://blog.carlcarl.me/335/python-documentation-epydoc/" rel="alternate"></link><updated>2012-04-01T16:05:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-04-01:335/python-documentation-epydoc/</id><summary type="html">&lt;p&gt;&lt;a href="http://epydoc.sourceforge.net/index.html"&gt;epydoc&lt;/a&gt; 是利用 parse python 的程式來製作文件，文件的類型像是一般的 html 和 pdf 都能產生。我個人是比較偏好 html 的格式囉，它的 html 樣板跟 Javadoc 的配置差不多，比較習慣。&lt;/p&gt;
&lt;p&gt;它 parse 程式的方法主要是利用 method 一開始的 &lt;code&gt;"""&lt;/code&gt; 註解，不習慣寫的人可以參考它的 &lt;a href="http://epydoc.sourceforge.net/fields.html#fields"&gt;欄位官方範例&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先要先安裝 &lt;code&gt;epydoc&lt;/code&gt;，在官方網站上沒講到 ubuntu
的安裝包，用 &lt;code&gt;apt-get&lt;/code&gt; 也找不到，後來試看看 &lt;code&gt;pip install epydoc&lt;/code&gt; 就 OK
了。這邊有點要注意的是，如果你的 project
是在 &lt;code&gt;virtualenv&lt;/code&gt; 環境下的話，建議將 &lt;code&gt;epydoc&lt;/code&gt; 也裝在 &lt;code&gt;virtualenv&lt;/code&gt; 裡，不然它 parse 文件時在找相依 library 會有錯誤。&lt;/p&gt;
&lt;p&gt;安裝好後就可以執行指令來 parse 了，將 &lt;code&gt;python_project資料夾&lt;/code&gt; 改成你要
parse 的 project 資料夾名稱，另外再指定「你要的文件資料夾名稱」即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;epydoc --html python_project資料夾 -o 你要的文件資料夾名稱
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其他更進階的指令參數可以參考&lt;a href="http://epydoc.sourceforge.net/using.html"&gt;這邊&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果出現 &lt;code&gt;ImportError: Settings cannot be imported, because environment
variable DJANGO_SETTINGS_MODULE is undefined.&lt;/code&gt; 錯誤的話，最簡單的方式可以在 project
裡的 &lt;code&gt;**init**.py&lt;/code&gt; 裡加上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;myapp.settings&amp;#39;&lt;/span&gt; 
&lt;span class="c"&gt;# myapp 改成你的 app 名稱&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;嘗試用看看 &lt;code&gt;epydoc&lt;/code&gt; 來 parse python 的程式，出來的 html
文件還算不錯囉，不過不知道還有沒有什麼其他比較好的文件產生工具就是了。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://eliasbland.wordpress.com/2010/01/25/importerror-settings-cannot-be-imported-because-environment-variable-django_settings_module-is-undefined/"&gt;http://eliasbland.wordpress.com/2010/01/25/importerror-settings-cannot-be-imported-because-environment-variable-django_settings_module-is-undefined/&lt;/a&gt;&lt;/p&gt;</summary><category term="epydoc"></category><category term="python"></category></entry><entry><title>Gnome shell built-in desktop recording</title><link href="http://blog.carlcarl.me/332/gnome-shell-built-in-desktop-recording/" rel="alternate"></link><updated>2012-03-29T02:35:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-03-29:332/gnome-shell-built-in-desktop-recording/</id><summary type="html">&lt;p&gt;最近才發現 Gnome shell
有內建的錄影功能，虧我之前還找工具找超久囧，這個功能算是滿簡單的，大概講一下它的限制：只能錄影沒有聲音，沒有設定介面，只有快捷鍵，快捷鍵的設定和影片存放的位置都沒辦法修改，都是固定的這樣。不知道以後會不會有介面出來就是了。&lt;/p&gt;
&lt;p&gt;快捷鍵為 &lt;code&gt;ctrl+shift+alt+r&lt;/code&gt;，你沒看錯，就是這四個鍵一起按，按下後，右下角會出現一個小紅色的圓點，表示為錄影中，再按一次快捷鍵就是停止（它沒有暫停的功能），影片預設會存到 &lt;code&gt;/home/你的帳號/&lt;/code&gt; 底下，格式為
webm ，用 smplayer 之類的應該都能開來看，我自己測試錄影的結果是還不錯。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ubuntubuzz.com/2011/11/ubuntu-desktop-screen-recording-tool.html"&gt;http://www.ubuntubuzz.com/2011/11/ubuntu-desktop-screen-recording-tool.html&lt;/a&gt;&lt;/p&gt;</summary><category term="gnome"></category><category term="screencast"></category></entry><entry><title>Ubuntu desktop record: recorditnow+ffmpeg</title><link href="http://blog.carlcarl.me/326/ubuntu-desktop-record-recorditnow-ffmpeg/" rel="alternate"></link><updated>2012-03-29T02:13:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-03-29:326/ubuntu-desktop-record-recorditnow-ffmpeg/</id><summary type="html">&lt;p&gt;&lt;img alt="recorditnow" src="http://i.imgur.com/EQUigGel.png" title="RecordItNow_507" /&gt;&lt;/p&gt;
&lt;p&gt;最近找了很多類似的軟體，不過有些都弄不起來，不然就是怪怪的囧，後來試了這套組合發現還不錯：recorditnow + ffmpeg，ffmpeg 是核心，recorditnow 是 frontend。&lt;/p&gt;
&lt;p&gt;下面是使用教學的影片，可以參考看看：&lt;br /&gt;
&lt;a href="http://www.youtube.com/watch?v=dEnZe-qfLWA"&gt;http://www.youtube.com/watch?v=dEnZe-qfLWA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不過我直接下 recorditnow 執行 ffmpeg 選項會有沒辦法停止的問題。&lt;br /&gt;
&lt;a href="https://bugs.launchpad.net/ubuntu/+source/recorditnow/+bug/858973"&gt;https://bugs.launchpad.net/ubuntu/+source/recorditnow/+bug/858973&lt;/a&gt;&lt;br /&gt;
上面這個連結有提供修正的 PPA&lt;br /&gt;
以 ubuntu 來講，執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo add-apt-repository ppa:ap10336/ppa
sudo apt-get update
sudo apt-get install recorditnow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就 ok 了。&lt;/p&gt;</summary><category term="ffmpeg"></category><category term="recorditnow"></category><category term="ubuntu"></category></entry><entry><title>Install openid server: masquerade</title><link href="http://blog.carlcarl.me/287/install-openid-server-masquerade/" rel="alternate"></link><updated>2012-03-21T04:08:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-03-21:287/install-openid-server-masquerade/</id><summary type="html">&lt;p&gt;&lt;img alt="masquerade" src="http://i.imgur.com/cdwZUHDl.png" title="masquerade" /&gt; &lt;/p&gt;
&lt;p&gt;最近需要安裝 openid server，所以找了很多的 library
來試，我是從這個&lt;a href="http://wiki.openid.net/w/page/12995226/Run-your-own-identity-server"&gt;openid server
清單&lt;/a&gt;下去找，主要功能需求是希望能夠支援多人+資料庫+可以直接連線做認證的部份，但是試了好幾個
php, python 的沒一個可以說是符合我需求的，perl
那個文件更是完全看不懂orz。&lt;/p&gt;
&lt;p&gt;後來考慮試試看&lt;a href="https://github.com/dbloete/masquerade"&gt;masquerade&lt;/a&gt; 這個基於 RoR 的
library，建完之後發現幾乎符合我的需求，而且安裝基本上不會說太難，所以就選這套啦。作者在
github project 首頁的 README 是比較新的版本(相較於它的 project wiki
)，但是還是有部份是有問題的，所以我另外 fork 出來，再修改一下
README，這是&lt;a href="https://github.com/carlcarl/masquerade"&gt;我的連結&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;首先要先建立好 RoR 的環境，這邊提供一個可以作為參考的&lt;a href="http://www.cnblogs.com/feichan/archive/2011/11/16/2251659.html"&gt;連結&lt;/a&gt;，另外
mysql 和 postfix 也可以先安裝好。&lt;/p&gt;
&lt;p&gt;接著輸入指令將程式下載下來，這是我的 fork，README 部份有更新，另外修正了
yml 的格式錯誤&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://carlcarl@github.com/carlcarl/masquerade.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;進入 masquerade 目錄會有提示建議你用 nvm
安裝一個ruby版本，照著它給的指令安裝就OK了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;masqurade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著可以按照我連結裡的 README 來作，中途有遇到的問題我加進 README 裡的
Notice 部份，我這邊另外列出比較要注意的幾點&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;設定部份他有分 development, test 和 production
    環境，所以要注意你在啥環境底下執行和要修改哪個環境的設定&lt;/li&gt;
&lt;li&gt;database.yml 的部份，想方便的話就只要修改帳號為 root 和修改密碼為
    root 的密碼，資料庫它會幫你建立&lt;/li&gt;
&lt;li&gt;app_config.yml
    大部分設定可以先放著不動，等到大致功能測試完畢再來修改也可以。&lt;/li&gt;
&lt;li&gt;port預設是在 3000，所以在認證的時候在網址裡也要將 port 加進去。&lt;/li&gt;
&lt;li&gt;認證的部份比較詭異的是&lt;strong&gt;它不是直接提供輸入帳密認證的欄位&lt;/strong&gt;，而是叫你去網頁裡的連結登入(如下圖)，登入完之後它會再認證，這部份的原理我猜是它在之前把相關的
    request 寫到 session 裡了，所以登入後會去讀之前存的的 request
    session，在允許認證完後，它就會自動導回 client 端去。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="masqurade2" src="http://i.imgur.com/AG7YaZAl.png" /&gt;&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://railsforum.com/viewtopic.php?id=26700"&gt;http://railsforum.com/viewtopic.php?id=26700&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4980877/rails-error-couldnt-parse-yaml"&gt;http://stackoverflow.com/questions/4980877/rails-error-couldnt-parse-yaml&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.reyesyang.info/articles/10-rails3-could-not-parse-yaml"&gt;http://www.reyesyang.info/articles/10-rails3-could-not-parse-yaml&lt;/a&gt;&lt;/p&gt;</summary><category term="masquerade"></category><category term="openid"></category><category term="RoR"></category></entry><entry><title>centos6.2 timezone「tzselect」</title><link href="http://blog.carlcarl.me/273/centos6-2-timezone-tzselect/" rel="alternate"></link><updated>2012-02-24T00:32:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-02-24:273/centos6-2-timezone-tzselect/</id><summary type="html">&lt;p&gt;最近在裝 centos
來用的時候，在設定的時候也用了 &lt;code&gt;ntpd&lt;/code&gt; 來同步時間，不過發現一直沒辦法把時間弄正常，即使我把
ntp server
換成台灣的也一樣，後來想到了之前有用過的辦法，用 &lt;code&gt;/usr/share/zone/info/Asia/Taipei&lt;/code&gt; 覆蓋掉 &lt;code&gt;/etc/localtime&lt;/code&gt;，結果還是不行（之前這樣用有成功過的說 QQ）。&lt;/p&gt;
&lt;p&gt;後來查到一個好像更好的辦法，就是用 &lt;code&gt;tzselect&lt;/code&gt; 這個指令，執行後會出現互動式介面，照著選時區，設定完就正常啦～～。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://bbs.bitscn.com/146159"&gt;http://bbs.bitscn.com/146159&lt;/a&gt;&lt;/p&gt;</summary><category term="centos"></category><category term="ntp"></category><category term="timezone"></category><category term="tzselect"></category></entry><entry><title>git gnuTLS error</title><link href="http://blog.carlcarl.me/269/git-gnutls-error/" rel="alternate"></link><updated>2012-02-22T15:53:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-02-22:269/git-gnutls-error/</id><summary type="html">&lt;p&gt;之前有台機器莫名沒辦法做「git clone https連結」，都會出現 &lt;code&gt;error: GnuTLS
recv error (-9): A TLS packet with unexpected length was
received&lt;/code&gt;，查了老半天，還跟其他台的 git 比較設定，還是找不到答案，後來看到有人自己抓下來編譯好像就OK，所以我也想說自己抓 source code 下來試試看好了 XD。&lt;/p&gt;
&lt;p&gt;去&lt;a href="http://git-scm.com/download"&gt;官網&lt;/a&gt;抓了 source code
下來，編譯並裝到 &lt;code&gt;/usr/local&lt;/code&gt; 底下，測試了一下，果然就可以了！反正更新啥的我也沒差，所以目前就先這樣囉～。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=559371"&gt;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=559371&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://groups.google.com/group/google-code-hosting/browse_thread/thread/cfa3d43bca5d0774?pli=1"&gt;https://groups.google.com/group/google-code-hosting/browse_thread/thread/cfa3d43bca5d0774?pli=1&lt;/a&gt;&lt;/p&gt;</summary><category term="git"></category><category term="gnutls"></category></entry><entry><title>xenserver enable snmpd</title><link href="http://blog.carlcarl.me/262/xenserver-enable-snmpd/" rel="alternate"></link><updated>2012-02-19T16:06:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-02-19:262/xenserver-enable-snmpd/</id><summary type="html">&lt;p&gt;我用的 xenserver 版本為「5.6」，6 以上的版本就不能確定能否這樣做囉。&lt;/p&gt;
&lt;h3&gt;首先要先修改防火牆規則&lt;/h3&gt;
&lt;p&gt;xenserver 雖然本身就有 snmpd 了，不過只單純打開 snmpd 是沒用的，會被防火牆擋下。用 vi
    編輯 &lt;code&gt;/etc/sysconfig/iptables&lt;/code&gt;，找到 &lt;code&gt;-A RH-Firewall-1-INPUT –p udp
    –dport 5353&lt;/code&gt; 這行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-A RH-Firewall-1-INPUT -p ah -j ACCEPT
-A RH-Firewall-1-INPUT -d 224.0.0.251 -p udp -m udp --dport 5353 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加上一行，這行表示允許 snmp 進來的這個 port，也就是 161。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-A RH-Firewall-1-INPUT -p ah -j ACCEPT
-A RH-Firewall-1-INPUT -d 224.0.0.251 -p udp -m udp --dport 5353 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp --dport 161 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;編輯完關掉 vi，輸入以下這行來重新啟動防火牆：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service iptables restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;接著打開 snmpd，輸入以下兩行：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chkconfig snmpd on
service snmpd start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就算大功告成了，如果有需要，再修改 &lt;code&gt;/etc/snmp/snmpd.conf&lt;/code&gt;。例如一開始預設是所有人都可以監控，所以可能要把 &lt;code&gt;com2sec
notConfigUser default public&lt;/code&gt; 中的 &lt;code&gt;default&lt;/code&gt; 改為允許監控你這台的IP。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://support.citrix.com/article/CTX122337"&gt;http://support.citrix.com/article/CTX122337&lt;/a&gt;&lt;/p&gt;</summary><category term="iptables"></category><category term="snmp"></category><category term="snmpd"></category><category term="xenserver"></category></entry><entry><title>[vsphere]Failed to open disk scsi0:0</title><link href="http://blog.carlcarl.me/258/vsphere-failed-to-open-disk-scsi00/" rel="alternate"></link><updated>2012-02-19T00:55:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-02-19:258/vsphere-failed-to-open-disk-scsi00/</id><summary type="html">&lt;p&gt;今天想試試看利用網路上的 Virtual Appliance 開 VM，下載完後利用 client
介面就可以上傳到 datastore，可是在新增 VM，並選擇完 vmdk
檔後，開啟VM時就出現了錯誤訊息囧。&lt;/p&gt;
&lt;p&gt;錯誤訊息內容: &lt;code&gt;Failed to open disk scsi0:0: Unsupported and/or invalid
disk type 7.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Google 了一下，似乎是下載下來後還要做轉換（後來看官方的安裝手冊也是的確講要這樣做 orz）。&lt;br /&gt;
首先要先連到有和上傳的 datastore 連線的 esxi server，接著進到 &lt;code&gt;/vmfs/volumes/你的datastore/&lt;/code&gt;，利用以下指令做轉換：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vmkfstools -i 你原來的vmdk檔 轉完的vmdk檔名
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;兩個檔案名稱不要重複，轉完之後，重新設定 VM 就可以正常開啟囉。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.learnadmin.com/2010/09/solution-vmware-vm-import-failed-to.html"&gt;http://blog.learnadmin.com/2010/09/solution-vmware-vm-import-failed-to.html&lt;/a&gt;&lt;/p&gt;</summary><category term="esx"></category><category term="esxi"></category><category term="vsphere"></category></entry><entry><title>Quorum read</title><link href="http://blog.carlcarl.me/254/quorum-read/" rel="alternate"></link><updated>2012-02-17T21:43:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-02-17:254/quorum-read/</id><summary type="html">&lt;p&gt;最近在看 paper，剛好看到這個名詞，似乎是 Cassandra 有用到的一個技巧。&lt;/p&gt;
&lt;p&gt;在 cluster
的環境中，有時候並不能保證說讀取到的值一定會是最新的，可能會因為架構或設計上的不同，可能在做
replication 的部份是非同步進行的，所以更大大增加拿到舊值的機率。&lt;/p&gt;
&lt;p&gt;此方法簡單說就是讀取多個 node 的值來作比較，基本上這些值都會有
timestamp，所以可以根據時間的新舊來決定該用哪個值，但是還是會有一些問題，像是如果讀到的值都是舊的那該怎麼辦，如果變成一次測全部
node 的值，效能上不用說一定會很慢，所以這個問題我不知道是怎麼解決的。&lt;/p&gt;
&lt;p&gt;其實還滿詭異的，如果真的要要求資料一致性的話，我覺得還不如就選資料一致性較強的
HBase（不過我不太喜歡要分一堆角色的分散式系統，感覺在架構配置上會比較麻煩）。&lt;/p&gt;</summary><category term="Cassandra"></category><category term="hbase"></category></entry><entry><title>svn status appear「~」</title><link href="http://blog.carlcarl.me/249/svn-status/" rel="alternate"></link><updated>2012-02-14T23:46:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-02-14:249/svn-status/</id><summary type="html">&lt;p&gt;最近遇到有人有這個問題，查了一下，這個問題的原因是因為從「一般檔案, 資料夾, 連結」這三種屬性，該檔案從其中一個屬性換成另外一種屬性就會出現這個波浪號狀態。&lt;/p&gt;
&lt;p&gt;不過當然有時候事情不是那麼簡單......，這次遇到的主要原因應該是因為資料夾內的
&lt;code&gt;.svn&lt;/code&gt; 被刪掉了，所以從外面看就會出現這種情形，以下是查到的解決方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mv &lt;span class="nb"&gt;test &lt;/span&gt;test2
svn delete &lt;span class="nb"&gt;test&lt;/span&gt;
mv test2 &lt;span class="nb"&gt;test&lt;/span&gt;
svn add &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先先改資料夾名稱，因為等下要刪掉原本這個資料夾的 svn 紀錄，直接 delete
的話，資料夾就真的會被刪掉，刪完之後再把改過名稱的資料夾改回原來的名稱，改完之後再重新
add，應該就會顯示正常了。&lt;/p&gt;</summary><category term="svn"></category></entry><entry><title>Different color in screen and normal mode</title><link href="http://blog.carlcarl.me/245/different-color-in-screen-and-normal-mode/" rel="alternate"></link><updated>2012-02-10T00:43:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-02-10:245/different-color-in-screen-and-normal-mode/</id><summary type="html">&lt;p&gt;查了一下資料，發現應該是跟顏色的支援有關，要在 &lt;code&gt;.screerc&lt;/code&gt; 裡加上一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;termcapinfo xterm &amp;#39;Co#256:AB=E[48;5;%dm:AF=E[38;5;%dm&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://fcamel-fc.blogspot.com/2009/04/python-vim.html"&gt;http://fcamel-fc.blogspot.com/2009/04/python-vim.html&lt;/a&gt;&lt;/p&gt;</summary><category term="screen"></category><category term="screenrc"></category><category term="vim"></category></entry><entry><title>Linux Mint cinnamon change position of window buttons</title><link href="http://blog.carlcarl.me/239/linux-mint-cinnanmon-change-position-of-window-buttons/" rel="alternate"></link><updated>2012-02-04T18:56:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2012-02-04:239/linux-mint-cinnanmon-change-position-of-window-buttons/</id><summary type="html">&lt;p&gt;==================================================&lt;br /&gt;
2012/03/28更新&lt;/p&gt;
&lt;h1&gt;cinnamon 已經有提供修改按鈕位置的設定了，所以就不用照以下的方法來改哩。&lt;/h1&gt;
&lt;p&gt;最近裝了 cinnamon 來玩玩，是有一些有趣的東西沒錯，像是視窗動畫，不過整體來說，我覺得並沒有好到值得我換成這套，所以用了沒多久我就換回來 Gnome 啦～～。&lt;/p&gt;
&lt;p&gt;不過這邊還是來講一下 cinnamon 怎麼改變視窗按鈕位置的方法吧。&lt;/p&gt;
&lt;p&gt;首先先裝編輯設定的套件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install gconf-editor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行後會出現一個視窗，接著如以下圖片，可以看到右邊有 &lt;code&gt;button layout&lt;/code&gt; 這個欄位，有關閉，最小化，最大化的值，&lt;code&gt;:&lt;/code&gt; 代表相對位置，如下圖的話指的是放在左邊，如果要放在右邊的話就把 &lt;code&gt;:&lt;/code&gt; 移到前面就
OK 了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gconf-editor" src="http://198.199.117.21/wp-content/uploads/2012/02/502.png" /&gt;&lt;/p&gt;</summary><category term="cinnanmon"></category><category term="gconf-editor"></category></entry><entry><title>naming apache log with date</title><link href="http://blog.carlcarl.me/233/naming-apache-log-with-date/" rel="alternate"></link><updated>2011-12-19T17:01:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-12-19:233/naming-apache-log-with-date/</id><summary type="html">&lt;p&gt;目前是用 &lt;code&gt;logrotate&lt;/code&gt; 來作，只要在 &lt;code&gt;/etc/logrotate.d/apache2&lt;/code&gt; 裡加入下面這個參數即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dateext&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外可以根據需求看要不要把 &lt;code&gt;weekly&lt;/code&gt; 改為 &lt;code&gt;daily&lt;/code&gt; 這樣。&lt;/p&gt;
&lt;p&gt;處理過後的檔名就會像這樣 &lt;code&gt;access.log-20111218.gz&lt;/code&gt;，這樣在之後處理和分析
log 會比較方便，另外記得數量也要根據需求改，因為改完後變成能保存的 log
日期也會跟著減少，要增多的話也是直接修改上面 &lt;code&gt;/etc/logrotate.d/apache2&lt;/code&gt; 這個檔案，將 &lt;code&gt;rotate&lt;/code&gt; 後面的數字加大，後面的數字表示要存的 log 數量，超過的話就會將最舊的刪除這樣。&lt;/p&gt;
&lt;p&gt;後記：&lt;br /&gt;
如果要跟 awstats 搭配的話可以在裡面加入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;prerotate
    /usr/lib/cgi-bin/awstats.pl -config&lt;span class="o"&gt;=&lt;/span&gt;你的config檔  -update &amp;gt; /dev/null
endscript
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣才能在壓縮 log 檔之前確保 awstats 不會漏掉log檔的資料&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://groups.google.com/group/linux.debian.user/browse_thread/thread/d1a86eebd2d2e862?pli=1"&gt;http://groups.google.com/group/linux.debian.user/browse_thread/thread/d1a86eebd2d2e862?pli=1&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.doubleservice.com/2011/02/configuration-of-logrotate-with-awstats/"&gt;http://www.doubleservice.com/2011/02/configuration-of-logrotate-with-awstats/&lt;/a&gt;&lt;/p&gt;</summary><category term="apache"></category><category term="daily"></category><category term="logrotate"></category></entry><entry><title>MySQL DB engine with log: Archive</title><link href="http://blog.carlcarl.me/226/mysql-db-engine-with-log-archive/" rel="alternate"></link><updated>2011-12-17T18:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-12-17:226/mysql-db-engine-with-log-archive/</id><summary type="html">&lt;p&gt;前一陣子在看什麼 engine 比較適合拿來單純存
log，後來看到 &lt;code&gt;Archive&lt;/code&gt; 這個似乎不錯，主要有以下優點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert 速度更快。&lt;/li&gt;
&lt;li&gt;佔的資料量較 Myisam 少。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是有優勢，就會有相對的劣勢，Archive 有以下缺點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支援 delete 和 update，只能 insert 和 select。&lt;/li&gt;
&lt;li&gt;不支援 index。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（如果你是想要存每次最後登入時間的話，那 Archive 的確是不適合，因為不支援
index 和 update。）&lt;/p&gt;
&lt;p&gt;但是以現實角度來看單純的 log 表，像是存每次登入的紀錄：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其實真的就只會用到 insert，會用到 delete 和 update 那這個應該不太叫
    log。&lt;/li&gt;
&lt;li&gt;作 select 的機率也是微乎其微，log
    表通常也只有出事的時候會拿出來作搜尋唄。&lt;/li&gt;
&lt;li&gt;不支援 index，但是老實說，insert 和 select
    的次數比率差太多了，如果真的能建 index，那每次 insert
    都會為建立索引這個動作付出額外的成本，實際上應該是劃不來的。&lt;/li&gt;
&lt;li&gt;資料表越來越大該怎麼辦？這邊我是還沒實際用過，不過也可以 dump
    出來或是額外命名，再建一個新的空 table 來裝應該也是可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那可能很多人會覺得看到大家說他 insert 效能比較好，所以就直接改用 Archive
engine 存 log，不過有時候換 engine
其實也會跟資料庫的參數設定有很大的關係，換了也不一定效能會比較好，像是
Myisam 換成
InnoDB，處理並發量也不一定會比較好，如果你的參數設定還是用原本 Myisam
的話=.=。為了確認在我的環境中是否也是如此，所以就做了一下實驗啦～。&lt;/p&gt;
&lt;p&gt;我的 MySQL config 檔案參數主要是以 Myisam
去作調校，InnoDB的部份就沒有作設定哩，主要是試驗是否在此設定中 Archive
的效能還是能比 Myisam 為佳。實驗工具採用「mysqlslap」，實驗內容為5個同時
insert query，各個數量皆為一千三百上下，每個 engine
的實驗都跑五次，數據會較為客觀一點，至於建立的資料表內容這裡就先省略哩，有點懶得打XD。另外由於我實際上是用
MySQL 的 fork 版本 &lt;code&gt;MaraiDB&lt;/code&gt;，所以順便附上新 engine
 &lt;code&gt;Aria&lt;/code&gt; 的測試結果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Myisam：  
Benchmark  
Average number of seconds to run all queries: 0.271 seconds  
Minimum number of seconds to run all queries: 0.263 seconds  
Maximum number of seconds to run all queries: 0.297 seconds  
Number of clients running queries: 5  
Average number of queries per client: 1338

Aria：  
Benchmark  
Average number of seconds to run all queries: 3.103 seconds  
Minimum number of seconds to run all queries: 3.062 seconds  
Maximum number of seconds to run all queries: 3.137 seconds  
Number of clients running queries: 5  
Average number of queries per client: 1338

Archive：  
Benchmark  
Average number of seconds to run all queries: 0.149 seconds  
Minimum number of seconds to run all queries: 0.145 seconds  
Maximum number of seconds to run all queries: 0.158 seconds  
Number of clients running queries: 5  
Average number of queries per client: 1338
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;從數據可以看出 Archive 在 insert 效能上的確是最好的。至於 Aria
明顯很慢，不知道是不是我沒有調校 Aria
的參數設定的關係，這部份可能之後還需要再作驗證就是了。select
的數據應該就不用試了，不能建 index，怎樣都一定會被其他 engine 打死。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://dev.mysql.com/doc/refman/5.1/en/archive-storage-engine.html"&gt;http://dev.mysql.com/doc/refman/5.1/en/archive-storage-engine.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://60.29.242.49/?p=60"&gt;http://60.29.242.49/?p=60&lt;/a&gt;&lt;/p&gt;</summary><category term="archive"></category><category term="innodb"></category><category term="mariadb"></category><category term="myisam"></category><category term="mysql"></category></entry><entry><title>Several ways to check process port</title><link href="http://blog.carlcarl.me/218/several-ways-to-check-process-port/" rel="alternate"></link><updated>2011-12-15T02:51:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-12-15:218/several-ways-to-check-process-port/</id><summary type="html">&lt;p&gt;目前知道的就以下四種，記得用 root
權限來看，或者是指令前面加 &lt;code&gt;sudo&lt;/code&gt;，不然有些 process 會看不到。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;netstat -antp&lt;/li&gt;
&lt;li&gt;rpcinfo -p&lt;/li&gt;
&lt;li&gt;lsof -i :port&lt;/li&gt;
&lt;li&gt;fuser port/tcp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上指令的 &lt;code&gt;port&lt;/code&gt; 為你要的 port
數字。基本上用 &lt;code&gt;netstat&lt;/code&gt; 會列出一堆清單，通常就可以在其中找到，不行的話就使用 &lt;code&gt;lsof&lt;/code&gt;，還是沒有的話，接下來就用 &lt;code&gt;fuser&lt;/code&gt;，如果真的還是沒有，最後就用 &lt;code&gt;rpcinfo&lt;/code&gt; 查看，再沒有我就沒辦法了 XD。&lt;/p&gt;
&lt;p&gt;如果是要看 80 port 被什麼所佔用，可以如下使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lsof -i :80
fuser 80:tcp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://bbs.chinaunix.net/archiver/?tid-1916729.html"&gt;http://bbs.chinaunix.net/archiver/?tid-1916729.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.debian-administration.org/articles/184"&gt;http://www.debian-administration.org/articles/184&lt;/a&gt;&lt;/p&gt;</summary><category term="fuser"></category><category term="lsof"></category><category term="netstat"></category><category term="port"></category><category term="rpcinfo"></category></entry><entry><title>MySQL change engine of all tables</title><link href="http://blog.carlcarl.me/170/mysql-change-engine-of-all-tables/" rel="alternate"></link><updated>2011-12-10T00:22:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-12-10:170/mysql-change-engine-of-all-tables/</id><summary type="html">&lt;p&gt;最近裝好&lt;a href="http://mariadb.org/"&gt;mariaDB&lt;/a&gt;，想順便把之前用的 &lt;code&gt;Myisam&lt;/code&gt; 改成新的 &lt;code&gt;Aria&lt;/code&gt; engine，可是
table 一堆，在 phpmyadmin 介面上也找不到比較方便的功能可以直接轉換所有的
table engine。&lt;/p&gt;
&lt;p&gt;後來查了一下，有幾種作法，一種是寫 php，然後 for 迴圈用 sql 修改
engine，不過為了這個寫 php 總是覺得很奇怪。後來查到另外一個作法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alter table &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; engine = Aria;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;table_schema&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,....,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要注意 &lt;code&gt;table_name&lt;/code&gt; 不用改，這個是 &lt;code&gt;informatio_schema.tables&lt;/code&gt; 中的一個欄位，&lt;code&gt;engine&lt;/code&gt; 後面的 &lt;code&gt;Aria&lt;/code&gt; 可以改成你要的
engine 名稱，再來是最後的 &lt;code&gt;db1, db2...&lt;/code&gt; 這些，如果只有一個
database，只需要填一個就好。執行完後，會顯示出所有 alter table
的指令，接下來把這些文字全部複製輸入，就可以一口氣修改所有的 table 啦。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/6317966"&gt;http://stackoverflow.com/questions/6317966&lt;/a&gt;&lt;/p&gt;</summary><category term="aria"></category><category term="mariadb"></category><category term="mysql"></category></entry><entry><title>(98)Address already in use: make_sock: could not bind to address 80</title><link href="http://blog.carlcarl.me/166/98address-already-in-use-make_sock-could-not-bind-to-address-80/" rel="alternate"></link><updated>2011-12-05T19:37:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-12-05:166/98address-already-in-use-make_sock-could-not-bind-to-address-80/</id><summary type="html">&lt;p&gt;最近在重開 server 的時候突然發現 apache
怎麼沒有開，重開之後就出現如標題的錯誤，查了一下，應該是有個莫名的
process 把 port 給 bind 住了，用了一堆指令，一直 kill
process，結果怎麼好像都沒用囧，後來才試到一個可以解決的指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo fuser 80/tcp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行之後就會顯示是哪個 process id 佔住的。&lt;br /&gt;
很奇怪的是我使用「netstat」去看居然是找不到的=
=，另外要注意的是記得使用「sudo」或者是用 root
來查看，不然有可能會看不到。砍掉之後，再開啟 apache
就可以成功開啟了，算是一個滿怪的問題，當初忙著砍掉，忘記先查看 process
的名稱是什麼，只能先紀錄起來，下次如果還是發生一樣的情況的話，再來看看哩。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.chriskirkland.net/news/76_Apache---Address-already-in-use:-make_sock:-could-not-bind-to-address.html"&gt;http://www.chriskirkland.net/news/76_Apache---Address-already-in-use:-make_sock:-could-not-bind-to-address.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.wallpaperama.com/forums/98address-already-in-use-make-sock-could-not-bind-to-address-80-t1091.html"&gt;http://www.wallpaperama.com/forums/98address-already-in-use-make-sock-could-not-bind-to-address-80-t1091.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.linuxquestions.org/questions/linux-software-2/98-address-already-in-use-make_sock-could-not-bind-to-address-0-0-0-0-443-a-110753/"&gt;http://www.linuxquestions.org/questions/linux-software-2/98-address-already-in-use-make_sock-could-not-bind-to-address-0-0-0-0-443-a-110753/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.directadmin.com/forum/showthread.php?t=33412&amp;amp;page=1"&gt;http://www.directadmin.com/forum/showthread.php?t=33412&amp;amp;page=1&lt;/a&gt;&lt;/p&gt;</summary><category term="fuser"></category><category term="ubuntu"></category></entry><entry><title>apache prevent executing php in specific directory</title><link href="http://blog.carlcarl.me/159/apache-prevent-executing-php-in-specific-directory/" rel="alternate"></link><updated>2011-12-04T23:12:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-12-04:159/apache-prevent-executing-php-in-specific-directory/</id><summary type="html">&lt;p&gt;最近剛修復的問題，其實也滿常見的，不過有時候總是會忽略這種簡單的問題orz。&lt;/p&gt;
&lt;p&gt;如果要預防使用者將 php 檔案上傳後去執行的話，只要在 apache 的 config
檔中加入以下設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;AllowOverride None
php_flag engine off
Allow from all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Directory&lt;/code&gt; 後面的 &lt;code&gt;/var/www/upload&lt;/code&gt;
記得使用自己要的路徑，設定完並重開 apache 後，如果是在這個目錄底下的
php，就會改成下載 php 而不是執行
php。另外還有一種方法也是可以作，不過是用副檔名的方法作過濾，顯然還是上面的方法會比較好囉。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://www.yunsec.net/a/special/linux/safe/2010/0517/3924.html"&gt;http://www.yunsec.net/a/special/linux/safe/2010/0517/3924.html&lt;/a&gt;&lt;/p&gt;</summary><category term="apache"></category><category term="php"></category></entry><entry><title>wordpress preview can't find the page</title><link href="http://blog.carlcarl.me/153/wordpress-preview-cant-find-the-page/" rel="alternate"></link><updated>2011-11-27T17:10:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-11-27:153/wordpress-preview-cant-find-the-page/</id><summary type="html">&lt;p&gt;最近終於申請好網域，把我的部落格網址給更新，一開始我只有更新「網誌網址」，「Wordpress網址」我本來想說用舊的就好了，可是後來在發表文章的時候發現，&lt;strong&gt;預覽網頁會找不到網頁啊～～&lt;/strong&gt;，後來把「WordPress網址」改成跟「網誌網址」一樣之後，預覽就沒問題了，這算是 Bug 嗎= ="。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wordpress網址" src="http://i.imgur.com/sTtl5Dsl.png" title="wordpress網址" /&gt;&lt;/p&gt;</summary><category term="wordpress"></category></entry><entry><title>DotCloud Django admin login error</title><link href="http://blog.carlcarl.me/135/dotcloud-django-admin-login-error/" rel="alternate"></link><updated>2011-11-27T16:53:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-11-27:135/dotcloud-django-admin-login-error/</id><summary type="html">&lt;p&gt;在建置好 admin 相關的設定和 static file 路徑後，終於進到輸入 admin
帳密的畫面了，但是按鈕連結卻是錯誤的，看了一下 source code
的部份，「app_path」這個變數似乎有問題。&lt;/p&gt;
&lt;p&gt;找了好久都找不到解決的辦法，後來看到一篇文章發現似乎是 DotCloud
本身的問題。&lt;br /&gt;
[http://stackoverflow.com/questions/7057111 ][]&lt;br /&gt;
如果真的想試試看的話，可以 ssh 到你的 app.www，然後使用 vim：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vim env/lib/python2.6/site-packages/django/contrib/admin/templates/admin/login.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將 &lt;code&gt;{{ app_path }}&lt;/code&gt; 改為 &lt;code&gt;/admin/&lt;/code&gt;，但是這樣作其實只是治標，因為每次
push 都會重新覆蓋掉，只能等之後看會不會修正了。或者是可以考慮寫個 python
script，然後加入到 &lt;code&gt;postinstall&lt;/code&gt; 這個檔案，每次 push
完就去修改這個檔案之類的，不過我個人是懶得這樣用就是了orz。&lt;/p&gt;</summary><category term="django"></category><category term="Dotcloud"></category><category term="python"></category></entry><entry><title>Dropbox can't sync permission denied</title><link href="http://blog.carlcarl.me/124/ubuntu-dropbox-permission-denied/" rel="alternate"></link><updated>2011-11-23T00:28:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-11-23:124/ubuntu-dropbox-permission-denied/</id><summary type="html">&lt;p&gt;最近在備份 wordpress 的資料到 dropbox
上的時候，突然出現了錯誤：&lt;code&gt;cant sync "file name" permission denied&lt;/code&gt;，看了一下資料夾，只有資料夾有建立起來，但是檔案都沒 sync 成功。但是之前用了也一兩年了都沒有發生這樣的問題，為什麼
dropbox 把資料 sync 到我電腦上的時候會突然出問題呢？  &lt;/p&gt;
&lt;p&gt;花了一段時間查了一些資料，後來才發現是因為我用 ubuntu，然後又用另外一個 &lt;code&gt;ntfs&lt;/code&gt; 裝置來存 dropbox
的東西，才會有這樣的問題。解決方法就是在 &lt;code&gt;mount&lt;/code&gt; 設定檔要多設定一個「uid」的參數。&lt;/p&gt;
&lt;p&gt;首先要修改 &lt;code&gt;/etc/fstab&lt;/code&gt;，範例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/dev/sda2   /media/Data     ntfs-3g  rw,defaults,umask=0000,uid=1000  0  0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;裝置和目錄的地方記得改成自己想要的，後面大致可以直接套用，不過要注意的一點是這邊的
uid 設為 1000，但是其實是要看你帳號的 uid 是多少才決定要輸入多少，你可以用 &lt;code&gt;id&lt;/code&gt; 這個指令來查看你的 uid：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;id 你的帳號
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://forums.dropbox.com/topic.php?id=18517&amp;amp;replies=21#post-191690"&gt;http://forums.dropbox.com/topic.php?id=18517&amp;amp;replies=21#post-191690&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.ascc.sinica.edu.tw/nl/92/1911/03.txt"&gt;http://www.ascc.sinica.edu.tw/nl/92/1911/03.txt&lt;/a&gt;&lt;/p&gt;</summary><category term="dropbox"></category></entry><entry><title>About</title><link href="http://blog.carlcarl.me/114/about/" rel="alternate"></link><updated>2011-11-20T19:43:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-11-20:114/about/</id><summary type="html">&lt;h3&gt;My Information:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Name: 黃健瑋 (Chien-Wei Huang)&lt;/li&gt;
&lt;li&gt;Plurk: &lt;a href="http://www.plurk.com/carlcarl"&gt;http://www.plurk.com/carlcarl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;stackoverflow &lt;img alt="profile for Chien-Wei Huang at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers" src="http://stackoverflow.com/users/flair/667106.png?theme=default" title="profile for Chien-Wei Huang at Stack Overflow, Q&amp;amp;A for professional and enthusiast programmers" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Specialty:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;Programming:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Good: C, PHP, Python, JavaScript&lt;/li&gt;
&lt;li&gt;Normal: C++, Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Web Development:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Frontend: HTML, css, JavaScript (jQuery)&lt;/li&gt;
&lt;li&gt;Backend: PHP, Python (With Django framwwork)&lt;/li&gt;
&lt;li&gt;Database: MySQL (Management and Tuning), MongoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;System Administration&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Linux (Ubuntu, CentOS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;Other:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Version Control Tools(Git, SVN)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>wordpress social share plugin</title><link href="http://blog.carlcarl.me/76/wordpress-social-share-plugin/" rel="alternate"></link><updated>2011-11-20T17:34:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-11-20:76/wordpress-social-share-plugin/</id><summary type="html">&lt;p&gt;&lt;img alt="Tweet, Like, Share and Google +1 Option Page" src="http://i.imgur.com/AuifGS2l.png" title="Tweet, Like, Share and Google +1 Option Page" /&gt;&lt;/p&gt;
&lt;p&gt;轉來 wordpress 之後，為了找社群分享外掛找了好久，最後找到這個&lt;a href="http://wordpress.org/extend/plugins/only-tweet-like-share-and-google-1/"&gt;Tweet, Like,
Share and Google +1 Option Page&lt;/a&gt; ，他的好處在於：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按鈕大，明顯又好按，圖示也算不錯看&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以自己加按鈕啊～～～，所以我後來自已加了個噗浪的按鈕。沒辦法，wordpress上幾乎沒有噗浪的分享外掛，所以就去這個網頁抓語法，然後搜尋自己想要的噗浪圖示之後，將圖示傳到自己的空間，並加到這個外掛裡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;想要客製化
    css，裡面也有欄位可以輸入，不過似乎要指定 &lt;code&gt;id&lt;/code&gt; 或 &lt;code&gt;class&lt;/code&gt; 才行，直接輸入
    css 屬性，他不理我囧 。&lt;br /&gt;
    另外講一下該怎麼加入自己想要的按鈕：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先先將以下內容複製到「custom button」的欄位裡，我是只有複製到「large
icon」的欄位裡，看個人需要也可以複製到「small
icon」的欄位裡。另外內容中「圖片網址」的部份需要改為實際的網址，嫌麻煩也可以直接
google
網路上的圖示，不然如果有自己的空間的話，就下載下來傳到自己的空間，這樣管理也比較方便。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://plurk.com/?qualifier=shares&amp;amp;status= %%URL%% (%%TITLE%%)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;分享到噗浪！&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://blog.carlcarl.tw/static/blog/images/plurk.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;64&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;64&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外要特別注意一點就是，只是用以上步驟，按鈕是不會出來的= =，還要在外掛
display 的設定將「custom button」的選項勾起來才行：&lt;br /&gt;
&lt;img alt="custom buttons checkbox" src="http://i.imgur.com/AD3tc7Jl.png" title="custom buttons checkbox" /&gt;&lt;/p&gt;
&lt;p&gt;大致是以上步驟，弄完之後就可在文章的標題下方看到圖示囉。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://www.moke.tw/wordpress/note/307"&gt;http://www.moke.tw/wordpress/note/307&lt;/a&gt;&lt;/p&gt;</summary><category term="plurk"></category><category term="share"></category><category term="social"></category><category term="wordpress"></category></entry><entry><title>vim install pylint plugin</title><link href="http://blog.carlcarl.me/51/vim-install-pylint-plugin/" rel="alternate"></link><updated>2011-11-11T13:21:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-11-11:51/vim-install-pylint-plugin/</id><summary type="html">&lt;p&gt;最近在練習 python，所以開始找相關的 vim plugin 來裝裝看，&lt;a href="http://www.vim.org/scripts/script.php?script_id=850"&gt;pydiction&lt;/a&gt;
這個可以補完一些基本的語法，還滿不錯的，可惜會跟我的&lt;a href="http://www.vim.org/scripts/script.php?script_id=2611"&gt;xptemplate&lt;/a&gt;
plugin 衝到QQ，沒辦法就只好捨棄掉了，因為 xptemplate
對我還說還是比較實用～。&lt;/p&gt;
&lt;p&gt;後來在找可以檢查 python 語法的 plugin，在 stackoverflow
這個網站上有看到相關的討論，感覺&lt;a href="http://www.logilab.org/857"&gt;pylint&lt;/a&gt;
這個功能最強大，就想說用這個看看好了。不過通常功能越強大，要安裝或調整就會越麻煩，要不然就是會跟系統有相依性，像
pylint 就必須要先裝套件在系統上才行，在 ubuntu 上可以直接用套件安裝
pylint：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install pylint
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝完之後就可以當作一般指令來檢查 python 程式，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pylint test.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下來如果要整合到 vim 裡面，那就必須再安裝這個 &lt;a href="http://www.vim.org/scripts/script.php?script_id=891"&gt;vim plugin&lt;/a&gt;，沒有 &lt;code&gt;compiler&lt;/code&gt; 這個資料夾的話可以自己手動建立就好了，檔案放完之後在 &lt;code&gt;.vimrc&lt;/code&gt; 檔中加入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;autocmd FileType python compiler pylint
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span style="color: #ff0000;"&gt;上面這行在網頁上沒有講到，所以要注意一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;安裝完後，在開啟 python 檔案的 vim 介面中，輸入(先輸入冒號，冒號跟 P
連在一起會變表情符號囧)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Pylint
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就會告知警告和錯誤囉～。&lt;/p&gt;
&lt;p&gt;另外在儲存檔案的時候，也會跑訊息出來，有時候是覺得滿惱人的，這時候可以去修改那個
vim plugin 的檔案，將以下這個設定從 1 改為 0 就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#let g:pylint_onwrite = 1&lt;/span&gt;
&lt;span class="nb"&gt;let &lt;/span&gt;g:pylint_onwrite &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/airekans/article/details/6869518"&gt;http://blog.csdn.net/airekans/article/details/6869518&lt;/a&gt;&lt;/p&gt;</summary><category term="pylint"></category><category term="vim"></category></entry><entry><title>FreeBSD set default shell to bash</title><link href="http://blog.carlcarl.me/50/freebsd-set-default-shell-to-bash/" rel="alternate"></link><updated>2011-11-06T08:58:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-11-06:50/freebsd-set-default-shell-to-bash/</id><summary type="html">&lt;p&gt;最近興致來，就想說來把 FreeBSD 上的 csh 改成 bash，畢竟我還是比較習慣用 bash～。&lt;/p&gt;
&lt;p&gt;首先先修改預設 shell：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chsh -s /usr/local/bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;輸入密碼後就修改成功了～。&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;再下來你可能會有一個已經有設定過的 &lt;code&gt;.bashrc&lt;/code&gt; 檔案，當你放到家目錄底下的時候可能會發現說："怎麼都沒有反應？"，那是因為FreeBSD這邊吃的是 &lt;code&gt;.bash\_profile&lt;/code&gt;這個設定檔=.=||，為了能夠兼容，我是自己又另外開了 &lt;code&gt;.bash_profile&lt;/code&gt; 檔案，然後在裡面輸入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣以後就只要更新 &lt;code&gt;.bashrc&lt;/code&gt; 這個設定檔就好了～。&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;然後後來又遇到中文無法輸入的問題，這個只要在 &lt;code&gt;.bashrc&lt;/code&gt; 檔案中加入語系設定就可以了，另外再加上 &lt;code&gt;ls&lt;/code&gt; 的 &lt;code&gt;alias&lt;/code&gt;，不然 &lt;code&gt;ls&lt;/code&gt; 輸出的目錄都不會標顏色：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;zh_TW.UTF-8
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LC_CTYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;zh_TW.UTF-8
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls -G&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果在 &lt;code&gt;.bashrc&lt;/code&gt; 裡需要針對OS作判斷的話可以使用 &lt;code&gt;uname&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;OS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uname&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;/p&gt;
&lt;p&gt;chsh&lt;/p&gt;
&lt;p&gt;&lt;a href="http://unix.ctocio.com.cn/138/9289638.shtml"&gt;http://unix.ctocio.com.cn/138/9289638.shtml&lt;/a&gt;
&lt;a href="http://hsiao-ting.blogspot.com/2007/09/freebsdbash_19.html"&gt;http://hsiao-ting.blogspot.com/2007/09/freebsdbash_19.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.bash_profile&lt;/p&gt;
&lt;p&gt;&lt;a href="http://franks543.blogspot.com/2007/03/bashrc-bashprofile-freebsd.html"&gt;http://franks543.blogspot.com/2007/03/bashrc-bashprofile-freebsd.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文輸入&lt;/p&gt;
&lt;p&gt;&lt;a href="http://netlab.cse.yzu.edu.tw/~statue/freebsd/zh-tut/shell.html"&gt;http://netlab.cse.yzu.edu.tw/~statue/freebsd/zh-tut/shell.html&lt;/a&gt;
&lt;a href="http://blog.csdn.net/magicbreaker/article/details/2296907"&gt;http://blog.csdn.net/magicbreaker/article/details/2296907&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;color&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cyberciti.biz/tips/freebsd-how-to-enable-colorized-ls-output.html/"&gt;http://www.cyberciti.biz/tips/freebsd-how-to-enable-colorized-ls-output.html/&lt;/a&gt;
&lt;a href="http://blog.tenyi.com/2007/10/shellcolor-prompt.html/"&gt;http://blog.tenyi.com/2007/10/shellcolor-prompt.html/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OS&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/394230/detect-os-from-a-bash-script/"&gt;http://stackoverflow.com/questions/394230/detect-os-from-a-bash-script/&lt;/a&gt;
&lt;a href="http://www.cyberciti.biz/tips/freebsd-how-to-enable-colorized-ls-output.html/"&gt;http://www.cyberciti.biz/tips/freebsd-how-to-enable-colorized-ls-output.html/&lt;/a&gt;
&lt;a href="http://blog.csdn.net/magicbreaker/article/details/2296907/"&gt;http://blog.csdn.net/magicbreaker/article/details/2296907/&lt;/a&gt;&lt;/p&gt;</summary><category term="bash"></category><category term="freebsd"></category></entry><entry><title>Ubuntu nautilus video thumbnail</title><link href="http://blog.carlcarl.me/49/ubuntu-nautilus-thumbnail/" rel="alternate"></link><updated>2011-11-03T18:31:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-11-03:49/ubuntu-nautilus-thumbnail/</id><summary type="html">&lt;p&gt;最近發現有些影片的預覽圖一直沒辦法看到，想說會不會是播放器的問題，可是搞了老半天卻還是不行。在查了一些資料之後才發現，這個原因好像是因為在之前偵測某幾個影片預覽圖的時候可能失敗還是怎樣，然後這幾個影片就從此不會再作擷取預覽圖的動作，以下是解決方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rm -r ~/.thumbnails/fail/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;刪完之後再重新整理就 OK 哩～。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ubuntu-tw.org/modules/newbb/viewtopic.php?viewmode=compact&amp;amp;topic_id=9430&amp;amp;forum=4"&gt;http://www.ubuntu-tw.org/modules/newbb/viewtopic.php?viewmode=compact&amp;amp;topic_id=9430&amp;amp;forum=4&lt;/a&gt;&lt;/p&gt;</summary><category term="nautilus"></category><category term="thumbnail"></category><category term="ubuntu"></category></entry><entry><title>postfix error: Client host rejected: cannot find your hostname allow ip</title><link href="http://blog.carlcarl.me/48/postfix-error-client-host-rejected-cannot-find-your-hostname-allow-ip/" rel="alternate"></link><updated>2011-10-28T13:16:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-10-28:48/postfix-error-client-host-rejected-cannot-find-your-hostname-allow-ip/</id><summary type="html">&lt;p&gt;最近用了一個 public ip 開了個 svn + trac server，大致上都還滿順利的，不過在測試寄信到 mail
server 的時候卻出現了錯誤，看了一下 log 檔，訊息是 &lt;code&gt;Client host rejected: cannot find your hostname allow ip&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不知道可能是 mail server 找不到 svn server 的 hostname 還是怎樣，然後試了一些方法好像也都不行，最後想說直接在 &lt;code&gt;/etc/hosts&lt;/code&gt; 裡直接加上「ip」和自定義「hostname」看看，結果就 OK 哩，個人覺得這個方法算是還滿不錯的，不過前提是要有 mail server 的權限就是了。&lt;/p&gt;
&lt;p&gt;以下是一個簡單的設定例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;111.111.111.111 svn.domain.com.tw svn
&lt;/pre&gt;&lt;/div&gt;</summary><category term="postfix"></category></entry><entry><title>ssh slow</title><link href="http://blog.carlcarl.me/47/ssh-slow/" rel="alternate"></link><updated>2011-10-27T20:41:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-10-27:47/ssh-slow/</id><summary type="html">&lt;p&gt;貌似是學校最近 DNS 常出問題還是怎樣，ssh 的速度非常緩慢，後來決定把 config 檔案改一改，改完之後速度果然快很多= =+。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;，以下是修改內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;UseDNS no
GSSAPIAuthentication no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完後執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/ssh restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;收工~，不過如果 DNS 沒問題的話，可能修改這個設定速度不會差太多。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.dk101.com/Discuz/viewthread.php?tid=157716"&gt;http://jeffxie.blog.51cto.com/1365360/293869&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dk101.com/Discuz/viewthread.php?tid=157716"&gt;http://www.dk101.com/Discuz/viewthread.php?tid=157716&lt;/a&gt;  &lt;/p&gt;</summary><category term="ssh"></category></entry><entry><title>doxygen show files with directory level</title><link href="http://blog.carlcarl.me/46/doxygen-show-files-with-directory-level/" rel="alternate"></link><updated>2011-09-30T18:15:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-09-30:46/doxygen-show-files-with-directory-level/</id><summary type="html">&lt;p&gt;因為 project 的檔案太多，用 doxygen parse過後檔案還是多的要死，想說有沒有分資料夾階層顯示的方式。找了很久，後來找到一個折衷的方法，那就是在 config 檔中作以下設定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SHOW_DIRECTORIES = YES
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是顯示出來的樣子......。好吧，個人是覺得有點陽春，可以的話如果有收合的功能就更好了，只能希望之後的版本會有囉。&lt;/p&gt;
&lt;p&gt;&lt;img alt="doxygen_dir.png" src="http://i.imgur.com/WlsqsDB.png" title="doxygen_dir.png" /&gt;  &lt;/p&gt;
&lt;p&gt;參考網址：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/6874800/directories-within-file-list-in-doxygen"&gt;http://stackoverflow.com/questions/6874800/directories-within-file-list-in-doxygen&lt;/a&gt;&lt;/p&gt;</summary><category term="doxygen"></category></entry><entry><title>nodejs express fail</title><link href="http://blog.carlcarl.me/45/nodejs-express-fail/" rel="alternate"></link><updated>2011-09-07T12:09:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-09-07:45/nodejs-express-fail/</id><summary type="html">&lt;p&gt;&lt;a href="http://i.imgur.com/itGPLvWl.png"&gt;&lt;img alt="1315397444-1533326740" src="http://i.imgur.com/itGPLvWl.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前好不容易決定要用 express 這個 framework，可是安裝完執行 project 後卻出現錯誤，拜了 google 大神之後才發現，好像是他不會去找裝在系統中的 express library。事實上，如果有用 npm 裝其他的 module，應該也有可能會出現一樣的錯誤：找不到 module 啊～～。&lt;/p&gt;
&lt;p&gt;後來在&lt;a href="http://stackoverflow.com/questions/5919629/express-module-not-found-when-installed-with-npm#_=_"&gt;stackoverflow也看到有人有同樣的問題&lt;/a&gt;，雖然原 PO 已經選了其中一個回答當作答案，不過顯然那個答案的作法：每次安裝就要複製 library 實在是不怎麼簡潔。後來在文章下面的回答中有看到一個更好的作法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;npm link express
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;問題就輕鬆的解決掉了。&lt;/p&gt;
&lt;p&gt;如果之後裝了其他 module，在使用的時候也出現找不到 module 的錯誤，用 &lt;code&gt;npm link module名稱&lt;/code&gt; 就能解決了。&lt;/p&gt;</summary><category term="express"></category><category term="node.js"></category></entry><entry><title>vimrc check hostname</title><link href="http://blog.carlcarl.me/44/vimrc-check-hostname/" rel="alternate"></link><updated>2011-09-05T18:51:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-09-05:44/vimrc-check-hostname/</id><summary type="html">&lt;p&gt;因為在不同電腦用了一個共用的 vimrc 檔，但是又想在兩邊作一些不同的設定，所以找了一下資料看要怎麼作。雖然有判斷作業系統的方式，不過好像不太適合我的用法，然後我通常不同的電腦都會設個有意義的 hostname，所以最後想說就用 hostname 去作判斷啦，以下是一個範例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;let hostname = substitute(system(&amp;#39;hostname&amp;#39;), &amp;#39;n&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;&amp;#39;)
if hostname == &amp;quot;lab&amp;quot;
    &amp;quot;do something
elseif hostname == &amp;quot;home&amp;quot;
    &amp;quot;do something
endif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外附上判斷 OS 的方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if has(&amp;#39;win32&amp;#39;)
    &amp;quot;do something
elseif has(&amp;#39;mac&amp;#39;)
    &amp;quot;do something
elseif has(&amp;#39;unix&amp;#39;)
    &amp;quot;do something
endif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://superuser.com/questions/194715/how-to-make-vim-settings-computer-dependent-in-vimrc"&gt;http://superuser.com/questions/194715/how-to-make-vim-settings-computer-dependent-in-vimrc&lt;/a&gt;&lt;/p&gt;</summary><category term="vim"></category></entry><entry><title>MongoDB Web management tool： rockmongo</title><link href="http://blog.carlcarl.me/43/mongodb-rockmongo/" rel="alternate"></link><updated>2011-09-05T18:12:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-09-05:43/mongodb-rockmongo/</id><summary type="html">&lt;p&gt;&lt;a href="http://i.imgur.com/BtTNDdsl.png"&gt;&lt;img alt="1315246483-954501738" src="http://i.imgur.com/BtTNDdsl.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近找到的一個管理 MongoDB 的網頁介面工具，是用 php5
寫的，介面不是說很好看啦，不過還算好用囉，而且很重要的一點是他有中文繁體，真的是倍感親切XD。&lt;/p&gt;
&lt;p&gt;首先先到&lt;a href="http://code.google.com/p/rock-php/downloads/list"&gt;這邊下載&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下載完之後解壓縮並且移到網頁目錄下，然後試著連上去看看。如果出現要下載
php 的 mongodb module 的話，就照以下步驟去安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install php-pecl
sudo pecl install mongo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 php.ini 裡面加上一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mongo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著重啟 Web Server。&lt;span style="color: #ff0000;"&gt;如果有用 php-fpm
的話記得這個也要重啟才有用&lt;/span&gt;，一開始忘記，結果這邊卡好久=.=。再連一次網頁看看應該就可以連上了。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.imgur.com/epxeSLs.png"&gt;&lt;img alt="1315247147-2959807055" src="http://i.imgur.com/epxeSLs.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;預設帳密是「admin」(帳密一樣)，接著按登錄就可以進去管理頁面了。但是預設帳密一樣感覺很容易會被侵入，所以先進入管理介面增加一個管理者，可能有些人覺得很奇怪，不是有
admin 了嗎？但是其實這個 admin 是 rockmongo 本身設的登入帳號，而 MongoDB
本身裝完時並沒有所謂管理者帳號這種東西，所以別搞錯了~~。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.imgur.com/kSM5gdil.png"&gt;&lt;img alt="1315247440-2431480143" src="http://i.imgur.com/kSM5gdil.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;進去之後點選左邊的「admin」，接著在右邊頁面的「更多」裡，有個用戶的選項，先點進去吧。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.imgur.com/sGefpoV.png"&gt;&lt;img alt="1315247601-1427593127" src="http://i.imgur.com/sGefpoV.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接著點選「Add User」。(這邊我已經先新增了一個使用者，原本是沒有的)。接著的頁面輸入名稱和密碼即可。&lt;/p&gt;
&lt;p&gt;接著更改一下 rockmongo 的認證方式，讓他不要用他自己的驗證，而改認證
MongoDB 這邊的使用者。這邊要去修改 rockmongo 的 config
檔，以我的例子是放在 &lt;code&gt;/var/www/rockmongo/config.php&lt;/code&gt; 這裡，將下面的 &lt;code&gt;false&lt;/code&gt; 改為 &lt;code&gt;true&lt;/code&gt; 即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$MONGO&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;servers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongo_auth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到這邊就大功告成了！以後登入時，原本預設的「admin」便無法登入，而是要用你之前新增的使用者帳密才能登入囉。&lt;/p&gt;
&lt;p&gt;參考網址:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.php.net/manual/en/mongo.installation.php#mongo.installation.nix"&gt;http://www.php.net/manual/en/mongo.installation.php#mongo.installation.nix&lt;/a&gt;&lt;/p&gt;</summary><category term="mongodb"></category><category term="rockmongo"></category></entry><entry><title>Ubuntu 11.04 install mongoDB</title><link href="http://blog.carlcarl.me/42/ubuntu-11-04-install-mongodb/" rel="alternate"></link><updated>2011-09-04T14:28:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-09-04:42/ubuntu-11-04-install-mongodb/</id><summary type="html">&lt;p&gt;&lt;a href="http://i.imgur.com/iAdD5Sfl.png"&gt;&lt;img alt="1315146936-3546835831" src="http://i.imgur.com/iAdD5Sfl.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安裝的步驟比我想得還要多，本來想說應該用套件安裝就好，不過好像不行，所以 google 了一下，找到一個還算簡單的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下來在 &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; 新增下面一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著更新並安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get update
sudo apt-get install mongodb-10gen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;裝完之後就會自動當作 daemon 來執行，要確認的話可以輸入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo netstat -antp | grep mongo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;br /&gt;
&lt;a href="http://www.mongodb.org/display/DOCS/Ubuntu+and+Debian+packages"&gt;http://www.mongodb.org/display/DOCS/Ubuntu+and+Debian+packages&lt;/a&gt;&lt;/p&gt;</summary><category term="mongodb"></category></entry><entry><title>Linux Mint install Termkit</title><link href="http://blog.carlcarl.me/41/linux-mint-install-termkit/" rel="alternate"></link><updated>2011-09-04T08:15:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-09-04:41/linux-mint-install-termkit/</id><summary type="html">&lt;p&gt;&lt;a href="http://i.imgur.com/6ZoWGJLl.png"&gt;&lt;img alt="1315124444-2969515523" src="http://i.imgur.com/6ZoWGJLl.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其實之前就有看到這個東西了，當時覺得還滿炫的，不過當時好像只有支援 Mac 的樣子，後來就沒去理了。最近又看到這樣東西，發現在 Linux 上面已經有成功執行的例子了，所以想說也來裝裝看這樣，我目前是在 Linut Mint 上面裝，Ubuntu 應該理所當然也可以。&lt;/p&gt;
&lt;p&gt;這個工具簡單講算是在機器上跑一個Server，然後再利用瀏覽器連上去，所以必須在 webkit 瀏覽器上面執行的樣子，像是 chrome(或 chromium)或是safari瀏覽器才能跑。&lt;/p&gt;
&lt;p&gt;首先一開始先把需要的套件裝一裝吧&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install build-essential git libssl-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下來有三個東西要裝：node.js、npm、termkit。&lt;/p&gt;
&lt;p&gt;開始裝 node.js，一開始偷懶想直接裝套件的版本，不過在後面卻一直打牆，後來才發現套件版的版本舊的可怕，&lt;a href="https://github.com/isaacs/npm/issues/1185"&gt;npm的安裝需要node.js較新的版本&lt;/a&gt;，所以不建議裝套件版的！但是也有發現&lt;a href="http://askubuntu.com/questions/54617/error-while-installing-termkit"&gt;新版unstable的版本也是有點問題&lt;/a&gt;，所以建議大家去&lt;a href="http://nodejs.org/#download"&gt;官網&lt;/a&gt;抓個 stable 的版本比較安全，也比較省時間XD。&lt;/p&gt;
&lt;p&gt;將 node.js 壓縮檔下載下來之後作解壓縮，然後進入解壓縮的目錄輸入以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著要安裝 npm 這個 node.js 的套件管理工具，要記得不要使用 apt-get 之類的去裝，因為根本沒有這個東西，你可能輸入 npm 之後，假如你沒裝，他會建議你去裝一個套件，但是那個套件只是指令剛好同名而已，可以不用理。這邊利用 git 下載：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone http://github.com/isaacs/npm.git
&lt;span class="nb"&gt;cd &lt;/span&gt;npm
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前面裝 node.js 之所以沒有用 git 是因為抓下來的版本是 unstable，好像也可以設定版本啦，不過有點懶得用就是了。&lt;/p&gt;
&lt;p&gt;裝好之後，接下來來裝 TermKit 啦：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
git clone https://github.com/Floby/TermKit.git --recursive
&lt;span class="nb"&gt;cd &lt;/span&gt;TermKit/
npm install
node Node/nodekit.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（要注意一下自己放的目錄，最好是不要把某個目錄放在其他兩個目錄裡，難保不會有事......。）&lt;/p&gt;
&lt;p&gt;最後一行的 &lt;code&gt;node Node/nodekit.js&lt;/code&gt; 是執行這個工具的意思，所以接下來可以用瀏覽器連 &lt;code&gt;localhost:2222&lt;/code&gt; 看看，應該就看得到囉。&lt;/p&gt;
&lt;p&gt;雖然用起來還滿炫的，不過實際功能還是有點弱，像是 &lt;code&gt;clear&lt;/code&gt; 這個指令目前是沒有作用的。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.imgur.com/BSqCtg0.png"&gt;&lt;img alt="1315126055-3193988822" src="http://i.imgur.com/BSqCtg0.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外如果想開 &lt;code&gt;vim&lt;/code&gt; 的話也是直接炸。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.imgur.com/7jQ5RA6l.png"&gt;&lt;img alt="1315126080-3520003698" src="http://i.imgur.com/7jQ5RA6l.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以目前還比較像體驗性質感覺的就是了，希望之後的功能還能更加完善囉。&lt;/p&gt;
&lt;p&gt;參考網址：  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.easytech.com.ar/2011/05/21/playing-with-termkit-with-chrome/"&gt;http://blog.easytech.com.ar/2011/05/21/playing-with-termkit-with-chrome/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://clonn.blogspot.com/2011/01/nodejs-npm.html"&gt;http://clonn.blogspot.com/2011/01/nodejs-npm.html&lt;/a&gt;&lt;/p&gt;</summary><category term="node.js"></category><category term="npm"></category><category term="termkit"></category></entry><entry><title>rsync exclude file</title><link href="http://blog.carlcarl.me/40/rsync-exclude-file/" rel="alternate"></link><updated>2011-08-27T11:18:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-08-27:40/rsync-exclude-file/</id><summary type="html">&lt;p&gt;最近想打包線上在跑的網站(在 Ubuntu 上)。本來想說用 &lt;code&gt;cp&lt;/code&gt; 就好，但是 &lt;code&gt;cp&lt;/code&gt;
沒辦法去 exclude 一些檔案列表，偏偏網站上面有些是暫存檔和使用者上傳的東西，另外還有一些雜七雜八不該包的 code。&lt;/p&gt;
&lt;p&gt;後來查到可以用 &lt;code&gt;rsync&lt;/code&gt; 來作 因為有支援 exclude 的參數，以下是範例，a
參數包含了一堆其他參數的功能，v 參數就是將詳細資訊印出來：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsync -av --exclude &lt;span class="s1"&gt;&amp;#39;dir&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;source &lt;/span&gt;destination
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;想要 exclude 多一點的話可以這樣下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsync -av --exclude &lt;span class="s1"&gt;&amp;#39;dir1&amp;#39;&lt;/span&gt; --exclude &lt;span class="s1"&gt;&amp;#39;dir2&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;source &lt;/span&gt;destination
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要注意的一點是：&lt;br /&gt;
如果想要避掉 某幾個目錄下的子目錄
像是每個目錄下的 &lt;code&gt;.svn&lt;/code&gt; 資料夾，可以直接用 &lt;code&gt;--exclude '.svn/'&lt;/code&gt;，
他會&lt;strong&gt;自動避掉所有符合名稱的子目錄&lt;/strong&gt;，而如果是每個子目錄底下的檔案的話，如 &lt;code&gt;templates_c/底下的檔案&lt;/code&gt;，可以用 &lt;code&gt;--exclude 'templates_c/*'&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;參考網址:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://unix.stackexchange.com/questions/5774/rsync-excluding-a-particular-subdirectory-and-its-children-where-the-subdirecto#_"&gt;http://unix.stackexchange.com/questions/5774/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.thegeekstuff.com/2011/01/rsync-exclude-files-and-folders/"&gt;http://www.thegeekstuff.com/2011/01/rsync-exclude-files-and-folders/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blog.xuite.net/jyoutw/xtech/20025390"&gt;http://blog.xuite.net/jyoutw/xtech/20025390&lt;/a&gt;&lt;/p&gt;</summary><category term="rsync"></category></entry><entry><title>FreeBSD can't find gateway</title><link href="http://blog.carlcarl.me/39/freebsd-cant-find-gateway/" rel="alternate"></link><updated>2011-08-12T19:05:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-08-12:39/freebsd-cant-find-gateway/</id><summary type="html">&lt;p&gt;最近 Server 卡卡的，想說把network重新啟動看看，結果果然變順很多，想說 OK 就回家了。&lt;/p&gt;
&lt;p&gt;然後悲劇就來了......家裡完全連不上Server，好險還可以拿跟 Server 同個 Subnet 底下的機器登入，想說會不會是我之前裝幾個 Service 或防火牆的關係，但是都關掉後也都沒用 orz，後來用 &lt;code&gt;netstat
-rn&lt;/code&gt; 才看到 &lt;code&gt;defaultgateway&lt;/code&gt; 不見了！！&lt;/p&gt;
&lt;p&gt;但是我明明在 &lt;code&gt;rc.conf&lt;/code&gt; 裡面就有指定了 &lt;code&gt;defaultgateway&lt;/code&gt;，看來好像是 &lt;code&gt;rc.conf&lt;/code&gt; 只會在 OS 重啟才有用，network重啟也不會讀這個檔 = =。&lt;/p&gt;
&lt;p&gt;後來查到可以用 &lt;code&gt;/etc/rc.d/routing restart&lt;/code&gt; 來解決，不過感覺還是麻煩了點，感覺應該有更好的方法才對= =a。&lt;/p&gt;</summary><category term="freebsd"></category><category term="gateway"></category></entry><entry><title>C++ redirect cout to file</title><link href="http://blog.carlcarl.me/38/c-plus-plus-redirect-cout-to-file/" rel="alternate"></link><updated>2011-07-22T18:31:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-22:38/c-plus-plus-redirect-cout-to-file/</id><summary type="html">&lt;p&gt;可能有些人會覺得說用 &lt;code&gt;fstream&lt;/code&gt; 另外寫就好了&lt;/p&gt;
&lt;p&gt;不過程式如果有設定可以輸出至螢幕或是檔案的話&lt;/p&gt;
&lt;p&gt;分開兩個寫就會讓人覺得很麻煩&lt;/p&gt;
&lt;p&gt;可能有關輸出的部份都需要用 &lt;code&gt;if&lt;/code&gt; 判斷，然後分兩塊輸出&lt;/p&gt;
&lt;p&gt;如果在一開始就設定 &lt;code&gt;cout&lt;/code&gt; 是輸出到螢幕或是檔案的話&lt;/p&gt;
&lt;p&gt;之後就不用再用 &lt;code&gt;if&lt;/code&gt; 來一個一個判斷了，這個是我覺得的優點&lt;/p&gt;
&lt;p&gt;程式碼片段範例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;readFromFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//根據一些判斷去設定readFromFile的值&lt;/span&gt;
&lt;span class="n"&gt;readFromFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readFromFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ofstream&lt;/span&gt; &lt;span class="n"&gt;outputFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;file.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;outputFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdbuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdbuf&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c1"&gt;//表示輸出到stdout&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//不做任何事情 因為cout本來就是輸出到stdout&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//之後就直接用cout就可以了~&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網頁&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.java2s.com/Tutorial/Cpp/0240__File-Stream/Redirectouputintothefile.htm"&gt;http://www.java2s.com/Tutorial/Cpp/0240__File-Stream/Redirectouputintothefile.htm&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>FreeBSD use mpd to build VPN</title><link href="http://blog.carlcarl.me/37/freebsd-use-mpd-to-build-vpn/" rel="alternate"></link><updated>2011-07-22T09:43:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-22:37/freebsd-use-mpd-to-build-vpn/</id><summary type="html">&lt;p&gt;不習慣用FreeBSD，所以花了一點時間研究要怎麼裝orz&lt;/p&gt;
&lt;p&gt;感覺比Linux的還麻煩QQ&lt;/p&gt;
&lt;h3&gt;首先先裝 mpd&lt;/h3&gt;
&lt;p&gt;到 &lt;code&gt;/usr/ports/net/mpd/&lt;/code&gt; 底下輸入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make install clean
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就安裝好了~。&lt;/p&gt;
&lt;h3&gt;接下來是要作設定，先修改 &lt;code&gt;/usr/local/etc/mpd/mpd.conf&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;pptp1&lt;/span&gt;
&lt;span class="n"&gt;pptp1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;ng0&lt;/span&gt; &lt;span class="n"&gt;pptp1&lt;/span&gt; &lt;span class="n"&gt;pptp1&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;ipcp&lt;/span&gt; &lt;span class="n"&gt;ranges&lt;/span&gt; &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;88.1&lt;/span&gt;&lt;span class="sr"&gt;/32 192.168.88.56/&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;pptp_def&lt;/span&gt;
&lt;span class="n"&gt;pptp_def&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;iface&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;demand&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;iface&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arp&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;iface&lt;/span&gt; &lt;span class="n"&gt;idle&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;iface&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;tcpmssfix&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;multilink&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="n"&gt;acfcomp&lt;/span&gt; &lt;span class="n"&gt;protocomp&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;pap&lt;/span&gt; &lt;span class="n"&gt;chap&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;chap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;msv2&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;keep&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alive&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;mtu&lt;/span&gt; &lt;span class="mi"&gt;1460&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;ipcp&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="n"&gt;vjcomp&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;ipcp&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;yourDNS&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;ipcp&lt;/span&gt; &lt;span class="n"&gt;nbns&lt;/span&gt; &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;88.1&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;ccp&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="n"&gt;mppc&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;ccp&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="n"&gt;mpp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e40&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;ccp&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="n"&gt;mpp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e128&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;ccp&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="n"&gt;mpp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stateless&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pptp1:&lt;/code&gt; 這種是用來作標籤整理用的，所以取什麼應該都 OK，只是 &lt;code&gt;load&lt;/code&gt; 的時候記得改成對應的就好了。另外要注意的是 &lt;code&gt;set ipcp dns&lt;/code&gt; 的參數記得改成你要的 dns server，通常跟你的機器上原本所設的 DNS 一樣就可以了。&lt;/p&gt;
&lt;h3&gt;再來是修改 &lt;code&gt;/usr/local/etc/mpd/mpd.links&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pptp1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;pptp&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;pptp&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;pptp&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;incoming&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;pptp&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;originate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;set pptp self&lt;/code&gt; 這邊是輸入你 VPN Server 的 IP。&lt;/p&gt;
&lt;h3&gt;編輯密碼檔 &lt;code&gt;/usr/local/mpd/mpd.secret&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;輸入你要登入的帳號和密碼就可以了，例如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;carlcarl carlcarlpassword
carlcarl2  carlcarl2password
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;修改 &lt;code&gt;/etc/rc.conf&lt;/code&gt;，加上:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mpd_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;接下來啟動服務&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/local/etc/rc.d/mpd start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到這裡為止你用 VPN 連線應該是能夠連到你的 VPN Server 了，但是還是沒辦法連外，例如想要用瀏覽器看 google 網頁應該是不行的，所以還要再另外設定 NAT(natd) 和 firewall(ipfw)。&lt;/p&gt;
&lt;h3&gt;首先先修改 &lt;code&gt;/etc/rc.conf&lt;/code&gt;，加上:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ifconfig_bge0_alias0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inet 192.168.88.1  netmask 255.255.255.0&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gateway_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;firewall_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;firewall_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/root/ipfw.rules&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;natd_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;natd_interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bge0&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;ifconfig_bge0_alias0&lt;/code&gt; 的 &lt;code&gt;bge0&lt;/code&gt; 記得改成你 Public IP 網卡的名稱，&lt;code&gt;natd_interface&lt;/code&gt; 參數指定裝置的 &lt;code&gt;bge0&lt;/code&gt; 也是一樣。剛才 &lt;code&gt;rc.conf&lt;/code&gt; 裡有個 &lt;code&gt;firewall_script&lt;/code&gt; 是指定你預設要讀的 firewall rule。&lt;/p&gt;
&lt;h3&gt;所以在 &lt;code&gt;/root/&lt;/code&gt; 底下新增一個 &lt;code&gt;ipfw.rules&lt;/code&gt; 檔案，加上執行的權限(&lt;code&gt;chmod +x ipfw.rules&lt;/code&gt;)，並加入以下內容:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$IPFW add 100 divert natd all from 192.168.88.56 to any via msk0
$IPFW add 101 divert natd all from any to 你的PublicIP via msk0
#$IPFW add 100 divert natd all from any to any via msk0
$IPFW add 105 allow ip from any to any
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一到三都是指定 NAT 的 rule。如果不介意速度的話，可以只用第三條和第四條規則，我之前只用第三和第四條，可是連一般網路傳輸的速度也被拉下來，所以後來在前面自己加了兩條比較準確的規則，然後把第三條規則給註解掉這樣，第三條規則的意思是所有進入出去的封包都要經過 NAT 程序查看。而我的第一條規則負責看 NAT 出去的，所以只看來源是 &lt;code&gt;192.168.88.56&lt;/code&gt; 的，第二條規則負責處理 NAT 進來的，這邊是看目標是 VPN Server 的 IP，當然通常不是每個到 VPN Server 的封包都一定是要 NAT 進來的，會有一些其餘的封包也會被 NAT 抓進去作檢查，這邊不知道能不能改善第二條規則就是了，不過也算是比第三條規則好一些了。另外記得後面的 &lt;code&gt;msk0&lt;/code&gt; 要改成你的要的網卡裝置名稱，改完之後重開應該就可以了～。&lt;/p&gt;
&lt;p&gt;參考網頁&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.weithenn.org/2009/05/freebsdmpd-pptp-vpn.html"&gt;http://blog.weithenn.org/2009/05/freebsdmpd-pptp-vpn.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.section6.net/wiki/index.php/Setting_up_a_PPTP_VPN_server_in_FreeBSD"&gt;http://www.section6.net/wiki/index.php/Setting_up_a_PPTP_VPN_server_in_FreeBSD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.huomo.cn/os/article-148b0.html"&gt;http://www.huomo.cn/os/article-148b0.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://zqliangzm.blog.163.com/blog/static/25903097200810510231119/"&gt;http://zqliangzm.blog.163.com/blog/static/25903097200810510231119/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jb51.net/os/Unix/8786.html"&gt;http://www.jb51.net/os/Unix/8786.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.twbsd.org/cht/articles/vpn.htm"&gt;http://www.twbsd.org/cht/articles/vpn.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.4oa.com/Article/html/5/27/398/2005/10865.html"&gt;http://www.4oa.com/Article/html/5/27/398/2005/10865.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bbs.51cto.com/thread-31035-1.html"&gt;http://bbs.51cto.com/thread-31035-1.html&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Ubuntu VPN Server with pptp</title><link href="http://blog.carlcarl.me/36/ubuntu-vpn-server-with-pptp/" rel="alternate"></link><updated>2011-07-16T12:11:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-16:36/ubuntu-vpn-server-with-pptp/</id><summary type="html">&lt;p&gt;最近想架 VPN Server，查了一下資料，最常見的好像是 &lt;code&gt;OpenVPN&lt;/code&gt; 和 &lt;code&gt;pptp&lt;/code&gt; 兩種方法。pptp 的方式比較簡單，但是相對於 OpenVPN 較為不安全，是說我們系上的好像也是用 pptp，所以我想問題應該不大吧&lt;/p&gt;
&lt;p&gt;網路環境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Public IP&lt;/li&gt;
&lt;li&gt;單網卡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;首先要先安裝 &lt;code&gt;pptpd&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install pptpd
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;接著修改 &lt;code&gt;/etc/pptpd.conf&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;這邊 &lt;code&gt;localip&lt;/code&gt; 是 Server 連線之後要用的 IP，基本上跟 Server 本身的 Public IP沒有關係，可以給個 private ip 就 ok 了，&lt;code&gt;remoteip&lt;/code&gt; 是給 VPN client的 private
ip，大致給個範圍，可以不用像我一樣給了 128 個 Private IP，應該是要看同時會有多少人使用來給範圍，至於為什麼我要從 128 開始，是因為我想保留前面的部份當作另外的用途:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;localip 192.168.0.1
remoteip 192.168.0.128-255
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;再下來是修改 &lt;code&gt;/etc/ppp/pptpd-options&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;這邊要注意一下裡面的 name 設定，通常會設成是 &lt;code&gt;pptpd&lt;/code&gt;，之後要跟 &lt;code&gt;/etc/ppp/chap-secrets&lt;/code&gt; 裡的設定作對應，另外還有要設定 &lt;code&gt;ms-dns&lt;/code&gt;，就看那台 Server 原本指定的 DNS IP，拿過來用就 ok 了。要看 DNS IP 設定可以到 &lt;code&gt;/etc/resolve.conf&lt;/code&gt; 裡面去看。&lt;/p&gt;
&lt;h3&gt;設定完後接下來就是帳號密碼的部份啦&lt;/h3&gt;
&lt;p&gt;修改 &lt;code&gt;/etc/ppp/chap/secrets&lt;/code&gt;，以下是大概的格式，這邊要注意 &lt;code&gt;pptpd&lt;/code&gt; 是對應之前同樣的文字部份，&lt;code&gt;*&lt;/code&gt; 表示不從這邊設定 IP，而是讀剛才的 &lt;code&gt;remoteip&lt;/code&gt; 設定:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;你要的帳號 pptpd 你要的密碼 *
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;重啟pptpd&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/pptpd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下來試試看 VPN 連線看看，我的情形是還不行啦XD。查了一下資料，應該是有指定到 private
ip，但是封包在 Server 這邊傳不出去，因為沒設定，所以接下來還要再設定一下 NAT 的部份啦。&lt;/p&gt;
&lt;h3&gt;設定 iptables&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是這樣的設定在每次重開機之後就會消失，所以設定完後可以用 &lt;code&gt;iptables-save&lt;/code&gt; 將設定檔存起來，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo iptables-save &amp;gt; /etc/iptables-rules
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果出現權限問題就 &lt;code&gt;sudo su&lt;/code&gt; 轉成 root 再做。但是存起來之後，他並不會幫你在每次重開機都讀那個檔，所以還要再設定，修改 &lt;code&gt;/etc/network/interfaces&lt;/code&gt;，最後面加上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pre-up iptables-restore &amp;lt; /etc/iptables-rules
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;最後是修改 &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;找到以下這行，將前面的 &lt;code&gt;#&lt;/code&gt; 給刪掉， &lt;code&gt;#&lt;/code&gt; 是代表註解，這樣才有forward 封包的功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# net.ipv4.ip_forward=1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;改完之後，更新 sysctl 的設定&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo sysctl -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK! 到這裡之後應該是就可以連 VPN 了，如果還不行的話，可以重啟動看看，再不行的話，可以參考看看我下面的參考網頁，也許會有對你有用的資訊。&lt;/p&gt;
&lt;p&gt;參考網頁:&lt;br /&gt;
&lt;a href="http://www.eubuntu.net/viewthread.php?tid=135&amp;amp;sid=ihmKhL"&gt;http://www.eubuntu.net/viewthread.php?tid=135&amp;amp;sid=ihmKhL&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blog.slps.tp.edu.tw/00086/?p=145"&gt;http://blog.slps.tp.edu.tw/00086/?p=145&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://gsyan888.blogspot.com/2009/11/ubuntu-vpn-server.html"&gt;http://gsyan888.blogspot.com/2009/11/ubuntu-vpn-server.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://wangyan.org/blog/debian-pptp-vpn.html"&gt;https://wangyan.org/blog/debian-pptp-vpn.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://jordy.easymorse.com/?p=272"&gt;http://jordy.easymorse.com/?p=272&lt;/a&gt;  &lt;/p&gt;</summary></entry><entry><title>svn delete only in repo</title><link href="http://blog.carlcarl.me/35/svn-delete-only-in-repo/" rel="alternate"></link><updated>2011-07-13T16:24:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-13:35/svn-delete-only-in-repo/</id><summary type="html">&lt;p&gt;版本管理一些檔案像是測資之類的可能會不小心用 svn add 起來，但是有些測資檔案很大，實在不想上傳，所以就想要將檔案從 svn 版本中移除。&lt;/p&gt;
&lt;p&gt;之前都很笨的先備份檔案，做刪除，然後再複製回來，後來查資料才發現有參數可以用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;svn delete --keep-local file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就能保留這個檔案了～。&lt;/p&gt;
&lt;p&gt;參考網頁:&lt;br /&gt;
&lt;a href="http://www.lampblog.net/2011/01/svn-delete%EF%BC%8D%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/"&gt;http://www.lampblog.net/2011/01/svn-delete&lt;/a&gt;&lt;/p&gt;</summary><category term="svn"></category></entry><entry><title>vim OmniCppComplete+STL support</title><link href="http://blog.carlcarl.me/34/vim-omnicppcompletestl-support/" rel="alternate"></link><updated>2011-07-13T13:41:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-13:34/vim-omnicppcompletestl-support/</id><summary type="html">&lt;p&gt;搞了很久 一直自己鬼打牆 好不容易終於裝好了orz&lt;/p&gt;
&lt;p&gt;首先先去 &lt;a href="http://www.vim.org/scripts/script.php?script_id=1520"&gt;http://www.vim.org/scripts/script.php?script_id=1520&lt;/a&gt;
下載 OmniCppComplete的 plugin，將其解壓縮在 &lt;code&gt;.vim&lt;/code&gt; 底下。&lt;/p&gt;
&lt;p&gt;再來去下載支援 STL 的 plugin
&lt;a href="http://www.vim.org/scripts/script.php?script_id=2358"&gt;http://www.vim.org/scripts/script.php?script_id=2358&lt;/a&gt;&lt;br /&gt;
解壓縮至 &lt;code&gt;.vim&lt;/code&gt; 底下，再來在 &lt;code&gt;.vim&lt;/code&gt; 底下執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ctags -R --c++-kinds&lt;span class="o"&gt;=&lt;/span&gt;+p --fields&lt;span class="o"&gt;=&lt;/span&gt;+iaS --extra&lt;span class="o"&gt;=&lt;/span&gt;+q --language-force&lt;span class="o"&gt;=&lt;/span&gt;C++ cpp_src
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 &lt;code&gt;.vim&lt;/code&gt; 底下會出現一個 &lt;code&gt;tags&lt;/code&gt; 檔，將其作個簡單的改名，如 &lt;code&gt;stl_tags&lt;/code&gt; 之類的。&lt;/p&gt;
&lt;p&gt;然後，在 &lt;code&gt;.vimrc&lt;/code&gt; 裡加上:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;set &lt;/span&gt;tags+&lt;span class="o"&gt;=&lt;/span&gt;/my/path/to/tags/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;/my/path/tags/&lt;/code&gt; 是剛才的 &lt;code&gt;tag&lt;/code&gt; 檔完整路徑，以這裡來說的話就是在這裡
 &lt;code&gt;~/.vim/stl_tags&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;照理來說到這裡應該就ok了。我卡住的點就在於忘記把原本程式產生 tag 的指令從&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ctags -R
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ctags -R --c++-kinds&lt;span class="o"&gt;=&lt;/span&gt;+p --fields&lt;span class="o"&gt;=&lt;/span&gt;+iaS --extra&lt;span class="o"&gt;=&lt;/span&gt;+q .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;沒錯，不只那個 STL 需要用 c++ 建 tag，原本的程式部份也別忘了要用這個指令來建，因為指令有點長，為了方便，可以將這個指令作 alias 存到 &lt;code&gt;.bashrc&lt;/code&gt; 之類的檔案。&lt;/p&gt;
&lt;p&gt;或是在 &lt;code&gt;.vimrc&lt;/code&gt; 裡設定快捷建:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;map &amp;lt;C-F12&amp;gt; :!ctags -R --c++-kinds&lt;span class="o"&gt;=&lt;/span&gt;+p --fields&lt;span class="o"&gt;=&lt;/span&gt;+iaS --extra&lt;span class="o"&gt;=&lt;/span&gt;+q .&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面這個指令在 vim 模式裡，按下 &lt;code&gt;ctrl&lt;/code&gt; 加上 &lt;code&gt;F12&lt;/code&gt; 就會自動產生 tags 檔。&lt;/p&gt;
&lt;p&gt;參考網址&lt;br /&gt;
&lt;a href="http://www.vim.org/scripts/script.php?script_id=1520"&gt;http://www.vim.org/scripts/script.php?script_id=1520&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.vim.org/scripts/script.php?script_id=2358"&gt;http://www.vim.org/scripts/script.php?script_id=2358&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://liuyix.com/vim-stl-auto-complete"&gt;http://liuyix.com/vim-stl-auto-complete&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://hi.baidu.com/dtzw/blog/item/a66aa8ec1cdab63027979177.html"&gt;http://hi.baidu.com/dtzw/blog/item/a66aa8ec1cdab63027979177.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blog.csdn.net/hjs1122/article/details/6025150"&gt;http://blog.csdn.net/hjs1122/article/details/6025150&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>c edit code but Make only show up to date</title><link href="http://blog.carlcarl.me/33/c-edit-code-but-make-only-show-up-to-date/" rel="alternate"></link><updated>2011-07-13T07:12:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-13:33/c-edit-code-but-make-only-show-up-to-date/</id><summary type="html">&lt;p&gt;感覺好像是很初學的問題，不過我還是不知道原來這個會有關係 orz&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #ff0000;"&gt;在 Makefile 裡記得要加dependency file&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如檔案是 test.cpp, test.h, test2.cpp, test2.h 要編譯成一個執行檔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    g++ -o &lt;span class="nb"&gt;test &lt;/span&gt;test.o test2.o
&lt;span class="nf"&gt;test.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    g++ -c test.cpp
&lt;span class="nf"&gt;test2.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    g++ -c test2.cpp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要改成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;test.o test2.o&lt;/span&gt;
    g++ -o &lt;span class="nb"&gt;test &lt;/span&gt;test.o test2.o
&lt;span class="nf"&gt;test.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;test.h test.cpp&lt;/span&gt;
    g++ -c test.cpp
&lt;span class="nf"&gt;test2.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;test2.h test2.cpp&lt;/span&gt;
    g++ -c test2.cpp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就ok了~&lt;/p&gt;
&lt;p&gt;當下了 &lt;code&gt;make test&lt;/code&gt;，他會去檢查 dependency
file，也就是 test.o 和 test2.o，然後 test.o 和 test2.o 會各自去檢查dependency
file，也就是各自的 cpp 和 h 檔。假如發現 test.cpp 有更改後，test.o 就會重新編譯一次。以此類推，如果改了 test2.h 的話，就變成 test2.o 會重新編譯，當返回test這邊時，發現 test.o 和 test2.o 有變動過，就會重新將兩個 object 檔 link 起來，&lt;/p&gt;
&lt;p&gt;所以如果沒加上 dependency
file的話，make的時候就不知道要去檢查哪個檔案是否有更新這樣。&lt;/p&gt;
&lt;p&gt;參考網頁&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ubuntuforums.org/showthread.php?t=1189999"&gt;http://ubuntuforums.org/showthread.php?t=1189999&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>XRDP shortcut d with remote connection</title><link href="http://blog.carlcarl.me/32/xrdp-shortcut-d-with-remote-connection/" rel="alternate"></link><updated>2011-07-07T18:35:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-07:32/xrdp-shortcut-d-with-remote-connection/</id><summary type="html">&lt;p&gt;之前裝了 XRDP，還滿不錯用的。不僅可以用 Linux 的 Terminal server client，也可以用 Windows 內建的遠端連線直接連進去。&lt;/p&gt;
&lt;p&gt;但是卻發現了一個很討厭的問題，那就是按 &lt;code&gt;d&lt;/code&gt; 的時候會發現，怎麼視窗被縮小跑到桌面去orz，後來查了一些資料好不容易才找到，我以為這個問題很多人都會遇到的說......。
 &lt;/p&gt;
&lt;p&gt;首先，問題是出在裝 XRDP 的主機上沒錯，且就是因為快捷鍵的問題，所以只要修改這個設定就 OK 了，這邊假設裝 XRDP 的主機是有 GUI 介面的(沒有的話用 ssh 就好啦XD)&lt;/p&gt;
&lt;p&gt;先輸入:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gconf-editor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;應該會出現一個視窗。&lt;/p&gt;
&lt;p&gt;接著根據 &lt;code&gt;apps&lt;/code&gt; : &lt;code&gt;metacity&lt;/code&gt; : &lt;code&gt;global_keybindings&lt;/code&gt; 的順序下去找，應該可以找到一個叫做 &lt;code&gt;show_desktop&lt;/code&gt; 的設定。然後對應的值應該會是 &lt;code&gt;&amp;lt;Super&amp;gt;d&lt;/code&gt;，這邊就直接把這個值刪掉就好了。改完後重開， 之後再用遠端連線進來應該會發現 &lt;code&gt;d&lt;/code&gt; 的按鍵可以正常輸入了。&lt;/p&gt;
&lt;p&gt;參考網頁&lt;br /&gt;
&lt;a href="http://forums.linuxmint.com/viewtopic.php?f=47&amp;amp;t=61971"&gt;http://forums.linuxmint.com/viewtopic.php?f=47&amp;amp;t=61971&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.liberiangeek.net/2010/07/connect-ubuntu-10-04-lucid-lynx-remote-desktop-windows-machines/"&gt;http://www.liberiangeek.net/2010/07/connect-ubuntu-10-04-lucid-lynx-remote-desktop-windows-machines/&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>awstats analyze large logs at once (include gz files)</title><link href="http://blog.carlcarl.me/31/awstats-analyze-large-logs-at-once-include-gz-files/" rel="alternate"></link><updated>2011-07-04T14:22:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-04:31/awstats-analyze-large-logs-at-once-include-gz-files/</id><summary type="html">&lt;p&gt;&lt;a href="http://carl830.pixnet.net/blog/post/66466219"&gt;awstats的簡易安裝教學&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因為在維護的網站log檔有一年份，而且都已經壓縮成gz檔，要用awstats分析的話實在很費工夫，後來發現awstats有好用的工具可以用：&lt;span style="color: #3366ff;"&gt;logresolvemerge.pl&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;簡單講就是用這個工具將log檔(包含gz壓縮檔)都merge起來為一個大檔案後，再用awstats作分析。&lt;/p&gt;
&lt;p&gt;這邊首先要注意的就是
&lt;span style="color: #ff0000;"&gt;awstats不會讀較舊的log檔&lt;/span&gt;，所以像我之閒已經讀了最新的log檔後想讀舊的，就只能直接砍掉紀錄檔重新開始，到
/var/lib/awstats/底下將底下的檔案刪光，如此就能回到最初的狀態&lt;/p&gt;
&lt;p&gt;logresolvemerge.pl預設是在&lt;span style="color: #3366ff;"&gt;/usr/share/doc/awstats/examples/&lt;/span&gt;裡&lt;br /&gt;
可以移到其他地方，不然每次打路徑應該會打到手很酸XD&lt;/p&gt;
&lt;p&gt;這裡給個幾個簡單的範例&lt;/p&gt;
&lt;h3&gt;將多個log檔merge成一個log檔&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;logresolvemerge.pl /var/log/apache2/.log &amp;gt; temp.log
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;將多個gz檔merge成一個log檔(其實跟上面的差不多~)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;logresolvemerge.pl /var/log/apache2/.gz &amp;gt; temp.log
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;merge完後接著用awstats分析 並加上Log File的指定&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;awstats.pl -config=www.domain.com -LogFile=temp.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡還要注意一個重點！
那就是&lt;span style="color: #ff0000;"&gt;merge完後的log檔不能太大，不然很容易失敗！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我建議Log檔就盡量4G以下吧~，之前一次跑1XG的log檔失敗，還不信邪跑了好幾次，後來就放棄，切成幾份來個別做了。&lt;/p&gt;
&lt;p&gt;話說分析1XG的log檔真的超久......，Server級的也跑了10個小時有了吧orz&lt;/p&gt;
&lt;p&gt;參考網頁&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.anoneh.com/136.php"&gt;http://www.anoneh.com/136.php&lt;/a&gt;&lt;br /&gt;
[http://1024k.de/awstats/1and1/tutorial-04.html ][]&lt;br /&gt;
&lt;a href="http://awstats.sourceforge.net/docs/awstats_tools.html"&gt;http://awstats.sourceforge.net/docs/awstats_tools.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.smartlabsoftware.com/howto/awstats-log.htm"&gt;http://www.smartlabsoftware.com/howto/awstats-log.htm&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.webmasterworld.com/forum40/1536.htm"&gt;http://www.webmasterworld.com/forum40/1536.htm&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.internetofficer.com/forum/awstats-iis-installation-and-configuration/how-to-analyze-multiple-logfiles/"&gt;http://www.internetofficer.com/forum/awstats-iis-installation-and-configuration/how-to-analyze-multiple-logfiles/&lt;/a&gt;&lt;/p&gt;</summary><category term="awstats"></category></entry><entry><title>ubuntu install awstats to analyze web traffic</title><link href="http://blog.carlcarl.me/30/ubuntu-install-awstats-to-analyze-web-traffic/" rel="alternate"></link><updated>2011-07-04T13:04:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-07-04:30/ubuntu-install-awstats-to-analyze-web-traffic/</id><summary type="html">&lt;p&gt;&lt;a href="http://i.imgur.com/gjdRNUQl.png"&gt;&lt;img alt="1309785078-4e7966370fbebe6c564d5c251d18d3da_n" src="http://i.imgur.com/gjdRNUQl.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;awstats 這個工具可以透過分析 Server 的access log 檔來統計網站流量，資料的部份可以透過時間長短、來訪者的資料(國籍之類的)、瀏覽器種類來作分類，這些統計資訊則透過Web介面顯示出來。而上面這個圖是裝完 awstats 後的 Web 介面(還不錯精美= =+)&lt;/p&gt;
&lt;p&gt;接下來就是安裝的部份啦，首先先安裝套件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install awstats
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著到 &lt;code&gt;/etc/awstats/&lt;/code&gt; 底下可以看到預設的 &lt;code&gt;awstats.conf&lt;/code&gt; 檔，把這個檔複製並更名 假如網站名稱為 &lt;code&gt;www.domain.com&lt;/code&gt; 的話&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cp awstats.conf awstats.www.domain.com.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到時候指定好 config 的參數 他就會去讀這個檔案的設定，然後要稍微修改一下 &lt;code&gt;awstats.www.domain.com.conf&lt;/code&gt; 中的內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到 &lt;code&gt;LogFile=&lt;/code&gt; 的部份，修改並加上加上你要讀的 access
    log 檔，例如：&lt;code&gt;LogFile="/var/log/apache2/access.log"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到 &lt;code&gt;LogFormat=&lt;/code&gt; 的部份，將預設的 4 修改為 1，如：&lt;code&gt;LogFormat=1&lt;/code&gt;
    (如果後面執行的時候顯示格式有錯，可以改回 4，但是可能有些東西會沒辦法分析)&lt;/li&gt;
&lt;li&gt;找到 &lt;code&gt;SiteDomain=&lt;/code&gt; 的部份，設定你網站的網址，如：&lt;code&gt;SiteDomain="www.domain.com"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到 &lt;code&gt;#LoadPlugin="decodeutfkeys"&lt;/code&gt; 的部份，將前面的 &lt;code&gt;#&lt;/code&gt; 刪掉，這個能讓 utf 編碼的關鍵字能夠正常顯示(這邊是參考網路上的教學，至於不加會不會有問題，倒是沒有實際測試過)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接著到 &lt;code&gt;/usr/share/awstats/lang&lt;/code&gt; 底下修改語系檔，將 &lt;code&gt;awstats-tw.txt&lt;/code&gt; 將內容的 &lt;code&gt;big&lt;/code&gt; 改成 &lt;code&gt;utf-8&lt;/code&gt; 並用 &lt;code&gt;utf-8&lt;/code&gt; 的編碼存成 &lt;code&gt;awstats-utf8.txt&lt;/code&gt; 檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo cat awstats-tw.txt | sed -e &lt;span class="s1"&gt;&amp;#39;s/big5/utf-8/&amp;#39;&lt;/span&gt; | iconv -f big5 -t utf8 &amp;gt; awstats-tw-utf8.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果發現有權限的錯誤，可以直接轉成 root 再試，通常這樣就可以解決了。設定好之後就可以開始作第一次分析了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/lib/cgi-bin/awstats.pl -config&lt;span class="o"&gt;=&lt;/span&gt;www.domain.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後如果要再做分析，只要在後面加上 &lt;code&gt;-update&lt;/code&gt; 就可以了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/lib/cgi-bin/awstats.pl -config&lt;span class="o"&gt;=&lt;/span&gt;www.domain.com -update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分析之後還沒結束，雖然資料分析完了，不過還是需要 Web 介面，所以還必須設定一下目錄，修改 &lt;code&gt;/etc/apache2/site-available/default&lt;/code&gt; (或是你的其他網站設定檔)，加上以下內容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Alias /awstatsclasses/ &amp;quot;/usr/share/awstats/lib/&amp;quot;
Alias /awstats-icon/ &amp;quot;/usr/share/awstats/icon/&amp;quot;
Alias /awstatscss &amp;quot;/usr/share/doc/awstats/examples/css&amp;quot;
ScriptAlias /awstats/ /usr/lib/cgi-bin/
Options ExecCGI -MultiViews +SymLinksIfOwnerMatch
Options None
AllowOverride None
Order allow,deny
Allow from All
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著看網頁應該就可以看到結果了: 
http://www.domain.com/awstats/awstats.pl?config=www.domain.com&lt;/p&gt;
&lt;p&gt;另外要注意的是 awstat 並不會自動更新，所以必須設定 crobtab 之類的程式，一天更新一次資料之類的才行，以每天半夜三點執行為例，修改 &lt;code&gt;/etc/crobtab&lt;/code&gt; 加上以下指令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;00 3 * * * root /usr/lib/cgi-bin/awstats.pl -config=www.domain.com -update &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外這個部份也可以跟 &lt;a href="/233/naming-apache-log-with-date" title="將apache log改為日期名稱"&gt;apache logrotate&lt;/a&gt; 的設定做搭配&lt;/p&gt;
&lt;p&gt;參考網頁&lt;br /&gt;
&lt;a href="http://blog.db.idv.tw/2009/09/awstatsweb-log.html"&gt;http://blog.db.idv.tw/2009/09/awstatsweb-log.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://2007xyz.blogspot.com/2007/10/ubuntu-704-awstats.html"&gt;http://2007xyz.blogspot.com/2007/10/ubuntu-704-awstats.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://blog.longwin.com.tw/2009/08/ubuntu-904-server-instatll-awstats-2009/"&gt;http://blog.longwin.com.tw/2009/08/ubuntu-904-server-instatll-awstats-2009/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://vega02.pixnet.net/blog/post/32284929"&gt;http://vega02.pixnet.net/blog/post/32284929&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://oss.tw/elgg/pg/forum/topic/17314/-ubuntu-1010-awstats/"&gt;http://oss.tw/elgg/pg/forum/topic/17314/-ubuntu-1010-awstats/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://maestric.com/doc/ubuntu/awstats"&gt;http://maestric.com/doc/ubuntu/awstats&lt;/a&gt;&lt;/p&gt;</summary><category term="awstats"></category></entry><entry><title>cherokee + django + uwsgi installation</title><link href="http://blog.carlcarl.me/29/cherokee-django-uwsgi-installation/" rel="alternate"></link><updated>2011-06-28T20:43:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-06-28:29/cherokee-django-uwsgi-installation/</id><summary type="html">&lt;p&gt;首先要先裝好必要的套件，第一行先加入 cherokee 的來源，接著更新來源後才能夠安裝最新的 cherokee。rrdtool 以下三個都是在裝 uwsgi 所必要的套件，uwsgi 似乎找不到套件可以直接裝 這裡是利用pip 安裝網站上的來源: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-add-repository ppa:cherokee-webserver/ppa
sudo apt-get update
sudo apt-get install cherokee
sudo apt-get install rrdtool
sudo apt-get install libcherokee-mod-rrd
sudo apt-get install libxml2
sudo pip install http://projects.unbit.it/downloads/uwsgi-latest.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 django 的 project 下加上兩個檔案:&lt;/p&gt;
&lt;p&gt;django_wsgi.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;settings&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;uwsgi.xml (pythonpath位置設定就加上project的位置和project上一層的位址
這裡的django project的名稱假定為example)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;uwsgi&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;pythonpath&amp;gt;&lt;/span&gt;/var/www/example/&lt;span class="nt"&gt;&amp;lt;/pythonpath&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;pythonpath&amp;gt;&lt;/span&gt;/var/www/&lt;span class="nt"&gt;&amp;lt;/pythonpath&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;app&lt;/span&gt; &lt;span class="na"&gt;mountpoint=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;django_wsgi&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/app&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/uwsgi&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定大致到這邊。&lt;/p&gt;
&lt;p&gt;接下來是執行 cherokee-admin 開啟 web 的管理介面:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo cherokee-admin -b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;瀏覽器支援好像不太好 :P&lt;/p&gt;
&lt;p&gt;這邊先點擊上面的 &lt;code&gt;vServers&lt;/code&gt;，接著點選 &lt;code&gt;Behavior&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cherokee" src="http://i.imgur.com/8hHPP31l.png" title="cherokee" /&gt;&lt;/p&gt;
&lt;p&gt;點選下方的 Rule Management&lt;/p&gt;
&lt;p&gt;&lt;img alt="cherokee2.png" src="http://i.imgur.com/g1m4jHOl.png" title="cherokee2.png" /&gt;&lt;/p&gt;
&lt;p&gt;點選左上角 Behavior 右邊的 + 按鈕&lt;/p&gt;
&lt;p&gt;&lt;img alt="cherokee3.png" src="http://i.imgur.com/Thb9nbAl.png" title="cherokee3.png" /&gt; &lt;/p&gt;
&lt;p&gt;接著在左邊點選 Platforms，右邊選擇 uWSGI 接著點選 Add&lt;/p&gt;
&lt;p&gt;&lt;img alt="cherokee4.png" src="http://i.imgur.com/VSEMD4ol.png" title="cherokee4.png" /&gt;&lt;/p&gt;
&lt;p&gt;接下來點個 Next 就會來到這個畫面，這邊照理來說只會出現一個欄位，如果另外在上面還有要求選擇 uwsgi 的 binary file 的話，表示之前 uwsgi 沒安裝好。這個 Configulation File 就輸入 uwsgi.xml 在檔案系統上的路徑就 ok 了。以這裡的範例來講就會是: &lt;code&gt;/var/www/uwsgi.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cherokee5.png" src="http://i.imgur.com/TsO5hWBl.png" title="cherokee5.png" /&gt;&lt;/p&gt;
&lt;p&gt;接下來指定網頁路徑就大致成功了~&lt;/p&gt;
&lt;p&gt;&lt;img alt="cherokee6.png" src="http://i.imgur.com/iQx7U3Bl.png" title="cherokee6.png" /&gt;&lt;/p&gt;
&lt;p&gt;參考網頁&lt;/p&gt;
&lt;p&gt;&lt;a href="http://whhnote.blogspot.com/2011/01/django-deploy-django-on-cherokee-web.html"&gt;http://whhnote.blogspot.com/2011/01/django-deploy-django-on-cherokee-web.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.cherokee-project.com/doc/cookbook_uwsgi.html"&gt;http://www.cherokee-project.com/doc/cookbook_uwsgi.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://felecan.com/2011/getting-django-work-uwsgi-cherokee/"&gt;http://felecan.com/2011/getting-django-work-uwsgi-cherokee/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://projects.unbit.it/uwsgi/wiki/Install"&gt;http://projects.unbit.it/uwsgi/wiki/Install&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>vim xptemplate add smarty(tpl) support</title><link href="http://blog.carlcarl.me/28/vim-xptemplate-add-smartytpl-support/" rel="alternate"></link><updated>2011-06-22T14:10:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-06-22:28/vim-xptemplate-add-smartytpl-support/</id><summary type="html">&lt;p&gt;弄了很久 查了一下資料才發現原來那麼簡單=.=。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;personal_ftplugin/&lt;/code&gt; 底下要先建一個 &lt;code&gt;smarty&lt;/code&gt; 資料夾，接著在裡面新增一個 &lt;code&gt;smarty.xpt.vim&lt;/code&gt; 檔案。&lt;/p&gt;
&lt;p&gt;以下是檔案的內容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;XPTemplate priority=personal
XPTinclude
html/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就 ok 了，其實就是把 html 的設定拿來用而已。接著開一個 tpl 副檔名的試試看，應該是 ok。我想應該底層有去做 smarty 和 tpl 副檔名的對應，要不然這邊的內容完全都沒看到 tpl 的對應。&lt;/p&gt;
&lt;p&gt;參考網頁&lt;/p&gt;
&lt;p&gt;&lt;a href="http://groups.google.com/group/xptemplate/browse_thread/thread/9af94f0e27007817#"&gt;http://groups.google.com/group/xptemplate/browse_thread/thread/9af94f0e27007817#&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Dotcloud deploy python+django</title><link href="http://blog.carlcarl.me/27/dotcloud-deploy-python-django/" rel="alternate"></link><updated>2011-06-21T09:00:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-06-21:27/dotcloud-deploy-python-django/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.dotcloud.com/"&gt;dotcloud&lt;/a&gt; 是個可以讓你佈署網站的平台，而且提供了 python, php, ruby 甚至是最近剛發展起來的 node.js 都有，資料庫方面也支援了幾種 像是最常見的 mysql, sqlite, mongodb 等，另外我看了一下 居然還有 hadoop!  感覺還滿有趣的。&lt;/p&gt;
&lt;p&gt;除了提供多種開發套件以外，dotcloud 有個不錯的地方是支援ssh連線登入，超方便!&lt;/p&gt;
&lt;p&gt;之前在 PTT 就有看過有人在講這個服務了，雖然現在還在beta的階段 不過就我現在用起來 感覺其實還滿不錯的，希望以後還是有提供免費的服務XD。如果要註冊的話，這部份還滿特別的，先在首頁輸入 email，接著等大概一天吧(還滿久的 = =||)，就會收到email認證，接著就能順利註冊了。&lt;/p&gt;
&lt;p&gt;這次我要在 dotcloud 上裝的是 python + django。首先先準備裝套件吧 話說 python-setuptools 這個套件，官網好像沒有講得很清楚，查了一下才發現要裝，不然會沒 easy_install 這指令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python python-setuptools
sudo easy_install dotcloud
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著是開 project 啦，test 是我測試的名稱，可以依據需要修改:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dotcloud create &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;輸入完後 應該會要求你輸入 API key，這個就去網頁的設定部份就找得到了，複製貼上即可。&lt;/p&gt;
&lt;p&gt;開完 project，接著要指定使用的語言和 url 位置。如果這邊輸入 test.www 的話，到時候 url 就會是&lt;code&gt;www.test.dotcloud.com&lt;/code&gt; 這樣:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dotcloud deploy -t python test.www
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著開一個資料夾，並且在裡面開個 django project 在加上一些設定檔:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir &lt;span class="nb"&gt;test&lt;/span&gt;-on-dotcloud
&lt;span class="nb"&gt;cd test&lt;/span&gt;-on-dotcloud
&lt;span class="nb"&gt;echo &lt;/span&gt;django &amp;gt; requirements.txt
django-admin.py startproject &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 test-on-dotcloud 底下開一個 wsgi.py 檔，輸入以下內容(test.setting 的 test 記得根據前面的設定作修改):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test.settings&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.core.handlers.wsgi&lt;/span&gt;
&lt;span class="n"&gt;djangoapplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SCRIPT_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;djangoapplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span style="color: #ff0000;"&gt;記得不要把 wsgi.py 和 requirements.txt 放進去 test 裡面，這樣一定會失敗&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接著在 test-on-dotcloud 底下執行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dotcloud push test.www .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span style="color: #ff0000;"&gt;記得不要漏掉 test.www 後面的點&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接著連上 www.test.dotcloud.com 應該就可以看到成功的訊息了。(這個網域名照理來說應該在前面會發生有重複名稱的錯誤(我猜啦)所以實際上應該不會輸入到這個網址才對XD)&lt;/p&gt;
&lt;p&gt;參考網頁&lt;/p&gt;
&lt;p&gt;&lt;a href="http://simple-is-better.com/news/378"&gt;http://simple-is-better.com/news/378&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.dotcloud.com/tutorials/django/"&gt;http://docs.dotcloud.com/tutorials/django/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.dotcloud.com/cli/#install-dotcloud/"&gt;http://docs.dotcloud.com/cli/#install-dotcloud/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dmyz.org/archives/110"&gt;http://dmyz.org/archives/110&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>windows xdebug, wincachegrind, Zend server</title><link href="http://blog.carlcarl.me/26/windows-xdebug-wincachegrind-zend-server/" rel="alternate"></link><updated>2011-06-21T00:48:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-06-21:26/windows-xdebug-wincachegrind-zend-server/</id><summary type="html">&lt;p&gt;最近在想辦法加速 zend framework 的執行速度，弄了超久。下次有這種 case，我死都不用 zend 了= =。&lt;/p&gt;
&lt;p&gt;這次要用的是利用 xdebug 和 wincachegrind 來分析一下 php 執行的速度和呼叫情況之類的。首先要裝的是&lt;a href="http://xdebug.org/"&gt;xdebug&lt;/a&gt;這個工具，進去官網後的下載頁面後可以看到幾種執行檔，我這邊用的是 php5.2 版 有兩種可以選 &lt;a href="http://xdebug.org/files/php_xdebug-2.1.1-5.2-vc6-nts.dll"&gt;PHP 5.2 VC6 (32 bit)&lt;/a&gt;, &lt;a href="http://xdebug.org/files/php_xdebug-2.1.1-5.2-vc6.dll"&gt;PHP 5.2 VC6
TS (32 bit)&lt;/a&gt;，如果是 php5.3 版就要選另外幾種了，這邊我是分不太清楚前後兩種的差別 不過如果是用一般的 apache server 的話可以用後面那種試試看。&lt;/p&gt;
&lt;p&gt;下載後放至 &lt;code&gt;php&lt;/code&gt; 目錄的 &lt;code&gt;ext&lt;/code&gt; 資料夾底下，在 &lt;code&gt;php.ini&lt;/code&gt; 檔裡加上以下幾行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Xdebug]&lt;/span&gt;
&lt;span class="na"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;php_xdebug.dll&lt;/span&gt;
&lt;span class="na"&gt;xdebug.profiler_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;On&lt;/span&gt;
&lt;span class="na"&gt;xdebug.profiler_output_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C:xdebug&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通常 &lt;code&gt;php_xdebug.dll&lt;/code&gt; 下載檔名後後面會接一長串版本名，所以我會修改一下檔名 這樣比較不會打錯，&lt;code&gt;xdebug.profiler_output_dir&lt;/code&gt; 這邊的資料夾要自己建，為了方便 我通常就直接在 &lt;code&gt;C&lt;/code&gt; 底下直接建一個 &lt;code&gt;xdebug&lt;/code&gt; 資料夾來用。&lt;/p&gt;
&lt;p&gt;接著要用 &lt;a href="http://sourceforge.net/projects/wincachegrind/files/wincachegrind/wincachegrind-10.0.0.14/"&gt;wincachegrind&lt;/a&gt; 來作分析，下載回來後直接開就能用了 這邊要先在 &lt;code&gt;Tools/Options&lt;/code&gt; 底下去修改 &lt;code&gt;working folder&lt;/code&gt;，這邊的目錄跟之前 &lt;code&gt;xdebug.profiler_output_dir&lt;/code&gt; 的目錄會是一樣的，這樣才有辦法分析 xdebug 所產生的檔案。&lt;/p&gt;
&lt;p&gt;另外，後來 Web server 我改用 &lt;a href="http://www.zend.com/en/products/server-ce/"&gt;zend server CE&lt;/a&gt;，速度好像增快了不少，不過在開啟 web 服務的時候遇到了點問題，後來查到，要到 &lt;code&gt;ZendZendServeretc&lt;/code&gt; 將 &lt;code&gt;ZendEnablerConf.xml&lt;/code&gt; 前面的亂碼修改成 &lt;code&gt;&amp;lt;?xml&lt;/code&gt; 並另存成 &lt;code&gt;UTF-8&lt;/code&gt; 就 ok 了。&lt;/p&gt;
&lt;p&gt;但是接著想找怎麼重開 web server，卻找不到地方可以按 orz，只找到輸入 commadn Line 的方式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;net stop Apache2.2-Zend &amp;amp;&amp;amp; net start Apache2.2-Zend
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是想用 xdebug 實際量測的時候卻發現好像不能直接用之前的設定= =||，後來查了一些資料 大致要修改一些東西。首先 xdebug 的 dll 檔要選擇前面 &lt;a href="http://xdebug.org/files/php_xdebug-2.1.1-5.2-vc6-nts.dll"&gt;PHP 5.2 VC6 (32 bit)&lt;/a&gt;，接著修改 &lt;code&gt;C:Program FilesZendZendServeretccfgdebugger.ini&lt;/code&gt;，將 &lt;code&gt;zend_extension_manager.dir.debugger=......&lt;/code&gt;，這行前面加個分號註解掉，&lt;code&gt;php.ini&lt;/code&gt; 檔裡，&lt;code&gt;xdebug&lt;/code&gt; 移到最前面並作一點修改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Xdebug]&lt;/span&gt;
&lt;span class="na"&gt;zend_extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;你的php目錄extphp_xdebug.dll&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;xdebug.profiler_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Onxdebug.profiler_output_dir=&amp;quot;C:xdebug&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;zend_extensioln&lt;/code&gt; 記得是改成自己安裝的對應目錄，安裝的部份差不多這樣就 ok 了。&lt;/p&gt;
&lt;p&gt;參考網頁:&lt;br /&gt;
&lt;a href="http://daimajishu.iteye.com/blog/958684"&gt;http://daimajishu.iteye.com/blog/958684&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.antennule.net/?p=255"&gt;http://www.antennule.net/?p=255&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://galide.jazar.co.uk/2011/02/zend-server-hosted-on-windows-restart.html"&gt;http://galide.jazar.co.uk/2011/02/zend-server-hosted-on-windows-restart.html&lt;/a&gt;  &lt;/p&gt;</summary><category term="zend framework"></category></entry><entry><title>Ubuntu nginx installation(easier)</title><link href="http://blog.carlcarl.me/25/ubuntu-nginx-installation-easier/" rel="alternate"></link><updated>2011-06-21T00:31:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-06-21:25/ubuntu-nginx-installation-easier/</id><summary type="html">&lt;p&gt;從 &lt;a href="/24/ubuntu-nginx-installation"&gt;之前這篇&lt;/a&gt; 做了點修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install nginx php5-cli php5-cgi spawn-fcgi psmisc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 &lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt; 底下會有個 &lt;code&gt;default&lt;/code&gt;，直接來修改這個檔案:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;server {
    listen   80 default;
    server_name  localhost;
    access_log  /var/log/nginx/localhost.access.log;
    location / {
        root   /var/www/nginx-default;
        index   index.php;
    }
    location /phpmyadmin {
    root /usr/share;
    index index.php;
    }
    location ~ .php$ {
        set $php_root   /var/www/nginx-default;
        if ($request_uri ~* /phpmyadmin) {
            set $php_root /usr/share;
        }
        fastcgi_pass 127.0.0.1;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $php_root$fastcgi_script_name;
        include /etc/nginx/fastcgi_params;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完後來安裝 &lt;code&gt;php-fpm&lt;/code&gt;，不過我用 10.04 LTS 是找不到這個套件的，所以一開始就要加入某個來源:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo aptitude install python-software-properties
sudo add-apt-repository ppa:brianmercer/php
sudo aptitude -y update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著安裝:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo aptitude -y install php5-fpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後啟動 service 就 ok 了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service php5-fpm start
sudo service nginx start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外有些在參考網頁裡還有加上一些設定 我覺得應該不需要修改也可以 work，試試看唄&lt;/p&gt;
&lt;p&gt;參考網頁:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gerardmcgarry.com/blog/how-install-php-fpm-nginx-ubuntu-1004-server"&gt;http://gerardmcgarry.com/blog/how-install-php-fpm-nginx-ubuntu-1004-server&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Ubuntu Nginx installation</title><link href="http://blog.carlcarl.me/24/ubuntu-nginx-installation/" rel="alternate"></link><updated>2011-06-13T15:51:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-06-13:24/ubuntu-nginx-installation/</id><summary type="html">&lt;p&gt;[更新] 這邊有修改過的&lt;a href="/25/ubuntu-nginx-installation-easier/"&gt;簡單版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;弄了好久，參考了幾篇教學，應該算是能跑了吧囧a。話說有幾篇教學講得都不太一樣 害我也不知道該看哪篇才好，後來是找了&lt;a href="http://library.linode.com/web-servers/nginx/php-fastcgi/ubuntu-10.04-lucid"&gt;這一篇&lt;/a&gt;來作看看。&lt;/p&gt;
&lt;p&gt;首先先抓套件來安裝吧:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install nginx php5-cli php5-cgi spawn-fcgi psmisc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 &lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt;，底下應該會有個 &lt;code&gt;default&lt;/code&gt; 設定檔，直接來修改這個檔案:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;server {
    listen   80 default;
    server_name  localhost;
    access_log  /var/log/nginx/localhost.access.log;
    location / {
        root   /var/www/nginx-default;
        index   index.php;
    }
    location /phpmyadmin {
        root /usr/share;
        index index.php;
    }
    location ~ .php$ {
        set $php_root   /var/www/nginx-default;
        if ($request_uri ~* /phpmyadmin) {
            set $php_root /usr/share;
        }
        fastcgi_pass unix:/var/run/php-fastcgi/php-fastcgi.socket;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $php_root$fastcgi_script_name;
        include /etc/nginx/fastcgi_params;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;listen&lt;/code&gt; 指定 port，而 &lt;code&gt;location /&lt;/code&gt; 的 &lt;code&gt;root&lt;/code&gt; 位置，安裝完 &lt;code&gt;nginx&lt;/code&gt; 之後，通常網頁目錄會是這個位置。另外我還有安裝 phpmyadmin，所以這邊有 phpmyadmin 的設定，至於在最後面的 &lt;code&gt;location&lt;/code&gt; 設定，需要用 &lt;code&gt;if&lt;/code&gt; 來判斷是在 &lt;code&gt;/var/www/nginx-default&lt;/code&gt; 還是 &lt;code&gt;/usr/share&lt;/code&gt; 來設定 &lt;code&gt;SCRIPT_FILENAME&lt;/code&gt;，不然 phpmyadmin 會有錯誤。&lt;/p&gt;
&lt;p&gt;接著在 &lt;code&gt;/usr/bin&lt;/code&gt; 底下新增一個檔案叫做 &lt;code&gt;php-fastcgi&lt;/code&gt;，將以下內容複製進去&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;FASTCGI_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;www-data
&lt;span class="nv"&gt;FASTCGI_GROUP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;www-data
&lt;span class="nv"&gt;SOCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/php-fastcgi/php-fastcgi.socket
&lt;span class="nv"&gt;PIDFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/php-fastcgi/php-fastcgi.pid
&lt;span class="nv"&gt;CHILDREN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6
&lt;span class="nv"&gt;PHP5&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/php5-cgi
/usr/bin/spawn-fcgi -s &lt;span class="nv"&gt;$SOCKET&lt;/span&gt; -P &lt;span class="nv"&gt;$PIDFILE&lt;/span&gt; -C &lt;span class="nv"&gt;$CHILDREN&lt;/span&gt; -u &lt;span class="nv"&gt;$FASTCGI_USER&lt;/span&gt; -g &lt;span class="nv"&gt;$FASTCGI_GROUP&lt;/span&gt; -f &lt;span class="nv"&gt;$PHP5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後修改權限:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chmod +x /usr/bin/php-fastcgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 &lt;code&gt;site-enabled&lt;/code&gt; 底下建立一個到 &lt;code&gt;sites-available&lt;/code&gt; 底下 &lt;code&gt;default&lt;/code&gt; 的連結:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/nginx/sites-enabled/
ln -s /etc/nginx/sites-available/default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下來到 &lt;code&gt;/etc/init.d/&lt;/code&gt; 底下建立一個 &lt;code&gt;php-fastcgi&lt;/code&gt; 的檔案，以下是內容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;PHP_SCRIPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/php-fastcgi
&lt;span class="nv"&gt;FASTCGI_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;www-data
&lt;span class="nv"&gt;FASTCGI_GROUP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;www-data
&lt;span class="nv"&gt;PID_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/php-fastcgi
&lt;span class="nv"&gt;PID_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/php-fastcgi/php-fastcgi.pid
&lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; in
start&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; ! -d &lt;span class="nv"&gt;$PID_DIR&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; 
    &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;mkdir &lt;span class="nv"&gt;$PID_DIR&lt;/span&gt;
        chown &lt;span class="nv"&gt;$FASTCGI_USER&lt;/span&gt;:&lt;span class="nv"&gt;$FASTCGI_GROUP&lt;/span&gt; &lt;span class="nv"&gt;$PID_DIR&lt;/span&gt;
        chmod 0770 &lt;span class="nv"&gt;$PID_DIR&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;    if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -r &lt;span class="nv"&gt;$PID_FILE&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;php-fastcgi already running with PID `cat $PID_FILE`&amp;quot;&lt;/span&gt;
        &lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nv"&gt;$PHP_SCRIPT&lt;/span&gt;
        &lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
;;
stop&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -r &lt;span class="nv"&gt;$PID_FILE&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$PID_FILE&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
        rm &lt;span class="nv"&gt;$PID_FILE&lt;/span&gt;
        &lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Could not find PID file $PID_FILE&amp;quot;&lt;/span&gt;
        &lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
    &lt;span class="k"&gt;fi&lt;/span&gt;
;;
restart&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -r &lt;span class="nv"&gt;$PID_FILE&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$PID_FILE&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
        rm &lt;span class="nv"&gt;$PID_FILE&lt;/span&gt;
        &lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Could not find PID file $PID_FILE&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nv"&gt;$PHP_SCRIPT&lt;/span&gt;
    &lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
;;
status&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -r &lt;span class="nv"&gt;$PID_FILE&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;php-fastcgi running with PID `cat $PID_FILE`&amp;quot;&lt;/span&gt;
        &lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Could not find PID file $PID_FILE, php-fastcgi does not appear to be running&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
;;
*&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: php-fastcgi {start|stop|restart|status}&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;RET_VAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
;;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="nv"&gt;$RET_VAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後就是設定並啟動服務啦:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chmod +x /etc/init.d/php-fastcgi
update-rc.d php-fastcgi defaults
/etc/init.d/php-fastcgi start
/etc/init.d/nginx start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行是將這個檔案加上執行權限，&lt;code&gt;update-rc.d&lt;/code&gt; 將這個檔案加入預設開機就會執行的服務，後面兩行就是執行這兩個服務了。&lt;/p&gt;
&lt;p&gt;接下來可以在 &lt;code&gt;/var/www/nginx-default&lt;/code&gt; 底下建立一個 &lt;code&gt;index.php&lt;/code&gt;，裡面可以加上以下的內容來驗證是否正確:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;?php phpinfo&lt;span class="o"&gt;()&lt;/span&gt;; ?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大致差不多就是這樣。根據我個人的經驗 好像是只要改到一些設定的話，nginx 和 php-fastcgi 都要重啟才會生效的樣子。另外教學網頁中有講的 unix socket 和 tcp socket 的設定也不太一樣，效能上 unix socket 應該會好些。&lt;/p&gt;
&lt;p&gt;參考網址:&lt;br /&gt;
&lt;a href="http://arnisoft.com/253/nginx-phpmyadmin-configuration/"&gt;http://arnisoft.com/253/nginx-phpmyadmin-configuration/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://i.laoer.com/nginx-alias-php.html"&gt;http://i.laoer.com/nginx-alias-php.html&lt;/a&gt;  &lt;/p&gt;</summary></entry><entry><title>Linux check disk IO</title><link href="http://blog.carlcarl.me/23/linux-check-dist-io/" rel="alternate"></link><updated>2011-06-13T10:44:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-06-13:23/linux-check-dist-io/</id><summary type="html">&lt;p&gt;讀取速度 輸入下面這行指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hdparm -t /dev/sda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;/dev/sda&lt;/code&gt; 可以換成想測的硬碟裝置&lt;/p&gt;
&lt;p&gt;輸入之後會產生類似以下的輸出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Timing buffered disk reads:  1168 MB in  3.00 seconds = 389.29 MB/sec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;組 RAID5 速度快很多= =+&lt;/p&gt;
&lt;p&gt;寫入速度 輸入下面這行指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;time &lt;/span&gt;sh -c &lt;span class="s2"&gt;&amp;quot;dd if=/dev/zero of=tmp.dd bs=1000k count=100; sync&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會產生類似以下的輸入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;100+0 records in
100+0 records out
102400000 bytes (102 MB) copied, 0.0820241 s, 1.2 GB/s
real    0m1.669s
user    0m0.000s
sys 0m0.088s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著將 102MB 除以 real 的時間(這裡是 1.669)就可以算出寫入的時間了，測完記得要把 &lt;code&gt;outfile&lt;/code&gt; 這個檔案刪掉，因為他是直接生出一個檔案到目錄底下。&lt;/p&gt;
&lt;p&gt;參考網址&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cha.homeip.net/blog/2010/05/2263.html"&gt;http://cha.homeip.net/blog/2010/05/2263.html&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Ubuntu Eucalyptus installation</title><link href="http://blog.carlcarl.me/22/ubuntu-eucalyptus-installation/" rel="alternate"></link><updated>2011-05-26T09:05:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-05-26:22/ubuntu-eucalyptus-installation/</id><summary type="html">&lt;p&gt;我是在已有的 Ubuntu 上安裝 Eucalyptus，如果是直接用 Ubuntu Enterprise Cloud 應該會比較簡單 orz。&lt;/p&gt;
&lt;p&gt;大概講一下幾個我遇到的問題 orz。&lt;/p&gt;
&lt;h3&gt;eucalyptus-cloud restart : Unknown instance&lt;/h3&gt;
&lt;p&gt;改直接執行 &lt;code&gt;eucalyptus-cloud&lt;/code&gt;看看:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[error:0185] User &amp;#39;eucalyptus&amp;#39; validated
[error:0077] Path /usr/lib/jvm/java-6-openjdk is not a directory
[error:0323] Cannot locate Java Home
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果出現以上的錯誤就是要裝 &lt;code&gt;openjdk-6-jre-headless&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;記得先執行 service&lt;/h3&gt;
&lt;p&gt;下面這行還滿方便的，不過記得要先到 &lt;code&gt;/etc/init.d/&lt;/code&gt;底下作: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for &lt;/span&gt;service in euca*; &lt;span class="k"&gt;do &lt;/span&gt;start &lt;span class="nv"&gt;$service&lt;/span&gt;;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;註冊節點出現錯誤的問題&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Warning: cannot file file node-cert.pem in //var/lib/eucalyptus/keys/
Warning: cannot file file cluster-cert.pem in //var/lib/eucalyptus/keys/
Warning: cannot file file node-pk.pem in //var/lib/eucalyptus/keys/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這個問題卡很久，明明就把 key 複製到 data node 上面了，用 &lt;code&gt;euca_conf --list-nodes&lt;/code&gt; 還是空的沒東西= =&lt;/p&gt;
&lt;p&gt;後來才想到我的 cluster node 裡 key 是放在 &lt;code&gt;keys/cluster/&lt;/code&gt; 底下，所以把 key 複製到上一層 他就能找得到 key 了。上面那個錯誤訊息是在說找不到 cluster node 裡的 key 不是 data node 裡的。&lt;/p&gt;
&lt;p&gt;參考網頁:&lt;br /&gt;
&lt;a href="http://tamastarjanyi.blogspot.com/2010/06/eucalyptus-problem-on-ubuntu-1004-lucid.html"&gt;http://tamastarjanyi.blogspot.com/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://open.eucalyptus.com/forum/problem-register-nodes"&gt;http://open.eucalyptus.com/forum/problem-register-nodes&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://open.eucalyptus.com/forum/node-controller-not-registering"&gt;http://open.eucalyptus.com/forum/node-controller-not-registering&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://open.eucalyptus.com/forum/cannot-register-node"&gt;http://open.eucalyptus.com/forum/cannot-register-node&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://open.eucalyptus.com/forum/problem-node-registration"&gt;http://open.eucalyptus.com/forum/problem-node-registration&lt;/a&gt;  &lt;/p&gt;</summary></entry><entry><title>git export files to some existed directory</title><link href="http://blog.carlcarl.me/21/git-export-files-to-some-existed-directory/" rel="alternate"></link><updated>2011-05-24T16:14:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-05-24:21/git-export-files-to-some-existed-directory/</id><summary type="html">&lt;p&gt;最近想把 vimrc 和 bashrc 等設定檔作同步，想說大家都在用 git，所以就不用 svn 改用 git 看看了!&lt;/p&gt;
&lt;p&gt;但是在同步的時候卻遇到了問題，本來想說直接輸入看看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone &amp;lt;git repo url&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果出現錯誤: &lt;code&gt;fatal: destination path
'home目錄' git clone already exists and is not an empty directory&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因為我的 home 目錄已經存在 而且也沒辦法 merge = =，沒辦法，只好來找一下資料。&lt;/p&gt;
&lt;p&gt;說真的還找得滿久的，以下是我覺得算是比較能接受的一種解決方法(有其他方法歡迎提供QQ)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
git remote add origin gitpath
git fetch
git branch master origin/master
git checkout master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在家目錄下作以上動作，接著就可以看到 git 上的 .bashrc 終於出現在我的家目錄底下了orz&lt;/p&gt;
&lt;p&gt;參考網頁&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/tortoisegit/issues/detail?id=204"&gt;http://code.google.com/p/tortoisegit/issues/detail?id=204&lt;/a&gt;&lt;/p&gt;</summary><category term="bashrc"></category><category term="git"></category><category term="vimrc"></category></entry><entry><title>linux several ways to open or close service</title><link href="http://blog.carlcarl.me/20/linux-several-ways-to-open-or-close-service/" rel="alternate"></link><updated>2011-05-12T07:29:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-05-12:20/linux-several-ways-to-open-or-close-service/</id><summary type="html">&lt;p&gt;(如果想立即開啟或關掉就要用 service 或是直接到 /etc/init.d/ 底下去操作)&lt;/p&gt;
&lt;p&gt;以下是用來設定在系統開啟時預設要執行的 service&lt;/p&gt;
&lt;p&gt;在 RedHat 系列底下可以用 &lt;code&gt;chkconfig&lt;/code&gt;，啟用 httpd (如果已經加到 chkconfig 裡了 就可以不用輸入第一行)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chkconfig httpd --add
chkconfig http on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;停用 httpd (第二行是把 httpd 從 chkconfig 的管理中移除，我的建議是輸入第一行就好了)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chkconfig httpd off
chkconfig httpd --del
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Debian 或 Ubuntu 底下的話 可以用 &lt;code&gt;update-rc.d&lt;/code&gt; 開啟 apache2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;update-rc.d apache2 defaults
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;關掉 apache2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;update-rc.d -f apache2 remove
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至於前面提到的 service，這裡提供一些簡單的範例(找不到這個指令的話可以用套件管理找找看)&lt;/p&gt;
&lt;p&gt;用 service 開啟 httpd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service httpd start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 service 關閉 httpd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service httpd stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://linuxhelp.blogspot.com/2006/04/enabling-and-disabling-services-during_01.html"&gt;http://linuxhelp.blogspot.com/2006/04/enabling-and-disabling-services-during_01.html&lt;/a&gt;
(設定較詳細)&lt;/p&gt;</summary></entry><entry><title>vim auto complete with clang_complete</title><link href="http://blog.carlcarl.me/19/vim-auto-complete-with-clang_complete/" rel="alternate"></link><updated>2011-05-04T13:55:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-05-04:19/vim-auto-complete-with-clang_complete/</id><summary type="html">&lt;p&gt;剛才裝完了，其實安裝還滿簡單的。&lt;/p&gt;
&lt;p&gt;首先先到&lt;a href="https://github.com/Rip-Rip/clang_complete/tree/master/plugin"&gt;下載頁面&lt;/a&gt;，下面會有個 &lt;code&gt;clang_complete.vim&lt;/code&gt; 檔案&lt;/p&gt;
&lt;p&gt;下載這個檔案後 將其放置在 &lt;code&gt;~/.vim/plugin/&lt;/code&gt; 底下
(如果找不到 &lt;code&gt;plugin&lt;/code&gt; 資料夾的話可以自己建)&lt;/p&gt;
&lt;p&gt;接著到這個&lt;a href="https://github.com/Rip-Rip/clang_complete/wiki"&gt;wiki&lt;/a&gt;頁面，照你的作業系統版本來決定要怎麼安裝 clang 這個套件(這個套件還滿肥的，
好像有7X MB)&lt;/p&gt;
&lt;p&gt;裝完之後咧? 就可以用啦XDD，超快。&lt;/p&gt;
&lt;p&gt;以下這張是功能截圖。以這張圖來說，輸入 &lt;code&gt;-&amp;gt;&lt;/code&gt; 或是 &lt;code&gt;.&lt;/code&gt; 之類的，他就會出現提示，這時候就可以用鍵盤上下鍵來選擇要選哪一個來用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="clang_complete" src="http://i.imgur.com/PyNjikJ.png" title="clang_complete" /&gt;  &lt;/p&gt;</summary></entry><entry><title>Zend Framework add Acl setting</title><link href="http://blog.carlcarl.me/18/zend-framework-add-acl-setting/" rel="alternate"></link><updated>2011-04-24T15:22:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-04-24:18/zend-framework-add-acl-setting/</id><summary type="html">&lt;p&gt;首先先在 &lt;code&gt;bootstrap.php&lt;/code&gt; 檔案裡加上下面這個 function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;_initControllers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FrontController&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//require_once &amp;#39;../library/Controller/Helper/Acl.php&amp;#39;;&lt;/span&gt;
    &lt;span class="c1"&gt;//require_once &amp;#39;../library/Controller/Plugin/Auth.php&amp;#39;;&lt;/span&gt;
    &lt;span class="nv"&gt;$acl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Controller_Helper_Acl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Zend_Controller_Front&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$front&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;registerPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Controller_Plugin_Auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$acl&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;$acl&lt;/code&gt; 和 &lt;code&gt;$auth&lt;/code&gt; 這兩個都需要實作，我分別把 &lt;code&gt;auth&lt;/code&gt; 和 &lt;code&gt;acl&lt;/code&gt; 這兩個 class 放在 library 底下的 &lt;code&gt;Controller/Plugin&lt;/code&gt; 和 &lt;code&gt;Controller/Helper/&lt;/code&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Acl 裡面實作角色 目錄 權限設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Controller_Helper_Acl&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;importstu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;coursesetup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;homeworksetup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;teacher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;homework&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;//$this-&amp;gt;add(new Zend_Acl_Resource(&amp;#39;Article_Page&amp;#39;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;student&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Zend_Acl_Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;teacher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;teacher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;student&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;student&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;importstu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;student&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;coursesetup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;teacher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;student&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;teacher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;student&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;homeworksetup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Resource 的名稱我一律用小寫，到時候抓到 controller name 就轉小寫進來判斷，&lt;code&gt;allow&lt;/code&gt; 和 &lt;code&gt;deny&lt;/code&gt; 就是讓角色可以進入或禁止進入那些目錄，參數為(角色, controller, action)，&lt;code&gt;null&lt;/code&gt; 默認為全部, 嫌麻煩的話不寫也是可以。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Auth 是一個 plugin，會抓現在的資料進去 Acl 並作判斷&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Controller_Plugin_Auth&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Zend_Controller_Plugin_Abstract&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$_auth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$_acl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$acl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$auth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_acl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$acl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// 重載 preDispatch() 方法&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;preDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;preDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Zend_Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hasIdentity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$userInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getStudentInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userInfo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;role&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;teacher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userInfo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;role&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userInfo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;role&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;student&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$controller&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//前面提到會轉小寫做判斷&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_acl&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$resource&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//沒加入判斷的controller 預設通過&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_acl&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;isAllowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$action&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Zend_Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hasIdentity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//// 使用者沒登入 就轉登入畫面&lt;/span&gt;
                &lt;span class="c1"&gt;////&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// 用戶沒有目錄的權限 就提示錯誤&lt;/span&gt;
                &lt;span class="c1"&gt;////&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// 設置轉向&lt;/span&gt;
        &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setModuleName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$module&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setControllerName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$controller&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;setActionName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設置大概差不多就是這樣。&lt;/p&gt;
&lt;p&gt;參考網址:&lt;br /&gt;
&lt;a href="http://blogold.chinaunix.net/u2/86974/showart_2219380.html"&gt;http://blogold.chinaunix.net/u2/86974/showart_2219380.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/5209671/zend-framework-nedd-typical-example-of-acl"&gt;http://stackoverflow.com/questions/5209671/zend-framework-nedd-typical-example-of-acl&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://codeutopia.net/blog/2009/02/06/zend_acl-part-1-misconceptions-and-simple-acls/"&gt;http://codeutopia.net/blog/2009/02/06/zend_acl-part-1-misconceptions-and-simple-acls/&lt;/a&gt;  &lt;/p&gt;</summary><category term="zend framework"></category></entry><entry><title>How to connect the server in virtualbox</title><link href="http://blog.carlcarl.me/17/how-to-connect-the-server-in-virtualbox/" rel="alternate"></link><updated>2011-04-21T18:55:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-04-21:17/how-to-connect-the-server-in-virtualbox/</id><summary type="html">&lt;p&gt;如果是要用ssh連的話 就輸入以下指令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:Program FilesOracleVirtualBoxVBoxManage.exe" modifyvm "VM name" --natpf1
"guestssh,tcp,,2222,,22"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;前面如果有改 virtualbox 的安裝位置的話 就要跟著改&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VM name&lt;/code&gt; 請輸入當初在建VM時所輸入的名稱&lt;/p&gt;
&lt;p&gt;後面指的是如果連到本機的 2222 port 的話 就轉向到VM中的 22 port&lt;/p&gt;
&lt;p&gt;同樣的也可以用 &lt;code&gt;guesthttp,tcp,,80,,80&lt;/code&gt; 的方式來把連到本機 80 port的轉向連到VM中的 80 port&lt;/p&gt;
&lt;p&gt;把server建在VM中這樣還可以降低本機被攻擊的危險(如果不考慮效能的因素的話):P&lt;/p&gt;
&lt;p&gt;而且系統備份也很方便~~&lt;/p&gt;
&lt;p&gt;參考資料:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://slo.twbbs.org/?p=417"&gt;http://slo.twbbs.org/?p=417&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>postfix-modify-setting-after-installation</title><link href="http://blog.carlcarl.me/16/postfix-modify-setting-after-installation/" rel="alternate"></link><updated>2011-04-17T11:31:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-04-17:16/postfix-modify-setting-after-installation/</id><summary type="html">&lt;p&gt;之前在裝的時候沒有設定到，結果後來也不知道怎麼再去設定畫面，後來查到了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install --reinstall postfix
sudo dpkg-reconfigure postfix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行是重新安裝，第二行是再次設定。下完後就會進入設定畫面了~。&lt;/p&gt;</summary></entry><entry><title>C useful DEBUG function</title><link href="http://blog.carlcarl.me/15/c-useful-debug-function/" rel="alternate"></link><updated>2011-03-31T18:29:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-31:15/c-useful-debug-function/</id><summary type="html">&lt;p&gt;學了那麼久才知道有這種好功能可以用 = ="&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define DBG(msg, arg...) printf(&amp;quot;%s:%s(%d): &amp;quot; msg,  __FILE__, __FUNCTION__, __LINE__, ##arg)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;FILE&lt;/code&gt; 表示這行所在的程式檔案&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FUNCTION&lt;/code&gt; 表示這個函式所在的函式(唸起來好繞口= =)
不過如果是用 gcc 來編譯的話 建議是用 &lt;code&gt;func&lt;/code&gt;, 我之前用 gcc
編譯前者好像不會過......&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LINE&lt;/code&gt; 代表這函式是在哪一行&lt;/p&gt;
&lt;p&gt;其實也只是把 &lt;code&gt;printf&lt;/code&gt; 有印出一些資訊的版本 define 為一個函式這樣![][]&lt;/p&gt;
&lt;p&gt;(不過要我寫我還真不會= =||)&lt;/p&gt;
&lt;p&gt;而在實際上運用可以這樣:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;DBG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%dn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣如果 i 不等於 2 的話 就會在前面先印出那些資訊 然後才會印出 index 的值&lt;/p&gt;
&lt;p&gt;雖然在一般的小程式內可能用處不大 因為很快就能夠找到錯誤&lt;/p&gt;
&lt;p&gt;不過如果是好幾十個檔案的程式發生錯誤且在程式內有用這功能來作處理的話
就能很快找到錯誤囉~~&lt;/p&gt;
&lt;p&gt;參考網址&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cgi.blog.roodo.com/trackback/11456265"&gt;http://cgi.blog.roodo.com/trackback/11456265&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>C use qsort sort string array</title><link href="http://blog.carlcarl.me/14/c-use-qsort-sort-string-array/" rel="alternate"></link><updated>2011-03-27T19:58:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-27:14/c-use-qsort-sort-string-array/</id><summary type="html">&lt;p&gt;指標真的好難 寫了那麼久還是不太懂&lt;/p&gt;
&lt;p&gt;想用qsort sort 字串 array 結果compare函式怎麼用都會錯囧&lt;/p&gt;
&lt;p&gt;後來上網查了一下資料 才知道用錯了orz&lt;/p&gt;
&lt;p&gt;以下是compare函式範例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像以下這種就可以用上面的compare函式來處理  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;123&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;111222&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.c.happycodings.com/Sorting_Searching/code15.html"&gt;http://www.c.happycodings.com/Sorting_Searching/code15.html&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>C how to know the file size</title><link href="http://blog.carlcarl.me/13/c-how-to-know-the-file-size/" rel="alternate"></link><updated>2011-03-27T09:27:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-27:13/c-how-to-know-the-file-size/</id><summary type="html">&lt;p&gt;兩種方法~&lt;/p&gt;
&lt;p&gt;1.利用 &lt;code&gt;fseek&lt;/code&gt;(或 &lt;code&gt;lseek&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ftell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_SET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.用 &lt;code&gt;stat&lt;/code&gt; 函式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/238603/how-can-i-get-a-files-size-in-c"&gt;http://stackoverflow.com/questions/238603/how-can-i-get-a-files-size-in-c&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>C open function</title><link href="http://blog.carlcarl.me/12/c-open-function/" rel="alternate"></link><updated>2011-03-21T17:31:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-21:12/c-open-function/</id><summary type="html">&lt;p&gt;最近好久沒有用 C 寫程式了，一直狂卡QQ&lt;/p&gt;
&lt;p&gt;晚上在用 &lt;code&gt;open&lt;/code&gt; 函式開檔案,
結果後來看發現權限都沒有設，後來查了一下才發現原來後面要加權限的設定，這裡來講就是 &lt;code&gt;0666&lt;/code&gt; 這串數字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0666&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這數字可以設定使用者、群組、其他人的寫讀執行權限。如果只是開個一般的檔可以無腦一點，&lt;code&gt;0666&lt;/code&gt; 就行了~，至於第二個參數
 &lt;code&gt;O_RDWR&lt;/code&gt; 代表在程式中可讀寫，也可以用 &lt;code&gt;O_WRONLY&lt;/code&gt; 或 &lt;code&gt;O_RDONLY&lt;/code&gt; 代表只寫或只讀，&lt;code&gt;O_CREATE&lt;/code&gt; 則代表建立這個檔案。&lt;/p&gt;
&lt;p&gt;參考網址：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/2245193/c-linux-file-permission-problem-with-open"&gt;http://stackoverflow.com/questions/2245193/c-linux-file-permission-problem-with-open&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>C getopt usage</title><link href="http://blog.carlcarl.me/11/c-getopt-usage/" rel="alternate"></link><updated>2011-03-20T18:36:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-20:11/c-getopt-usage/</id><summary type="html">&lt;p&gt;&lt;code&gt;getopt&lt;/code&gt; 是用來判斷程式參數的函式。像是 &lt;code&gt;./a.out -s&lt;/code&gt; 之類的, &lt;code&gt;getopt&lt;/code&gt;
能對後面的 &lt;code&gt;-s&lt;/code&gt; 這類參數做判斷處理。&lt;br /&gt;
一開始要使用的話記得先：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;getopt&lt;/code&gt; 有三個參數
&lt;code&gt;(int argc, char* argv[], const char* optsting)&lt;/code&gt;，第一個和第二個就直接把
&lt;code&gt;main&lt;/code&gt; 裡頭的參數丟進去就好了，第三個參數就是用來處理前面講到的 &lt;code&gt;-s&lt;/code&gt;
的這類參數。&lt;br /&gt;
舉個例子來講，像是 &lt;code&gt;optstring = "abf"&lt;/code&gt;
的話，就能夠抓到這三個參數值，如：&lt;br /&gt;
&lt;code&gt;./a.out -a&lt;/code&gt; 或 &lt;code&gt;./a.out -b&lt;/code&gt; 或 &lt;code&gt;./a.out -abf&lt;/code&gt; 都 OK。&lt;br /&gt;
而如果你的 &lt;code&gt;f&lt;/code&gt; 需要一個字串值，像是後面需要檔案名稱的話，就可以這樣設
&lt;code&gt;abf:&lt;/code&gt;，&lt;code&gt;f:&lt;/code&gt; 表示 f 之後需要有個額外的參數, 在處理的時候可以透過
&lt;code&gt;optarg&lt;/code&gt; 來使用這額外的參數。&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;getopt&lt;/code&gt; 通常會用 &lt;code&gt;switch&lt;/code&gt; 做處理，以上面的例子當作架構&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abf:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;:
        &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;:&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;oops&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrong command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡可以透過檢查是否有 &lt;code&gt;:&lt;/code&gt;
這個字元來判斷是否有漏掉額外的參數，以這裡來講，就是 &lt;code&gt;f&lt;/code&gt; 後面接的檔名。&lt;br /&gt;
程式如果照下面這樣下的話，就會印出 "oops" 因為後面少了檔名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./a.out -f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;?&lt;/code&gt; 則代表這參數錯誤，不存在。&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;那如果有時候只想接檔名呢 如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./a.out text.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣的話 可以在上面的 &lt;code&gt;while&lt;/code&gt; 迴圈之後用 &lt;code&gt;argv[optind]&lt;/code&gt; 來抓 text.txt。&lt;br /&gt;
&lt;br /&gt;
如果是複數的檔名，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./a.out text.txt text2.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以用 for 迴圈 optind++ 到 argc：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;optind&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;optind&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;optind&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//像是這樣&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/getopt.html"&gt;http://pubs.opengroup.org/onlinepubs/009695399/functions/getopt.html&lt;/a&gt;&lt;/p&gt;</summary><category term="getopt"></category></entry><entry><title>vim indent and tab width</title><link href="http://blog.carlcarl.me/10/vim-indent-and-tab-width/" rel="alternate"></link><updated>2011-03-19T19:44:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-19:10/vim-indent-and-tab-width/</id><summary type="html">&lt;p&gt;設定 Tab 長度為 4，以及自動縮排長度為 4：&lt;br /&gt;
在 &lt;code&gt;.vimrc&lt;/code&gt; 中加入下面兩行  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set tabstop=4  
set shiftwidth=4
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Python Django use MEDIA_URL in templates</title><link href="http://blog.carlcarl.me/9/python-django-use-media-url-in-templates/" rel="alternate"></link><updated>2011-03-19T19:36:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-19:9/python-django-use-media-url-in-templates/</id><summary type="html">&lt;p&gt;在 settings 裏面已經設好 &lt;code&gt;MEDIA_URL&lt;/code&gt;了，可是一直不知道怎麼在 templates 中使用&lt;br /&gt;
像是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;href=&amp;quot;{{ MEDIA_URL }}styles/base.css&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;後來看到一篇有說在 &lt;code&gt;retrun render_to_response&lt;/code&gt; 這邊需要修改，改成這樣, 把第三個參數加上 &lt;code&gt;context_instance&lt;/code&gt; 這句:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;base/index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;context_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就可以使用了~~。&lt;/p&gt;</summary></entry><entry><title>Python Django Beautiful Soup in Google app engine</title><link href="http://blog.carlcarl.me/8/python-django-beautiful-soup-in-google-app-engine/" rel="alternate"></link><updated>2011-03-19T19:27:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-19:8/python-django-beautiful-soup-in-google-app-engine/</id><summary type="html">&lt;p&gt;之前用原生的 HTMLParser 用到很囧，感覺功能還是不夠強大&lt;/p&gt;
&lt;p&gt;後來看到了 &lt;code&gt;BeautifulSoup&lt;/code&gt; 這個 plugin 就想說用用看，使用很方便，只要把裏面的 BeautifulSoup 複製一份到自己的目錄下，然後 import 進來就好了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Google app engine 裡，我是搭配urlfetch來使用，如以下的片段範例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;google.appengine.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlfetch&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;the url address you want&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlfetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 抓網頁&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;  &lt;span class="c"&gt;# book 會得到html的內容&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fromEncoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 建立一個BeautifulSoup的物件&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果會抓出包含 &lt;code&gt;div id=content&lt;/code&gt; 的內容, &lt;code&gt;findAll&lt;/code&gt; 會回傳一個 list，所以在 Django 的 template 裡需要用 for loop 來把 book 的內容印出來，如果要利用 &lt;code&gt;str(book)&lt;/code&gt; 轉成字串, 需要注意頭尾的 &lt;code&gt;[&lt;/code&gt; 和 &lt;code&gt;]&lt;/code&gt;，以及中間用來分開裏面元素的 &lt;code&gt;,&lt;/code&gt;。&lt;/p&gt;</summary></entry><entry><title>html iframe use javascript to add css files</title><link href="http://blog.carlcarl.me/7/html-iframe-use-javascript-to-add-css-files/" rel="alternate"></link><updated>2011-03-19T19:07:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-19:7/html-iframe-use-javascript-to-add-css-files/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;frm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frame&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;otherhead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;head&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;style.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;otherhead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Pixnet paste code</title><link href="http://blog.carlcarl.me/6/pixnet-paste-code/" rel="alternate"></link><updated>2011-03-14T16:11:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-14:6/pixnet-paste-code/</id><summary type="html">&lt;p&gt;在側邊欄位設定裡 -&amp;gt; 頁尾描述的部分貼上下面的 code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shCore.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shAutoloader.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushBash.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCpp.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCSharp.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCss.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushPowerShell.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushJScript.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushPlain.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushSql.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushVb.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushXml.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/styles/shCore.css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://alexgorbatchev.com/pub/sh/current/styles/shThemeDefault.css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用的時候 將 code 用 &lt;code&gt;&amp;lt;pre class="brush: js"&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt; 包起來就可以了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;+--------------------------------------------------------------------------+
|   -------------- ------------------------------- -------------------     |
|   Brush name     Brush aliases                   File name               |
|   Bash/shell     bash, shell                     shBrushBash.js          |
|   C#            c-sharp, csharp                 shBrushCSharp.js         |
|   C++            cpp, c                          shBrushCpp.js           |
|   CSS            css                             shBrushCss.js           |
|   Delphi         delphi, pas, pascal             shBrushDelphi.js        |
|   Diff           diff, patch                     shBrushDiff.js          |
|   Groovy         groovy                          shBrushGroovy.js        |
|   JavaScript     js, jscript, javascript         shBrushJScript.js       |
|   Java           java                            shBrushJava.js          |
|   Perl           perl, pl                        shBrushPerl.js          |
|   PHP            php                             shBrushPhp.js           |
|   Plain Text     plain, text                     shBrushPlain.js         |
|   Python         py, python                      shBrushPython.js        |
|   Ruby           rails, ror, ruby                shBrushRuby.js          |
|   Scala          scala                           shBrushScala.js         |
|   SQL            sql                             shBrushSql.js           |
|   Visual Basic   vb, vbnet                       shBrushVb.js            |
|   XML            xml, xhtml, xslt, html, xhtml   shBrushXml.js           |
|   -------------- ------------------------------- -------------------     |
|                                                                          |
|   : style                                                                |
|                                                                          |
|                                                                          |
|                                                                          |
+--------------------------------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考網址:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://itzak.pixnet.net/blog/post/234830"&gt;銅板人生&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://weiyiao.pixnet.net/blog/post/23484768"&gt;威力手記本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://miakila.pixnet.net/blog/post/30926039"&gt;http://miakila.pixnet.net/blog/post/30926039&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>screenrc setting</title><link href="http://blog.carlcarl.me/5/screenrc-setting/" rel="alternate"></link><updated>2011-03-14T15:21:00+08:00</updated><author><name>carlcarl</name></author><id>tag:blog.carlcarl.me,2011-03-14:5/screenrc-setting/</id><summary type="html">&lt;p&gt;在&lt;a href="http://antontw.blogspot.com/2007/04/screenrc-screenrc.html"&gt;大步向前走&lt;/a&gt;看到不錯的設定檔 把顏色稍微改一下!&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenrc" src="http://i.imgur.com/yCkhXdUl.png" title="screenrc" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;caption always &amp;quot;%{= rk} %{= bY} [%n]%t @ %H %{-} %= %{= rr} %l %{-} | %{= rG} %Y-%m-%d %{-} &amp;quot;
hardstatus alwayslastline &amp;quot; %-Lw%{= Bw}%n%f %t%{-  }%+Lw %=| %0c:%s &amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參數設定的話在&lt;a href="http://cytseng.twbbs.org/?p=26"&gt;小明的網誌&lt;/a&gt;可以看到。&lt;/p&gt;</summary></entry></feed>